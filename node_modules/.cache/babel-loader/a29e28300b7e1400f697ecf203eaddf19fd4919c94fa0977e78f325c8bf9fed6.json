{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\celst\\\\sds\\\\src\\\\components\\\\GrowthHistory.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport '../styles/GrowthReport.css'; // Make sure styles exist for tabs etc.\nimport { useNavigate } from 'react-router-dom';\nimport { Line } from 'react-chartjs-2';\nimport { Chart as ChartJS, LineElement, PointElement, Tooltip, Legend, CategoryScale, LinearScale, Title } from 'chart.js';\n\n// Register required components for Chart.js\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nChartJS.register(LineElement, PointElement, Tooltip, Legend, CategoryScale, LinearScale, Title);\nconst GrowthReport = () => {\n  _s();\n  const navigate = useNavigate();\n  const [simulationResults, setSimulationResults] = useState(null);\n  const [initialConditions, setInitialConditions] = useState({\n    // State for initial conditions display\n    substrate: {},\n    temperature: 0,\n    ph: 0,\n    days: 0,\n    initialWeight: 0\n  });\n  const [finalSimulatedYield, setFinalSimulatedYield] = useState(null);\n  const [activeTab, setActiveTab] = useState('yield'); // 'yield', 'nutrients', 'environment'\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    setError(null);\n    // Load simulation results\n    const savedResults = localStorage.getItem('simulationResults');\n    if (savedResults) {\n      try {\n        const results = JSON.parse(savedResults);\n        setSimulationResults(results);\n        // Extract final yield\n        if (results && results.length > 0) {\n          var _results;\n          const lastYield = (_results = results[results.length - 1]) === null || _results === void 0 ? void 0 : _results.MushroomYield;\n          if (Number.isFinite(lastYield)) {\n            setFinalSimulatedYield(lastYield);\n          }\n        }\n      } catch (e) {\n        console.error(\"Failed to parse simulation results\", e);\n        setError(\"Could not load simulation results.\");\n      }\n    } else {\n      setError(\"Simulation results not found. Please run a simulation first.\");\n    }\n\n    // Load initial conditions for display table (optional but good context)\n    try {\n      const savedSubstrate = JSON.parse(localStorage.getItem('substrate') || '{}');\n      const savedTemperature = localStorage.getItem('temperature');\n      const savedPh = localStorage.getItem('ph');\n      const savedDays = localStorage.getItem('simulationDays'); // Get the duration used\n      const initialWeight = Object.values(savedSubstrate).reduce((sum, val) => sum + (Number(val) || 0), 0);\n      setInitialConditions({\n        substrate: savedSubstrate,\n        temperature: parseFloat(savedTemperature) || 0,\n        ph: parseFloat(savedPh) || 0,\n        days: parseInt(savedDays, 10) || 0,\n        initialWeight: initialWeight\n      });\n    } catch (e) {\n      console.error(\"Failed to load initial conditions for display\", e);\n      // Non-critical error, maybe just log it\n    }\n  }, []); // Run only on mount\n\n  const handleBackClick = () => {\n    // Navigate back to where the simulation was run\n    navigate('/growth-simulation');\n  };\n  const handleHomeClick = () => {\n    navigate('/'); // Navigate to the Landing Page\n  };\n\n  // --- Chart Data Preparation ---\n  const getChartData = () => {\n    if (!simulationResults || simulationResults.length === 0) {\n      return {\n        labels: [],\n        datasets: []\n      };\n    }\n    const labels = simulationResults.map(p => p.time.toFixed(1));\n    let datasets = [];\n    switch (activeTab) {\n      case 'yield':\n        datasets = [{\n          label: 'Mushroom Yield (g)',\n          data: simulationResults.map(p => Number.isFinite(p.MushroomYield) ? p.MushroomYield : null),\n          borderColor: 'lightgreen',\n          backgroundColor: 'rgba(144, 238, 144, 0.2)',\n          yAxisID: 'y' // Assign to the primary y-axis\n        }];\n        break;\n      case 'nutrients':\n        datasets = [{\n          label: 'Complex C (g)',\n          data: simulationResults.map(p => Number.isFinite(p.ComplexC) ? p.ComplexC : null),\n          borderColor: 'brown',\n          backgroundColor: 'rgba(165, 42, 42, 0.2)',\n          yAxisID: 'y'\n        }, {\n          label: 'Simple C (g)',\n          data: simulationResults.map(p => Number.isFinite(p.SimpleC) ? p.SimpleC : null),\n          borderColor: 'orange',\n          backgroundColor: 'rgba(255, 165, 0, 0.2)',\n          yAxisID: 'y'\n        }, {\n          label: 'Nitrogen (N) (g)',\n          data: simulationResults.map(p => Number.isFinite(p.N) ? p.N : null),\n          borderColor: 'lightblue',\n          backgroundColor: 'rgba(173, 216, 230, 0.2)',\n          yAxisID: 'y' // Use the same axis for nutrients\n        }];\n        break;\n      case 'environment':\n        datasets = [{\n          label: 'Temperature (°C)',\n          data: simulationResults.map(p => Number.isFinite(p.Temp) ? p.Temp : null),\n          borderColor: 'red',\n          backgroundColor: 'rgba(255, 0, 0, 0.2)',\n          yAxisID: 'yTemp' // Use a separate axis for temperature\n        }, {\n          label: 'CO2 (ppm)',\n          // Assuming ppm, adjust if needed\n          data: simulationResults.map(p => Number.isFinite(p.CO2) ? p.CO2 : null),\n          borderColor: 'grey',\n          backgroundColor: 'rgba(128, 128, 128, 0.2)',\n          yAxisID: 'yCO2' // Use another axis for CO2\n        }];\n        break;\n      default:\n        datasets = [];\n    }\n\n    // Filter out datasets with no actual data points\n    datasets = datasets.filter(ds => ds.data.some(p => p !== null));\n    return {\n      // Use {x,y} format for linear x-axis\n      datasets: datasets.map(ds => ({\n        ...ds,\n        data: simulationResults.map(p => ({\n          x: p.time,\n          // Access the correct property based on label or another identifier\n          y: Number.isFinite(p[ds.label.split(' ')[0]]) ? p[ds.label.split(' ')[0]] : null\n        })),\n        tension: 0.1,\n        pointRadius: 2,\n        pointHoverRadius: 5,\n        spanGaps: true\n      }))\n    };\n  };\n\n  // --- Chart Options Preparation ---\n  const getChartOptions = () => {\n    const options = {\n      responsive: true,\n      maintainAspectRatio: false,\n      plugins: {\n        legend: {\n          display: true,\n          labels: {\n            color: '#FFF'\n          }\n        },\n        // Show legend for multi-line charts\n        tooltip: {\n          enabled: true\n        },\n        title: {\n          display: true,\n          text: `Simulation Results: ${activeTab.charAt(0).toUpperCase() + activeTab.slice(1)}`,\n          color: '#FFF',\n          font: {\n            size: 18\n          }\n        }\n      },\n      scales: {\n        x: {\n          type: 'linear',\n          title: {\n            display: true,\n            text: 'Time (Days)',\n            color: '#FFF'\n          },\n          ticks: {\n            stepSize: 5,\n            color: '#FFF'\n          },\n          grid: {\n            color: 'rgba(255, 255, 255, 0.2)'\n          },\n          min: 0\n        },\n        y: {\n          // Primary Y-axis (Yield, Nutrients)\n          type: 'linear',\n          title: {\n            display: true,\n            text: 'Amount (g)',\n            color: '#FFF'\n          },\n          ticks: {\n            stepSize: 10,\n            color: '#FFF'\n          },\n          // Default step, adjust if needed per tab\n          grid: {\n            color: 'rgba(255, 255, 255, 0.2)'\n          },\n          beginAtZero: true,\n          display: activeTab === 'yield' || activeTab === 'nutrients',\n          // Show only when relevant\n          position: 'left'\n        }\n      }\n    };\n\n    // Add specific axes for environment tab\n    if (activeTab === 'environment') {\n      options.scales.yTemp = {\n        type: 'linear',\n        position: 'left',\n        // Keep on left or move to 'right'\n        title: {\n          display: true,\n          text: 'Temperature (°C)',\n          color: 'red'\n        },\n        ticks: {\n          color: 'red',\n          stepSize: 2\n        },\n        // Example step size\n        grid: {\n          drawOnChartArea: false\n        },\n        // Avoid overlapping grids\n        beginAtZero: false // Temp doesn't have to start at 0\n      };\n      options.scales.yCO2 = {\n        type: 'linear',\n        position: 'right',\n        // Put CO2 axis on the right\n        title: {\n          display: true,\n          text: 'CO2 (ppm)',\n          color: 'grey'\n        },\n        ticks: {\n          color: 'grey',\n          stepSize: 500\n        },\n        // Example step size\n        grid: {\n          drawOnChartArea: false\n        },\n        // Avoid overlapping grids\n        beginAtZero: true\n      };\n      // Hide the primary 'y' axis if it's not used by environment datasets\n      options.scales.y.display = false;\n    }\n\n    // Adjust y-axis step size for yield tab if desired\n    if (activeTab === 'yield') {\n      options.scales.y.ticks.stepSize = 10;\n    }\n    // Adjust y-axis step size for nutrients tab if desired\n    if (activeTab === 'nutrients') {\n      options.scales.y.ticks.stepSize = 20; // Example adjustment\n    }\n    return options;\n  };\n\n  // Map substrate keys to display names\n  const substrateDisplayNames = {\n    riceBran: 'Rice Bran',\n    corn: 'Corn Cob',\n    sugarcane: 'Sugarcane',\n    sawdust: 'Sawdust'\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"growth-report\",\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"report-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"back-button\",\n        onClick: handleBackClick,\n        children: \"\\u2190 Back\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 222,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Growth Report\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 223,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"home-button\",\n        onClick: handleHomeClick,\n        children: \"Home\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 224,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 221,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n      className: \"report-content\",\n      children: [error && /*#__PURE__*/_jsxDEV(\"p\", {\n        style: {\n          color: 'red',\n          textAlign: 'center'\n        },\n        children: [\"Error: \", error]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 228,\n        columnNumber: 27\n      }, this), !error && simulationResults && /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"report-tabs\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => setActiveTab('yield'),\n            className: activeTab === 'yield' ? 'active' : '',\n            children: \"Yield\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 234,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => setActiveTab('nutrients'),\n            className: activeTab === 'nutrients' ? 'active' : '',\n            children: \"Nutrients\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 235,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => setActiveTab('environment'),\n            className: activeTab === 'environment' ? 'active' : '',\n            children: \"Environment\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 236,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 233,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"yield-chart\",\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            style: {\n              color: 'orange',\n              fontStyle: 'italic',\n              textAlign: 'center',\n              marginBottom: '15px',\n              fontSize: '0.9em'\n            },\n            children: \"Warning: Simulation logic is based on a scaffold. Ensure all equations are fully implemented in GrowthSimulation.jsx for accurate results.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 242,\n            columnNumber: 30\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"chart-container\",\n            style: {\n              position: 'relative',\n              height: '45vh',\n              width: '100%'\n            },\n            children: /*#__PURE__*/_jsxDEV(Line, {\n              options: getChartOptions(),\n              data: getChartData()\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 246,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 245,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 240,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true), !error && !simulationResults && /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Loading simulation results...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 251,\n        columnNumber: 51\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chosen-conditions\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Initial Conditions & Final Yield:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 256,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n          children: /*#__PURE__*/_jsxDEV(\"tbody\", {\n            children: [/*#__PURE__*/_jsxDEV(\"tr\", {\n              children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                children: \"Temperature\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 259,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: [initialConditions.temperature, \"\\xB0C\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 259,\n                columnNumber: 53\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 259,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                children: \"pH\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 260,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: initialConditions.ph\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 260,\n                columnNumber: 44\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 260,\n              columnNumber: 29\n            }, this), Object.entries(initialConditions.substrate).map(([key, value]) => /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                children: substrateDisplayNames[key] || key\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 263,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: [value, \"g\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 264,\n                columnNumber: 37\n              }, this)]\n            }, key, true, {\n              fileName: _jsxFileName,\n              lineNumber: 262,\n              columnNumber: 33\n            }, this)), /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                children: \"Initial Dry Weight\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 267,\n                columnNumber: 34\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: [initialConditions.initialWeight.toFixed(2), \"g\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 267,\n                columnNumber: 61\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 267,\n              columnNumber: 30\n            }, this), /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                children: \"Simulated Days\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 268,\n                columnNumber: 34\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: initialConditions.days\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 268,\n                columnNumber: 57\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 268,\n              columnNumber: 30\n            }, this), /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                children: \"Final Simulated Yield\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 269,\n                columnNumber: 34\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: Number.isFinite(finalSimulatedYield) ? `${finalSimulatedYield.toFixed(2)}g` : 'N/A'\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 269,\n                columnNumber: 64\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 269,\n              columnNumber: 30\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 258,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 257,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 255,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 226,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 220,\n    columnNumber: 9\n  }, this);\n};\n_s(GrowthReport, \"Qr+f4X1nGii0mhVXZicaL8KjKPI=\", false, function () {\n  return [useNavigate];\n});\n_c = GrowthReport;\nexport default GrowthReport;\nvar _c;\n$RefreshReg$(_c, \"GrowthReport\");","map":{"version":3,"names":["React","useEffect","useState","useNavigate","Line","Chart","ChartJS","LineElement","PointElement","Tooltip","Legend","CategoryScale","LinearScale","Title","jsxDEV","_jsxDEV","Fragment","_Fragment","register","GrowthReport","_s","navigate","simulationResults","setSimulationResults","initialConditions","setInitialConditions","substrate","temperature","ph","days","initialWeight","finalSimulatedYield","setFinalSimulatedYield","activeTab","setActiveTab","error","setError","savedResults","localStorage","getItem","results","JSON","parse","length","_results","lastYield","MushroomYield","Number","isFinite","e","console","savedSubstrate","savedTemperature","savedPh","savedDays","Object","values","reduce","sum","val","parseFloat","parseInt","handleBackClick","handleHomeClick","getChartData","labels","datasets","map","p","time","toFixed","label","data","borderColor","backgroundColor","yAxisID","ComplexC","SimpleC","N","Temp","CO2","filter","ds","some","x","y","split","tension","pointRadius","pointHoverRadius","spanGaps","getChartOptions","options","responsive","maintainAspectRatio","plugins","legend","display","color","tooltip","enabled","title","text","charAt","toUpperCase","slice","font","size","scales","type","ticks","stepSize","grid","min","beginAtZero","position","yTemp","drawOnChartArea","yCO2","substrateDisplayNames","riceBran","corn","sugarcane","sawdust","className","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","style","textAlign","fontStyle","marginBottom","fontSize","height","width","entries","key","value","_c","$RefreshReg$"],"sources":["C:/Users/celst/sds/src/components/GrowthHistory.jsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport '../styles/GrowthReport.css'; // Make sure styles exist for tabs etc.\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { Line } from 'react-chartjs-2';\r\nimport { Chart as ChartJS, LineElement, PointElement, Tooltip, Legend, CategoryScale, LinearScale, Title } from 'chart.js';\r\n\r\n// Register required components for Chart.js\r\nChartJS.register(LineElement, PointElement, Tooltip, Legend, CategoryScale, LinearScale, Title);\r\n\r\nconst GrowthReport = () => {\r\n    const navigate = useNavigate();\r\n    const [simulationResults, setSimulationResults] = useState(null);\r\n    const [initialConditions, setInitialConditions] = useState({ // State for initial conditions display\r\n        substrate: {}, temperature: 0, ph: 0, days: 0, initialWeight: 0\r\n    });\r\n    const [finalSimulatedYield, setFinalSimulatedYield] = useState(null);\r\n    const [activeTab, setActiveTab] = useState('yield'); // 'yield', 'nutrients', 'environment'\r\n    const [error, setError] = useState(null);\r\n\r\n    useEffect(() => {\r\n        setError(null);\r\n        // Load simulation results\r\n        const savedResults = localStorage.getItem('simulationResults');\r\n        if (savedResults) {\r\n            try {\r\n                const results = JSON.parse(savedResults);\r\n                setSimulationResults(results);\r\n                // Extract final yield\r\n                if (results && results.length > 0) {\r\n                    const lastYield = results[results.length - 1]?.MushroomYield;\r\n                    if (Number.isFinite(lastYield)) {\r\n                        setFinalSimulatedYield(lastYield);\r\n                    }\r\n                }\r\n            } catch (e) {\r\n                console.error(\"Failed to parse simulation results\", e);\r\n                setError(\"Could not load simulation results.\");\r\n            }\r\n        } else {\r\n             setError(\"Simulation results not found. Please run a simulation first.\");\r\n        }\r\n\r\n        // Load initial conditions for display table (optional but good context)\r\n        try {\r\n            const savedSubstrate = JSON.parse(localStorage.getItem('substrate') || '{}');\r\n            const savedTemperature = localStorage.getItem('temperature');\r\n            const savedPh = localStorage.getItem('ph');\r\n            const savedDays = localStorage.getItem('simulationDays'); // Get the duration used\r\n            const initialWeight = Object.values(savedSubstrate).reduce((sum, val) => sum + (Number(val) || 0), 0);\r\n\r\n            setInitialConditions({\r\n                substrate: savedSubstrate,\r\n                temperature: parseFloat(savedTemperature) || 0,\r\n                ph: parseFloat(savedPh) || 0,\r\n                days: parseInt(savedDays, 10) || 0,\r\n                initialWeight: initialWeight\r\n            });\r\n        } catch (e) {\r\n             console.error(\"Failed to load initial conditions for display\", e);\r\n             // Non-critical error, maybe just log it\r\n        }\r\n\r\n    }, []); // Run only on mount\r\n\r\n    const handleBackClick = () => {\r\n        // Navigate back to where the simulation was run\r\n        navigate('/growth-simulation');\r\n    };\r\n\r\n    const handleHomeClick = () => {\r\n        navigate('/'); // Navigate to the Landing Page\r\n    };\r\n\r\n    // --- Chart Data Preparation ---\r\n    const getChartData = () => {\r\n        if (!simulationResults || simulationResults.length === 0) {\r\n            return { labels: [], datasets: [] };\r\n        }\r\n\r\n        const labels = simulationResults.map(p => p.time.toFixed(1));\r\n        let datasets = [];\r\n\r\n        switch (activeTab) {\r\n            case 'yield':\r\n                datasets = [{\r\n                    label: 'Mushroom Yield (g)',\r\n                    data: simulationResults.map(p => Number.isFinite(p.MushroomYield) ? p.MushroomYield : null),\r\n                    borderColor: 'lightgreen', backgroundColor: 'rgba(144, 238, 144, 0.2)',\r\n                    yAxisID: 'y', // Assign to the primary y-axis\r\n                }];\r\n                break;\r\n            case 'nutrients':\r\n                datasets = [\r\n                    {\r\n                        label: 'Complex C (g)',\r\n                        data: simulationResults.map(p => Number.isFinite(p.ComplexC) ? p.ComplexC : null),\r\n                        borderColor: 'brown', backgroundColor: 'rgba(165, 42, 42, 0.2)',\r\n                        yAxisID: 'y',\r\n                    },\r\n                    {\r\n                        label: 'Simple C (g)',\r\n                        data: simulationResults.map(p => Number.isFinite(p.SimpleC) ? p.SimpleC : null),\r\n                        borderColor: 'orange', backgroundColor: 'rgba(255, 165, 0, 0.2)',\r\n                         yAxisID: 'y',\r\n                    },\r\n                    {\r\n                        label: 'Nitrogen (N) (g)',\r\n                        data: simulationResults.map(p => Number.isFinite(p.N) ? p.N : null),\r\n                        borderColor: 'lightblue', backgroundColor: 'rgba(173, 216, 230, 0.2)',\r\n                        yAxisID: 'y', // Use the same axis for nutrients\r\n                    }\r\n                ];\r\n                break;\r\n            case 'environment':\r\n                 datasets = [\r\n                    {\r\n                        label: 'Temperature (°C)',\r\n                        data: simulationResults.map(p => Number.isFinite(p.Temp) ? p.Temp : null),\r\n                        borderColor: 'red', backgroundColor: 'rgba(255, 0, 0, 0.2)',\r\n                        yAxisID: 'yTemp', // Use a separate axis for temperature\r\n                    },\r\n                    {\r\n                        label: 'CO2 (ppm)', // Assuming ppm, adjust if needed\r\n                        data: simulationResults.map(p => Number.isFinite(p.CO2) ? p.CO2 : null),\r\n                        borderColor: 'grey', backgroundColor: 'rgba(128, 128, 128, 0.2)',\r\n                        yAxisID: 'yCO2', // Use another axis for CO2\r\n                    }\r\n                ];\r\n                break;\r\n            default:\r\n                datasets = [];\r\n        }\r\n\r\n        // Filter out datasets with no actual data points\r\n        datasets = datasets.filter(ds => ds.data.some(p => p !== null));\r\n\r\n        return {\r\n            // Use {x,y} format for linear x-axis\r\n             datasets: datasets.map(ds => ({\r\n                ...ds,\r\n                data: simulationResults.map(p => ({\r\n                    x: p.time,\r\n                    // Access the correct property based on label or another identifier\r\n                    y: Number.isFinite(p[ds.label.split(' ')[0]]) ? p[ds.label.split(' ')[0]] : null\r\n                })),\r\n                tension: 0.1, pointRadius: 2, pointHoverRadius: 5, spanGaps: true,\r\n             }))\r\n        };\r\n    };\r\n\r\n\r\n    // --- Chart Options Preparation ---\r\n     const getChartOptions = () => {\r\n        const options = {\r\n            responsive: true, maintainAspectRatio: false,\r\n            plugins: {\r\n                legend: { display: true, labels: { color: '#FFF' } }, // Show legend for multi-line charts\r\n                tooltip: { enabled: true },\r\n                title: { display: true, text: `Simulation Results: ${activeTab.charAt(0).toUpperCase() + activeTab.slice(1)}`, color: '#FFF', font: { size: 18 } }\r\n            },\r\n            scales: {\r\n                x: {\r\n                    type: 'linear',\r\n                    title: { display: true, text: 'Time (Days)', color: '#FFF' },\r\n                    ticks: { stepSize: 5, color: '#FFF' },\r\n                    grid: { color: 'rgba(255, 255, 255, 0.2)' },\r\n                    min: 0,\r\n                },\r\n                y: { // Primary Y-axis (Yield, Nutrients)\r\n                    type: 'linear',\r\n                    title: { display: true, text: 'Amount (g)', color: '#FFF' },\r\n                    ticks: { stepSize: 10, color: '#FFF' }, // Default step, adjust if needed per tab\r\n                    grid: { color: 'rgba(255, 255, 255, 0.2)' },\r\n                    beginAtZero: true,\r\n                    display: activeTab === 'yield' || activeTab === 'nutrients', // Show only when relevant\r\n                    position: 'left',\r\n                },\r\n            }\r\n        };\r\n\r\n        // Add specific axes for environment tab\r\n        if (activeTab === 'environment') {\r\n            options.scales.yTemp = {\r\n                type: 'linear',\r\n                position: 'left', // Keep on left or move to 'right'\r\n                title: { display: true, text: 'Temperature (°C)', color: 'red' },\r\n                ticks: { color: 'red', stepSize: 2 }, // Example step size\r\n                grid: { drawOnChartArea: false }, // Avoid overlapping grids\r\n                 beginAtZero: false, // Temp doesn't have to start at 0\r\n            };\r\n            options.scales.yCO2 = {\r\n                type: 'linear',\r\n                position: 'right', // Put CO2 axis on the right\r\n                title: { display: true, text: 'CO2 (ppm)', color: 'grey' },\r\n                ticks: { color: 'grey', stepSize: 500 }, // Example step size\r\n                grid: { drawOnChartArea: false }, // Avoid overlapping grids\r\n                 beginAtZero: true,\r\n            };\r\n            // Hide the primary 'y' axis if it's not used by environment datasets\r\n             options.scales.y.display = false;\r\n        }\r\n\r\n        // Adjust y-axis step size for yield tab if desired\r\n        if (activeTab === 'yield') {\r\n             options.scales.y.ticks.stepSize = 10;\r\n        }\r\n         // Adjust y-axis step size for nutrients tab if desired\r\n        if (activeTab === 'nutrients') {\r\n             options.scales.y.ticks.stepSize = 20; // Example adjustment\r\n        }\r\n\r\n\r\n        return options;\r\n    };\r\n\r\n    // Map substrate keys to display names\r\n    const substrateDisplayNames = { riceBran: 'Rice Bran', corn: 'Corn Cob', sugarcane: 'Sugarcane', sawdust: 'Sawdust' };\r\n\r\n    return (\r\n        <div className=\"growth-report\">\r\n            <header className=\"report-header\">\r\n                <button className=\"back-button\" onClick={handleBackClick}>← Back</button>\r\n                <h1>Growth Report</h1>\r\n                <button className=\"home-button\" onClick={handleHomeClick}>Home</button>\r\n            </header>\r\n            <main className=\"report-content\">\r\n\r\n                {error && <p style={{ color: 'red', textAlign: 'center' }}>Error: {error}</p>}\r\n\r\n                {!error && simulationResults && (\r\n                    <>\r\n                        {/* Tabs */}\r\n                        <div className=\"report-tabs\">\r\n                            <button onClick={() => setActiveTab('yield')} className={activeTab === 'yield' ? 'active' : ''}>Yield</button>\r\n                            <button onClick={() => setActiveTab('nutrients')} className={activeTab === 'nutrients' ? 'active' : ''}>Nutrients</button>\r\n                            <button onClick={() => setActiveTab('environment')} className={activeTab === 'environment' ? 'active' : ''}>Environment</button>\r\n                        </div>\r\n\r\n                        {/* Chart Area */}\r\n                        <div className=\"yield-chart\">\r\n                             {/* Warning about incomplete logic */}\r\n                             <p style={{ color: 'orange', fontStyle: 'italic', textAlign: 'center', marginBottom: '15px', fontSize: '0.9em' }}>\r\n                                Warning: Simulation logic is based on a scaffold. Ensure all equations are fully implemented in GrowthSimulation.jsx for accurate results.\r\n                            </p>\r\n                            <div className=\"chart-container\" style={{ position: 'relative', height: '45vh', width: '100%' }}>\r\n                                <Line options={getChartOptions()} data={getChartData()} />\r\n                            </div>\r\n                        </div>\r\n                    </>\r\n                )}\r\n                 {!error && !simulationResults && <p>Loading simulation results...</p>}\r\n\r\n\r\n                {/* Conditions Table */}\r\n                <div className=\"chosen-conditions\">\r\n                    <h3>Initial Conditions & Final Yield:</h3>\r\n                    <table>\r\n                        <tbody>\r\n                            <tr><td>Temperature</td><td>{initialConditions.temperature}°C</td></tr>\r\n                            <tr><td>pH</td><td>{initialConditions.ph}</td></tr>\r\n                            {Object.entries(initialConditions.substrate).map(([key, value]) => (\r\n                                <tr key={key}>\r\n                                    <td>{substrateDisplayNames[key] || key}</td>\r\n                                    <td>{value}g</td>\r\n                                </tr>\r\n                            ))}\r\n                             <tr><td>Initial Dry Weight</td><td>{initialConditions.initialWeight.toFixed(2)}g</td></tr>\r\n                             <tr><td>Simulated Days</td><td>{initialConditions.days}</td></tr>\r\n                             <tr><td>Final Simulated Yield</td><td>{Number.isFinite(finalSimulatedYield) ? `${finalSimulatedYield.toFixed(2)}g` : 'N/A'}</td></tr>\r\n                        </tbody>\r\n                    </table>\r\n                </div>\r\n            </main>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default GrowthReport;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}