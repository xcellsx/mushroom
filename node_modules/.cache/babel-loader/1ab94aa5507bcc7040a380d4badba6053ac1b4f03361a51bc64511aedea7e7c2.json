{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\celst\\\\sds\\\\src\\\\components\\\\GrowthSimulation.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\n// No longer need to import InsightMakerEmbed\n// import InsightMakerEmbed from './InsightMakerEmbed';\nimport '../styles/GrowthSimulation.css'; // Make sure you have some basic CSS\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GrowthSimulation = () => {\n  _s();\n  const navigate = useNavigate();\n  // We still load the conditions to display them, but likely CANNOT pass them to the iframe\n  const [displayConditions, setDisplayConditions] = useState({\n    substrate: {},\n    temperature: 0,\n    ph: 0,\n    yieldValue: 0,\n    days: 40\n  });\n  useEffect(() => {\n    // Load parameters from localStorage for display purposes\n    const savedTemperature = localStorage.getItem('temperature');\n    const savedPh = localStorage.getItem('ph');\n    const savedSubstrateJson = localStorage.getItem('substrate');\n    const savedYield = localStorage.getItem('yield');\n    if (savedTemperature && savedPh && savedSubstrateJson) {\n      try {\n        const substrateData = JSON.parse(savedSubstrateJson);\n        const temp = parseFloat(savedTemperature);\n        const phValue = parseFloat(savedPh);\n        const yieldVal = parseFloat(savedYield) || 0;\n\n        // Store values primarily for display on this page\n        setDisplayConditions({\n          substrate: substrateData,\n          temperature: temp,\n          ph: phValue,\n          yieldValue: yieldVal,\n          days: 40 // Or adjust as needed\n        });\n        console.log(\"GrowthSimulation: Loaded display conditions from localStorage.\");\n      } catch (error) {\n        console.error(\"GrowthSimulation: Error processing data from localStorage:\", error);\n        alert(\"Error loading simulation settings.\");\n        navigate('/condition-setting');\n      }\n    } else {\n      console.error(\"GrowthSimulation: Required parameters not found in localStorage.\");\n      // Navigate back if data is missing, as the simulation won't use it anyway\n      alert(\"Simulation parameters not set. Please configure them first.\");\n      navigate('/condition-setting');\n    }\n  }, [navigate]);\n  const handleBackClick = () => {\n    navigate('/condition-setting');\n  };\n\n  // This function saves data based on the INITIAL conditions from localStorage.\n  // It does NOT reflect the results of the simulation embedded via iframe.\n  const handleViewReportClick = () => {\n    const formatDate = date => {\n      const day = String(date.getDate()).padStart(2, '0');\n      const month = String(date.getMonth() + 1).padStart(2, '0');\n      const year = date.getFullYear();\n      return `${day}/${month}/${year}`;\n    };\n    const newEntry = {\n      days: displayConditions.days,\n      yield: `${displayConditions.yieldValue}g`,\n      // Yield from ConditionSetting page\n      substrate: Object.entries(displayConditions.substrate).map(([key, value]) => {\n        const displayNames = {\n          riceBran: 'Rice Bran',\n          corn: 'Corn Cob',\n          sugarcane: 'Sugarcane',\n          sawdust: 'Sawdust'\n        };\n        return `${displayNames[key] || key}: ${value}g`;\n      }).join(', '),\n      conditions: `Temperature: ${displayConditions.temperature}Â°C, pH: ${displayConditions.ph}`,\n      date: formatDate(new Date())\n    };\n    try {\n      const existingHistory = JSON.parse(localStorage.getItem('growthHistory')) || [];\n      localStorage.setItem('growthHistory', JSON.stringify([...existingHistory, newEntry]));\n      navigate('/'); // Navigate to the Growth Report page\n    } catch (error) {\n      console.error(\"Error saving growth history:\", error);\n      alert(\"Could not save growth history.\");\n    }\n  };\n\n  // Map substrate keys to display names\n  const substrateDisplayNames = {\n    riceBran: 'Rice Bran',\n    corn: 'Corn Cob',\n    sugarcane: 'Sugarcane',\n    sawdust: 'Sawdust'\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"growth-simulation\",\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"simulation-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"back-button\",\n        onClick: handleBackClick,\n        children: \"\\u2190 Back to Settings\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Mushroom Growth Simulation\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n      className: \"simulation-content\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"simulation-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"iframe\", {\n          src: \"https://insightmaker.com/insight/1JN05JByWKiPAmj9it5RIl/embed?topBar=1&sideBar=1&zoom=1\",\n          title: \"Embedded model\",\n          width: \"800\",\n          height: \"600\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          style: {\n            fontSize: '0.8em',\n            color: '#aaa',\n            marginTop: '10px'\n          },\n          children: \"Note: This simulation runs with default parameters set in InsightMaker, not necessarily the conditions chosen on the previous screen.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chosen-conditions\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Conditions Chosen (for reference):\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 127,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n          children: [Object.entries(displayConditions.substrate).map(([key, value]) => /*#__PURE__*/_jsxDEV(\"li\", {\n            children: [substrateDisplayNames[key] || key, \": \", value, \"g\"]\n          }, key, true, {\n            fileName: _jsxFileName,\n            lineNumber: 130,\n            columnNumber: 15\n          }, this)), /*#__PURE__*/_jsxDEV(\"li\", {\n            children: [\"Temperature: \", displayConditions.temperature, \"\\xB0C\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 134,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n            children: [\"pH: \", displayConditions.ph]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 135,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n            children: [\"Target Yield: \", displayConditions.yieldValue, \"g\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 136,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n            children: [\"Simulation Duration: \", displayConditions.days, \" days\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 137,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 128,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"view-report-button\",\n        onClick: handleViewReportClick,\n        children: \"Done\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 101,\n    columnNumber: 5\n  }, this);\n};\n_s(GrowthSimulation, \"TqEtc8DO6Dyoo6mcZ7VTfFtThq0=\", false, function () {\n  return [useNavigate];\n});\n_c = GrowthSimulation;\nexport default GrowthSimulation;\nvar _c;\n$RefreshReg$(_c, \"GrowthSimulation\");","map":{"version":3,"names":["React","useState","useEffect","useNavigate","jsxDEV","_jsxDEV","GrowthSimulation","_s","navigate","displayConditions","setDisplayConditions","substrate","temperature","ph","yieldValue","days","savedTemperature","localStorage","getItem","savedPh","savedSubstrateJson","savedYield","substrateData","JSON","parse","temp","parseFloat","phValue","yieldVal","console","log","error","alert","handleBackClick","handleViewReportClick","formatDate","date","day","String","getDate","padStart","month","getMonth","year","getFullYear","newEntry","yield","Object","entries","map","key","value","displayNames","riceBran","corn","sugarcane","sawdust","join","conditions","Date","existingHistory","setItem","stringify","substrateDisplayNames","className","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","src","title","width","height","style","fontSize","color","marginTop","_c","$RefreshReg$"],"sources":["C:/Users/celst/sds/src/components/GrowthSimulation.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\n// No longer need to import InsightMakerEmbed\r\n// import InsightMakerEmbed from './InsightMakerEmbed';\r\nimport '../styles/GrowthSimulation.css'; // Make sure you have some basic CSS\r\n\r\nconst GrowthSimulation = () => {\r\n  const navigate = useNavigate();\r\n  // We still load the conditions to display them, but likely CANNOT pass them to the iframe\r\n  const [displayConditions, setDisplayConditions] = useState({\r\n      substrate: {},\r\n      temperature: 0,\r\n      ph: 0,\r\n      yieldValue: 0,\r\n      days: 40\r\n  });\r\n\r\n  useEffect(() => {\r\n    // Load parameters from localStorage for display purposes\r\n    const savedTemperature = localStorage.getItem('temperature');\r\n    const savedPh = localStorage.getItem('ph');\r\n    const savedSubstrateJson = localStorage.getItem('substrate');\r\n    const savedYield = localStorage.getItem('yield');\r\n\r\n    if (savedTemperature && savedPh && savedSubstrateJson) {\r\n      try {\r\n        const substrateData = JSON.parse(savedSubstrateJson);\r\n        const temp = parseFloat(savedTemperature);\r\n        const phValue = parseFloat(savedPh);\r\n        const yieldVal = parseFloat(savedYield) || 0;\r\n\r\n        // Store values primarily for display on this page\r\n        setDisplayConditions({\r\n            substrate: substrateData,\r\n            temperature: temp,\r\n            ph: phValue,\r\n            yieldValue: yieldVal,\r\n            days: 40 // Or adjust as needed\r\n        });\r\n        console.log(\"GrowthSimulation: Loaded display conditions from localStorage.\");\r\n\r\n      } catch (error) {\r\n        console.error(\"GrowthSimulation: Error processing data from localStorage:\", error);\r\n        alert(\"Error loading simulation settings.\");\r\n        navigate('/condition-setting');\r\n      }\r\n    } else {\r\n      console.error(\"GrowthSimulation: Required parameters not found in localStorage.\");\r\n      // Navigate back if data is missing, as the simulation won't use it anyway\r\n      alert(\"Simulation parameters not set. Please configure them first.\");\r\n      navigate('/condition-setting');\r\n    }\r\n  }, [navigate]);\r\n\r\n  const handleBackClick = () => {\r\n    navigate('/condition-setting');\r\n  };\r\n\r\n  // This function saves data based on the INITIAL conditions from localStorage.\r\n  // It does NOT reflect the results of the simulation embedded via iframe.\r\n  const handleViewReportClick = () => {\r\n    const formatDate = (date) => {\r\n      const day = String(date.getDate()).padStart(2, '0');\r\n      const month = String(date.getMonth() + 1).padStart(2, '0');\r\n      const year = date.getFullYear();\r\n      return `${day}/${month}/${year}`;\r\n    };\r\n\r\n    const newEntry = {\r\n      days: displayConditions.days,\r\n      yield: `${displayConditions.yieldValue}g`, // Yield from ConditionSetting page\r\n      substrate: Object.entries(displayConditions.substrate)\r\n        .map(([key, value]) => {\r\n             const displayNames = { riceBran: 'Rice Bran', corn: 'Corn Cob', sugarcane: 'Sugarcane', sawdust: 'Sawdust' };\r\n             return `${displayNames[key] || key}: ${value}g`;\r\n        })\r\n        .join(', '),\r\n      conditions: `Temperature: ${displayConditions.temperature}Â°C, pH: ${displayConditions.ph}`,\r\n      date: formatDate(new Date()),\r\n    };\r\n\r\n    try {\r\n        const existingHistory = JSON.parse(localStorage.getItem('growthHistory')) || [];\r\n        localStorage.setItem('growthHistory', JSON.stringify([...existingHistory, newEntry]));\r\n        navigate('/'); // Navigate to the Growth Report page\r\n    } catch (error) {\r\n        console.error(\"Error saving growth history:\", error);\r\n        alert(\"Could not save growth history.\");\r\n    }\r\n  };\r\n\r\n  // Map substrate keys to display names\r\n  const substrateDisplayNames = {\r\n    riceBran: 'Rice Bran',\r\n    corn: 'Corn Cob',\r\n    sugarcane: 'Sugarcane',\r\n    sawdust: 'Sawdust',\r\n  };\r\n\r\n  return (\r\n    <div className=\"growth-simulation\">\r\n      <header className=\"simulation-header\">\r\n        <button className=\"back-button\" onClick={handleBackClick}>\r\n          â Back to Settings\r\n        </button>\r\n        <h1>Mushroom Growth Simulation</h1>\r\n      </header>\r\n      <main className=\"simulation-content\">\r\n        {/* InsightMaker Simulation Embed */}\r\n        <div className=\"simulation-container\">\r\n          {/*\r\n             PASTE THE IFRAME SNIPPET FROM INSIGHTMAKER'S \"EMBED IN WEBPAGE\" HERE.\r\n             Make sure to adjust attributes like width and height as needed.\r\n             Example structure (replace with your actual snippet):\r\n          */}\r\n          <iframe src=\"https://insightmaker.com/insight/1JN05JByWKiPAmj9it5RIl/embed?topBar=1&sideBar=1&zoom=1\" title=\"Embedded model\" width=\"800\" height=\"600\"></iframe>\r\n          {/* End of pasted iframe snippet */}\r\n\r\n          <p style={{ fontSize: '0.8em', color: '#aaa', marginTop: '10px' }}>\r\n            Note: This simulation runs with default parameters set in InsightMaker,\r\n            not necessarily the conditions chosen on the previous screen.\r\n          </p>\r\n        </div>\r\n\r\n        {/* Display Chosen Conditions (from previous screen) */}\r\n        <div className=\"chosen-conditions\">\r\n          <h3>Conditions Chosen (for reference):</h3>\r\n          <ul>\r\n            {Object.entries(displayConditions.substrate).map(([key, value]) => (\r\n              <li key={key}>\r\n                {substrateDisplayNames[key] || key}: {value}g\r\n              </li>\r\n            ))}\r\n            <li>Temperature: {displayConditions.temperature}Â°C</li>\r\n            <li>pH: {displayConditions.ph}</li>\r\n            <li>Target Yield: {displayConditions.yieldValue}g</li>\r\n            <li>Simulation Duration: {displayConditions.days} days</li>\r\n          </ul>\r\n        </div>\r\n\r\n        {/* Done Button */}\r\n        <button className=\"view-report-button\" onClick={handleViewReportClick}>\r\n          Done\r\n        </button>\r\n      </main>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default GrowthSimulation;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}