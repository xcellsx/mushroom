{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\celst\\\\sds\\\\src\\\\components\\\\GrowthSimulation.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { Line } from 'react-chartjs-2';\nimport { Chart as ChartJS, LineElement, PointElement, Tooltip, Legend, CategoryScale, LinearScale, Title } from 'chart.js';\nimport odeRK4 from 'ode-rk4'; // Import the RK4 library\nimport logoSrc from '../assets/images/cslogo.png'; // Ensure path is correct\n\n// Assuming Tailwind CSS is setup globally in your project (e.g., in index.css)\n\n// Register required components for Chart.js to work\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nChartJS.register(LineElement, PointElement, Tooltip, Legend, CategoryScale, LinearScale, Title);\n\n// --- Simulation Logic (Keep outside the React component for clarity) ---\n\n/**\r\n * Performs linear interpolation on a given dataset.\r\n * @param {Array<Array<number>>} data - The dataset (e.g., [[x1, y1], [x2, y2], ...]) sorted by x.\r\n * @param {number} x - The x-value to interpolate at.\r\n * @returns {number} The interpolated y-value.\r\n */\nfunction linearInterpolate(data, x) {\n  // Handle edge cases where data is empty or x is outside the range\n  if (!data || data.length === 0) return 0;\n  if (x <= data[0][0]) return data[0][1];\n  if (x >= data[data.length - 1][0]) return data[data.length - 1][1];\n\n  // Find the two points surrounding x\n  let i = 0;\n  while (i < data.length - 1 && x > data[i + 1][0]) i++;\n\n  // Get the coordinates of the surrounding points\n  const x0 = data[i][0],\n    y0 = data[i][1];\n  const x1 = data[i + 1][0],\n    y1 = data[i + 1][1];\n\n  // Calculate the interpolation factor 't'\n  const divisor = x1 - x0;\n  if (divisor === 0) return y0; // Avoid division by zero if x points are identical\n  const t = (x - x0) / divisor;\n\n  // Return the interpolated y-value\n  return y0 + t * (y1 - y0);\n}\n\n// Default Model Parameters (Constants)\nconst defaultParams = {\n  timeStart: 0,\n  timeLength: 100,\n  timeStep: 0.2,\n  'C BD Rate': 1.11,\n  'C Coeff': 0.7,\n  'C Cons. Rate': 76.39,\n  'CO2 Coeff': 0.8,\n  'CO2 Production Rate': 410000,\n  'CO2 Removal Rate': 12.6,\n  'External CO2': 428.23,\n  'External Temp': 24,\n  'Growth Coeff': 5.1,\n  'Initial C:N Ratio': 43.58,\n  'Initial Complex:Simple Ratio': 0.8054,\n  'Initial Dry Substrate Weight': 410.2,\n  'IsMush': 1,\n  'Mushroom Multiplier': 5.17,\n  'N Coeff': 68.4,\n  'N Rate': 13.03,\n  'pH': 6.91,\n  'pH Coeff': 1.4,\n  'Temp Coeff': 1.3,\n  'Temp Production Rate': 405,\n  'Temp Transfer Rate': 1.5,\n  // Effect data arrays (used with linearInterpolate)\n  'Effect of CO2 on Mush Growth Data': [[500, 0.9], [800, 1], [1000, 0.8], [1200, 0.25], [1400, 0]],\n  'Effect of CO2 on Myc Growth Data': [[15000, 1], [20000, 0.9], [25000, 0.25], [30000, 0]],\n  'Effect of pH on Mush Growth Data': [[5.5, 0], [6, 0.25], [6.7, 1], [7, 0.6], [7.5, 0]],\n  'Effect of pH on Myc Growth Data': [[5.8, 0], [6, 0.25], [6.7, 1], [7, 0.6], [7.5, 0]],\n  'Effect of Temp on Mush Growth Data': [[10, 0], [15, 5.37], [20, 6.36], [25, 8.63], [30, 6.37], [40, 0]],\n  'Effect of Temp on Myc Growth Data': [[10, 0], [15, 5.37], [20, 6.36], [25, 8.63], [30, 6.37], [35, 5.36], [45, 0]]\n};\n\n/**\r\n * Derivative function required by the RK4 solver. Calculates the rate of change for each state variable.\r\n * IMPORTANT: This function contains the core logic of your mushroom growth model.\r\n * Ensure all equations accurately reflect your model. The current version is a scaffold.\r\n * @param {Array<number>} dydt - Output array to store the calculated derivatives.\r\n * @param {Array<number>} y - Current state vector [CO2, ComplexC, MushroomYield, Mycelium, N, SimpleC, Space, Temp].\r\n * @param {number} t - Current time (often unused in autonomous systems but required by solver).\r\n * @param {object} currentParams - The parameters being used for this simulation run.\r\n */\nfunction derivatives(dydt, y, t, currentParams) {\n  // Destructure the current state vector for easier access\n  const [currentCO2, currentComplexC, currentMushroomYield, currentMycelium, currentN, currentSimpleC, currentSpace, currentTemp] = y;\n\n  // --- Calculate intermediate variables based on current state and parameters ---\n  // These calculations represent the core interactions in your model\n  const initialDrySubstrateWeight = currentParams['Initial Dry Substrate Weight'] || 1; // Avoid division by zero\n  const cnRatioPlusOne = currentParams['Initial C:N Ratio'] + 1 || 1; // Avoid division by zero\n  const InitC = initialDrySubstrateWeight - initialDrySubstrateWeight / cnRatioPlusOne; // Initial Carbon\n  const AvailableN = currentN / initialDrySubstrateWeight; // Normalized available Nitrogen\n  const AvailableC = currentSimpleC / initialDrySubstrateWeight; // Normalized available simple Carbon\n  const NEffect = currentParams['N Coeff'] * AvailableN; // Effect of Nitrogen availability\n  const CEffect = Math.sqrt(Math.max(0, currentParams['C Coeff'] * AvailableC)); // Effect of Carbon availability (ensure non-negative)\n  const VolumeNormalisation = Math.sqrt(100 / initialDrySubstrateWeight); // Normalization factor\n\n  // Calculate effects using interpolation based on current conditions\n  const Effect_of_CO2_on_Mush_Growth = linearInterpolate(currentParams['Effect of CO2 on Mush Growth Data'], currentCO2);\n  const Effect_of_CO2_on_Myc_Growth = linearInterpolate(currentParams['Effect of CO2 on Myc Growth Data'], currentCO2);\n  const Effect_of_pH_on_Mush_Growth = linearInterpolate(currentParams['Effect of pH on Mush Growth Data'], currentParams['pH']);\n  const Effect_of_pH_on_Myc_Growth = linearInterpolate(currentParams['Effect of pH on Myc Growth Data'], currentParams['pH']);\n  const Effect_of_Temp_on_Mush_Growth = linearInterpolate(currentParams['Effect of Temp on Mush Growth Data'], currentTemp);\n  const Effect_of_Temp_on_Myc_Growth = linearInterpolate(currentParams['Effect of Temp on Myc Growth Data'], currentTemp);\n\n  // Determine which effect curves to use based on whether it's mushrooming phase\n  const TempEff_ = currentParams['IsMush'] === 0 ? Effect_of_Temp_on_Myc_Growth : Effect_of_Temp_on_Mush_Growth;\n  const TempEffect = currentParams['Temp Coeff'] * TempEff_ / 10; // Scaled Temperature effect\n\n  const pHEff_ = currentParams['IsMush'] === 0 ? Effect_of_pH_on_Myc_Growth : Effect_of_pH_on_Mush_Growth;\n  const pHEffect = pHEff_ * currentParams['pH Coeff']; // Scaled pH effect\n\n  const CO2Eff_ = currentParams['IsMush'] === 0 ? Effect_of_CO2_on_Myc_Growth : Effect_of_CO2_on_Mush_Growth;\n  const CO2Effect = currentParams['CO2 Coeff'] * CO2Eff_; // Scaled CO2 effect\n\n  // Calculate the raw growth potential based on combined effects\n  const RawGrowthRate = TempEffect * pHEffect * NEffect * CEffect * CO2Effect;\n\n  // Calculate growth opportunity based on available space and existing mycelium\n  const GrowthOpp = currentSpace * currentMycelium;\n\n  // Determine actual growth rate (different logic for mycelial vs. mushroom phase)\n  let GrowthRate = currentParams['IsMush'] === 1 ? RawGrowthRate * currentParams['Growth Coeff'] // Mushroom phase growth\n  : RawGrowthRate * GrowthOpp * currentParams['Growth Coeff']; // Mycelial phase growth\n\n  // Normalize growth rate (different normalization for mushroom phase)\n  let NormGrowthRate = currentParams['IsMush'] === 1 ? GrowthRate / 100 : GrowthRate;\n\n  // --- Calculate Flows (Rates of Change for each state variable) ---\n  // *** THIS IS THE CRITICAL PART - ENSURE THESE EQUATIONS ARE CORRECT ***\n  // These represent how each state variable changes based on the calculated rates and effects.\n\n  const flow_Breakdown = currentMycelium * currentParams['C BD Rate'] * currentComplexC * RawGrowthRate * VolumeNormalisation; // Complex C breakdown\n  const flow_CCons = NormGrowthRate * currentParams['C Cons. Rate']; // Simple C consumption for growth\n  const flow_CO2Prod = NormGrowthRate * currentParams['CO2 Production Rate']; // CO2 production from respiration\n  const flow_CO2Vent = currentParams['CO2 Removal Rate'] * (currentCO2 - currentParams['External CO2']) * VolumeNormalisation; // CO2 ventilation/removal\n  const flow_Colonisation = currentParams['IsMush'] === 0 ? GrowthRate : 0; // Mycelium growth (colonisation)\n  const flow_MushroomGrowth = currentParams['IsMush'] === 1 ? GrowthRate * currentParams['Mushroom Multiplier'] : 0; // Mushroom biomass growth\n  const flow_NCons = NormGrowthRate * currentParams['N Rate']; // Nitrogen consumption for growth\n  const flow_TempProd = NormGrowthRate * currentParams['Temp Production Rate']; // Heat production from metabolism\n  const flow_TempVent = (currentTemp - currentParams['External Temp']) * currentParams['Temp Transfer Rate'] * VolumeNormalisation; // Heat transfer/ventilation\n\n  // --- Assign derivatives (rates of change) to the output array dydt ---\n  // Index corresponds to the state variable order: [CO2, ComplexC, MushroomYield, Mycelium, N, SimpleC, Space, Temp]\n  dydt[0] = flow_CO2Prod - flow_CO2Vent; // dCO2/dt\n  dydt[1] = -flow_Breakdown; // dComplexC/dt\n  dydt[2] = flow_MushroomGrowth; // dMushroomYield/dt\n  dydt[3] = flow_Colonisation; // dMycelium/dt\n  dydt[4] = -flow_NCons; // dN/dt\n  dydt[5] = flow_Breakdown - flow_CCons; // dSimpleC/dt\n  dydt[6] = -flow_Colonisation; // dSpace/dt (Space decreases as Mycelium grows)\n  dydt[7] = flow_TempProd - flow_TempVent; // dTemp/dt\n\n  // --- Apply constraints (prevent negative values where physically impossible) ---\n  if (currentCO2 <= 0 && dydt[0] < 0) dydt[0] = 0;\n  if (currentComplexC <= 0 && dydt[1] < 0) dydt[1] = 0;\n  if (currentN <= 0 && dydt[4] < 0) dydt[4] = 0;\n  if (currentSimpleC <= 0 && dydt[5] < 0) dydt[5] = 0;\n  if (currentTemp <= 0 && dydt[7] < 0) dydt[7] = 0; // Assuming Temp can't go below absolute zero or a practical minimum\n  // Add constraints for Mycelium and Space if needed (e.g., Mycelium + Space <= 1)\n}\n\n/**\r\n * Calculates the initial state vector based on input parameters.\r\n * @param {object} p - Input parameters object.\r\n * @returns {Array<number>} The initial state vector [CO2, ComplexC, MushroomYield, Mycelium, N, SimpleC, Space, Temp].\r\n */\nfunction getInitialState(p) {\n  const initialDrySubstrateWeight = Number(p['Initial Dry Substrate Weight']) || 1;\n  const cnRatio = Number(p['Initial C:N Ratio']) || defaultParams['Initial C:N Ratio']; // Use default if invalid\n  const cnRatioPlusOne = cnRatio + 1;\n  const complexSimpleRatio = Number(p['Initial Complex:Simple Ratio']) || defaultParams['Initial Complex:Simple Ratio']; // Use default if invalid\n\n  // Calculate initial Carbon and Nitrogen based on weight and C:N ratio\n  const Init_N = initialDrySubstrateWeight / cnRatioPlusOne;\n  const Init_C = initialDrySubstrateWeight - Init_N; // Total initial Carbon\n\n  // Calculate initial Complex and Simple Carbon based on the ratio\n  const Init_ComplexC = Init_C * complexSimpleRatio;\n  const Init_SimpleC = Init_C * (1 - complexSimpleRatio);\n\n  // Define the initial state vector - Order MUST match the 'derivatives' function and results mapping\n  // [ CO2, ComplexC, MushroomYield, Mycelium, N, SimpleC, Space, Temp ]\n  return [Number(p['External CO2']) || defaultParams['External CO2'],\n  // Initial CO2 (assumed equilibrium with external)\n  Init_ComplexC,\n  // Initial Complex Carbon\n  0,\n  // Initial Mushroom Yield (starts at 0)\n  0.02,\n  // Initial Mycelium (small inoculation amount, e.g., 2%)\n  Init_N,\n  // Initial Nitrogen\n  Init_SimpleC,\n  // Initial Simple Carbon\n  0.98,\n  // Initial Space (1 - Initial Mycelium)\n  Number(p['External Temp']) || defaultParams['External Temp'] // Initial Temp (assumed equilibrium with external)\n  ];\n}\n\n/**\r\n * Runs the simulation using the RK4 method.\r\n * @param {object} inputParams - Parameters overriding the defaults for this specific run.\r\n * @returns {Array<object>} An array of result objects, each containing { time, CO2, ComplexC, ..., Temp }.\r\n */\nfunction runSimulation(inputParams) {\n  // Merge input parameters with defaults\n  const currentParams = {\n    ...defaultParams,\n    ...inputParams\n  };\n\n  // Get the initial state vector based on the combined parameters\n  const y0 = getInitialState(currentParams);\n\n  // Simulation time parameters\n  const t0 = currentParams.timeStart;\n  const dt = currentParams.timeStep;\n  const timeLength = Math.max(0, currentParams.timeLength); // Ensure non-negative length\n\n  // Ensure time step is positive and calculate number of steps\n  const positiveDt = Math.max(dt, 1e-6); // Prevent zero or negative dt\n  const numSteps = Math.floor(timeLength / positiveDt);\n\n  // Create a wrapper for the derivative function to handle potential errors within the solver loop\n  const derivativeFuncForSolver = (dydt, y, t) => {\n    try {\n      derivatives(dydt, y, t, currentParams);\n    } catch (e) {\n      console.error(\"Error within derivatives function call at t=\", t, e);\n      // Set derivatives to zero to prevent propagation of NaN/Infinity\n      dydt.fill(0);\n    }\n  };\n\n  // Initialize the RK4 integrator\n  const integrator = odeRK4(y0, derivativeFuncForSolver, t0, positiveDt);\n\n  // Store results, starting with the initial state\n  const results = [{\n    time: integrator.t,\n    state: [...integrator.y]\n  }]; // Store copy of initial state\n\n  console.log(`Starting simulation for ${timeLength} days with step ${positiveDt}...`);\n\n  // Check if simulation can run\n  if (numSteps <= 0) {\n    console.warn(\"Simulation length or time step results in zero steps. Returning initial state only.\");\n    // Map the initial state to the desired output format\n    return results.map(p => ({\n      time: p.time,\n      CO2: p.state[0],\n      ComplexC: p.state[1],\n      MushroomYield: p.state[2],\n      Mycelium: p.state[3],\n      N: p.state[4],\n      SimpleC: p.state[5],\n      Space: p.state[6],\n      Temp: p.state[7]\n    }));\n  }\n\n  // --- Simulation Loop ---\n  for (let i = 0; i < numSteps; i++) {\n    try {\n      // Perform one step of the RK4 integration\n      integrator.step();\n\n      // Check for numerical instability (NaN or Infinity)\n      if (integrator.y.some(val => !Number.isFinite(val))) {\n        console.error(\"Simulation became unstable (NaN or Infinity detected) at t=\", integrator.t, \" State:\", integrator.y);\n        // Optionally break or handle the instability\n        break; // Stop simulation if unstable\n      }\n\n      // Store the results of this step (create a copy of the state array)\n      results.push({\n        time: integrator.t,\n        state: [...integrator.y]\n      });\n    } catch (solverError) {\n      // Catch errors specifically from the integrator.step() call\n      console.error(\"Error during RK4 step:\", solverError, \" at t=\", integrator.t);\n      break; // Stop simulation on solver error\n    }\n  }\n  console.log(`Simulation finished after ${results.length - 1} steps.`);\n\n  // --- Format Results ---\n  // Map the raw state vectors to named properties for easier use\n  return results.map(p => ({\n    time: p.time,\n    CO2: p.state[0],\n    ComplexC: p.state[1],\n    MushroomYield: p.state[2],\n    Mycelium: p.state[3],\n    N: p.state[4],\n    SimpleC: p.state[5],\n    Space: p.state[6],\n    Temp: p.state[7]\n  }));\n}\n\n// --- React Component Definition ---\nconst GrowthSimulation = () => {\n  _s();\n  // Hook for programmatic navigation\n  const navigate = useNavigate();\n\n  // --- State Variables ---\n  const [simulationResults, setSimulationResults] = useState(null); // Stores the array of simulation results [{time:..., CO2:..., ...}, ...]\n  const [isLoading, setIsLoading] = useState(true); // Tracks loading state for UI feedback\n  const [error, setError] = useState(null); // Stores any error message during setup or simulation\n  const [batchName, setBatchName] = useState(''); // Stores batch name loaded from localStorage\n  const [startDate, setStartDate] = useState(''); // Stores start date loaded from localStorage\n  const [initialCNRatio, setInitialCNRatio] = useState(defaultParams['Initial C:N Ratio']); // Stores C:N ratio used\n  const [finalSimulatedYield, setFinalSimulatedYield] = useState(null); // Stores the projected yield at the end\n  const [activeChartTab, setActiveChartTab] = useState('yield'); // Controls which chart ('yield' or 'temp') is displayed\n\n  // --- Effect Hook ---\n  // Runs once on component mount to load data and trigger simulation\n  useEffect(() => {\n    let isMounted = true; // Flag to prevent state updates on unmounted component\n    setIsLoading(true);\n    setError(null);\n    setFinalSimulatedYield(null);\n\n    // Use a small timeout to allow initial render before potentially heavy simulation\n    const timerId = setTimeout(() => {\n      if (!isMounted) return; // Exit if component unmounted during timeout\n\n      try {\n        // --- Load Parameters from Local Storage ---\n        const savedTemperature = localStorage.getItem('temperature');\n        const savedPh = localStorage.getItem('ph'); // Load pH even if not charted (used in simulation)\n        const savedSubstrateJson = localStorage.getItem('substrate');\n        const savedDays = localStorage.getItem('simulationDays');\n        const savedBatchName = localStorage.getItem('batchName') || 'YourBatchName'; // Provide default\n        const savedStartDate = localStorage.getItem('startDate') || 'DD/MM/YYYY'; // Provide default\n        const savedCNRatio = localStorage.getItem('initialCNRatio'); // Load as string first\n\n        // Update state for display\n        setBatchName(savedBatchName);\n        setStartDate(savedStartDate);\n\n        // --- Validate and Parse Parameters ---\n        if (!savedTemperature || !savedPh || !savedSubstrateJson || !savedDays) {\n          throw new Error(\"Required simulation parameters (temp, pH, substrate, days) not found in localStorage.\");\n        }\n        let substrateData = {};\n        try {\n          substrateData = JSON.parse(savedSubstrateJson);\n          if (typeof substrateData !== 'object' || substrateData === null) {\n            throw new Error(\"Invalid substrate data format.\");\n          }\n        } catch (parseError) {\n          throw new Error(`Failed to parse substrate data from localStorage: ${parseError.message}`);\n        }\n        const temp = parseFloat(savedTemperature);\n        const phValue = parseFloat(savedPh);\n        const days = parseInt(savedDays, 10);\n        const cnRatio = savedCNRatio ? parseFloat(savedCNRatio) : defaultParams['Initial C:N Ratio']; // Parse C:N or use default\n        const initialWeight = Object.values(substrateData).reduce((sum, val) => sum + (Number(val) || 0), 0);\n\n        // Update C:N ratio state *after* parsing/defaulting\n        setInitialCNRatio(cnRatio);\n        const simulationDuration = Number.isInteger(days) && days > 0 ? days : defaultParams.timeLength;\n\n        // Check for NaN values after parsing\n        if (isNaN(temp) || isNaN(phValue) || isNaN(initialWeight) || isNaN(cnRatio)) {\n          throw new Error(\"Invalid numerical parameters loaded (Temperature, pH, Substrate Weight, or C:N Ratio).\");\n        }\n\n        // --- Prepare Simulation Inputs ---\n        const simulationInputs = {\n          'External Temp': temp,\n          'pH': phValue,\n          'Initial Dry Substrate Weight': initialWeight > 0 ? initialWeight : defaultParams['Initial Dry Substrate Weight'],\n          // Use default if weight is 0\n          'timeLength': simulationDuration,\n          'Initial C:N Ratio': cnRatio // Use the parsed/defaulted value\n          // Add any other parameters needed by your 'derivatives' function\n        };\n\n        // --- Run Simulation ---\n        console.log(\"Running simulation with inputs:\", simulationInputs);\n        const results = runSimulation(simulationInputs);\n\n        // --- Update State with Results ---\n        if (isMounted) {\n          setSimulationResults(results);\n          // Extract final yield if results are valid\n          if (results && results.length > 0) {\n            const lastResult = results[results.length - 1];\n            const lastYield = lastResult === null || lastResult === void 0 ? void 0 : lastResult.MushroomYield;\n            if (Number.isFinite(lastYield)) {\n              setFinalSimulatedYield(lastYield);\n            } else {\n              console.warn(\"Final yield is not a finite number:\", lastYield);\n              setFinalSimulatedYield(null); // Set to null if invalid\n            }\n          } else {\n            setFinalSimulatedYield(null); // No results, no final yield\n          }\n        }\n      } catch (err) {\n        // Catch any errors during setup or simulation run\n        console.error(\"Error during simulation setup or run:\", err);\n        if (isMounted) {\n          setError(err.message || \"An unexpected error occurred during simulation.\");\n        }\n      } finally {\n        // Ensure loading state is turned off regardless of success or error\n        if (isMounted) {\n          setIsLoading(false);\n        }\n      }\n    }, 50); // 50ms delay\n\n    // --- Cleanup Function ---\n    // Clears the timeout and sets isMounted to false when the component unmounts\n    return () => {\n      isMounted = false;\n      clearTimeout(timerId);\n    };\n  }, []); // Empty dependency array means this effect runs only once on mount\n\n  // --- Event Handlers ---\n  // Function to navigate back (can be attached to a button if needed)\n  const handleBackClick = () => {\n    navigate('/condition-setting'); // Navigate to the specified route\n  };\n\n  // --- Chart Configuration ---\n  // Function to generate chart data and options based on the active tab\n  const getChartConfig = () => {\n    var _simulationResults;\n    // Return empty config if simulation hasn't run or failed\n    if (!simulationResults || simulationResults.length === 0) {\n      return {\n        data: {\n          datasets: []\n        },\n        options: {}\n      };\n    }\n    let datasets = [];\n    // Define consistent colors and styles for the chart\n    const textColor = '#6b4f4b'; // Brown text\n    const gridColor = 'rgba(107, 79, 75, 0.1)'; // Light brown grid lines\n    const titleColor = '#8B4513'; // Darker brown for titles\n\n    // Base chart options\n    const options = {\n      responsive: true,\n      // Chart adjusts to container size\n      maintainAspectRatio: false,\n      // Allows setting height independently\n      plugins: {\n        legend: {\n          display: true,\n          // Show legend\n          labels: {\n            color: textColor\n          } // Legend text color\n        },\n        tooltip: {\n          enabled: true\n        },\n        // Show tooltips on hover\n        title: {\n          display: true,\n          // Show chart title\n          text: '',\n          // Title text set below based on tab\n          color: titleColor,\n          // Title color\n          font: {\n            size: 16,\n            weight: 'bold'\n          } // Title font style\n        }\n      },\n      scales: {\n        x: {\n          // X-axis configuration (Time)\n          type: 'linear',\n          title: {\n            display: true,\n            text: 'Time (Days)',\n            color: textColor\n          },\n          ticks: {\n            // Calculate a reasonable step size, aiming for ~10 ticks\n            stepSize: Math.max(1, Math.round((((_simulationResults = simulationResults[simulationResults.length - 1]) === null || _simulationResults === void 0 ? void 0 : _simulationResults.time) || defaultParams.timeLength) / 10)),\n            color: textColor\n          },\n          grid: {\n            color: gridColor\n          },\n          // X-axis grid line color\n          min: 0 // Start X-axis at 0\n        },\n        // Y-axis definitions (only one displayed at a time based on active tab)\n        yYield: {\n          // Y-axis for Yield\n          type: 'linear',\n          position: 'left',\n          title: {\n            display: true,\n            text: 'Yield (g)',\n            color: 'green'\n          },\n          ticks: {\n            color: 'green'\n          },\n          grid: {\n            drawOnChartArea: true,\n            color: gridColor\n          },\n          // Draw grid lines across chart area\n          beginAtZero: true,\n          // Start Y-axis at 0 for yield\n          display: false // Initially hidden\n        },\n        yTemp: {\n          // Y-axis for Temperature\n          type: 'linear',\n          position: 'left',\n          title: {\n            display: true,\n            text: 'Temperature (°C)',\n            color: 'red'\n          },\n          ticks: {\n            color: 'red',\n            stepSize: 2\n          },\n          // Fixed step size for temp\n          grid: {\n            drawOnChartArea: true,\n            color: gridColor\n          },\n          // Draw grid lines across chart area\n          beginAtZero: false,\n          // Temp doesn't necessarily start at 0\n          display: false // Initially hidden\n        }\n        // pH axis configuration would go here if re-added\n      }\n    };\n\n    // --- Configure Datasets based on Active Tab ---\n    switch (activeChartTab) {\n      case 'yield':\n        options.plugins.title.text = 'Yield Over Time'; // Set chart title\n        options.scales.yYield.display = true; // Show the Yield Y-axis\n        datasets = [{\n          label: 'Mushroom Yield (g)',\n          // Map results, ensuring y is null for non-finite values (Chart.js handles gaps)\n          data: simulationResults.map(p => ({\n            x: p.time,\n            y: Number.isFinite(p.MushroomYield) ? p.MushroomYield : null\n          })),\n          borderColor: 'green',\n          backgroundColor: 'rgba(0, 128, 0, 0.1)',\n          // Fill color under the line\n          yAxisID: 'yYield',\n          // Link dataset to the correct Y-axis\n          tension: 0.1,\n          // Slight curve to the line\n          pointRadius: 1,\n          // Size of data points\n          spanGaps: true // Draw line even if there are null data points\n        }];\n        break;\n      case 'temp':\n        options.plugins.title.text = 'Temperature Over Time'; // Set chart title\n        options.scales.yTemp.display = true; // Show the Temperature Y-axis\n        datasets = [{\n          label: 'Temperature (°C)',\n          // Map results, ensuring y is null for non-finite values\n          data: simulationResults.map(p => ({\n            x: p.time,\n            y: Number.isFinite(p.Temp) ? p.Temp : null\n          })),\n          borderColor: 'red',\n          backgroundColor: 'rgba(255, 0, 0, 0.1)',\n          // Fill color under the line\n          yAxisID: 'yTemp',\n          // Link dataset to the correct Y-axis\n          tension: 0.1,\n          pointRadius: 1,\n          spanGaps: true\n        }];\n        break;\n\n      // No 'ph' case as it was removed previously\n      default:\n        // No datasets if tab is unknown\n        datasets = [];\n    }\n\n    // Return the complete configuration for the Line chart\n    return {\n      data: {\n        datasets: datasets\n      },\n      options: options\n    };\n  };\n\n  // Get the current chart configuration based on the active tab\n  const chartConfig = getChartConfig();\n\n  // --- Define Tailwind color classes for consistency ---\n  const bgColor = 'bg-[#f8f6ef]'; // Main page background (Creamy Beige)\n  const boxBgColor = 'bg-[#f5f2e9]'; // Content box background (Lighter Cream)\n  const textColor = 'text-[#6b4f4b]'; // Main text (Brown)\n  const titleColor = 'text-[#8B4513]'; // Logo/Batch text (Darker Brown)\n  const tabActiveBorderColor = 'border-[#8B4513]'; // Active tab underline color\n  const tabInactiveTextColor = 'text-gray-500'; // Inactive tab text color\n  const tabHoverTextColor = 'hover:text-[#8B4513]'; // Tab hover text color\n  const resultValueBg = 'bg-gray-200'; // Background for result value boxes\n\n  // --- JSX Rendering ---\n  return (\n    /*#__PURE__*/\n    // Main container div applying background, text color, and padding\n    _jsxDEV(\"div\", {\n      className: \"growth-simulation\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"logobox\",\n        children: [\" \", /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleBackClick,\n          className: \"back-button\",\n          title: \"Back to Home\",\n          children: [\" \", \"\\u2190 \"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 559,\n          columnNumber: 18\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"logo\",\n          children: [/*#__PURE__*/_jsxDEV(\"img\", {\n            src: logoSrc,\n            alt: \"Logo\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 563,\n            columnNumber: 21\n          }, this), \" \"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 562,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 558,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"header\", {\n        className: \"mb-6 md:mb-10\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"flex justify-between items-start\",\n          children: [\" \", /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: `text-lg font-semibold ${titleColor} mb-1`,\n              children: \"CITY SPROUTS\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 572,\n              columnNumber: 26\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: `text-base font-medium ${titleColor} mb-1`,\n              children: [\"Batch: #\", batchName]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 573,\n              columnNumber: 26\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: `text-sm ${textColor}`,\n              children: [\"Start Date: \", startDate]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 574,\n              columnNumber: 26\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 571,\n            columnNumber: 22\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"flex space-x-1 border-b border-gray-300\",\n            children: [\" \", /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => setActiveChartTab('yield')\n              // Dynamic classes for active/inactive state\n              ,\n              className: `py-2 px-4 text-sm font-medium transition duration-200 ${activeChartTab === 'yield' ? `${tabActiveBorderColor} ${titleColor} border-b-2` // Active style\n              : `${tabInactiveTextColor} ${tabHoverTextColor} border-b-2 border-transparent` // Inactive style\n              }`,\n              children: \"Yield over Time\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 580,\n              columnNumber: 26\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => setActiveChartTab('temp')\n              // Dynamic classes for active/inactive state\n              ,\n              className: `py-2 px-4 text-sm font-medium transition duration-200 ${activeChartTab === 'temp' ? `${tabActiveBorderColor} ${titleColor} border-b-2` // Active style\n              : `${tabInactiveTextColor} ${tabHoverTextColor} border-b-2 border-transparent` // Inactive style\n              }`,\n              children: \"Temperature\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 591,\n              columnNumber: 26\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 578,\n            columnNumber: 22\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 569,\n          columnNumber: 18\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 567,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n        className: \"grid grid-cols-1 md:grid-cols-3 gap-6 md:gap-8\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: `md:col-span-1 ${boxBgColor} p-5 rounded-xl shadow-md border border-gray-200 flex items-center justify-center min-h-[40vh] md:min-h-[60vh]`,\n          children: /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"text-gray-400 text-lg\",\n            children: \"Chart\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 615,\n            columnNumber: 21\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 613,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"md:col-span-2 space-y-6\",\n          children: [\" \", /*#__PURE__*/_jsxDEV(\"div\", {\n            className: `${boxBgColor} p-4 rounded-lg shadow-md border border-gray-200`,\n            children: [isLoading && /*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"text-center p-10\",\n              children: \"Loading and running simulation...\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 625,\n              columnNumber: 40\n            }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"text-center p-10 text-red-600\",\n              children: [\"Error: \", error]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 626,\n              columnNumber: 36\n            }, this), !isLoading && !error && simulationResults && (\n            // Only render chart if data is available\n            chartConfig.data.datasets.length > 0 ? /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"chart-container relative h-[35vh] w-full\",\n              children: [\" \", /*#__PURE__*/_jsxDEV(Line, {\n                options: chartConfig.options,\n                data: chartConfig.data\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 631,\n                columnNumber: 38\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 630,\n              columnNumber: 34\n            }, this) :\n            /*#__PURE__*/\n            // Message if simulation ran but produced no chartable data for the tab\n            _jsxDEV(\"p\", {\n              className: \"text-center p-10 text-gray-500\",\n              children: \"No data available for this chart.\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 635,\n              columnNumber: 35\n            }, this)), !isLoading && !error && !simulationResults && /*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"text-center p-10\",\n              children: \"No simulation results available.\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 639,\n              columnNumber: 73\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"text-xs text-orange-600 italic text-center mt-3 px-4\",\n              children: \"Warning: Simulation logic may be incomplete. Ensure all equations in the 'derivatives' function are accurate.\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 642,\n              columnNumber: 26\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 623,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: `${boxBgColor} p-5 rounded-xl shadow-md border border-gray-200`,\n            children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n              className: `text-lg font-semibold ${textColor} mb-3 flex items-center`,\n              children: [\"Results\", /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"ml-2 text-xs text-gray-500 cursor-help\",\n                title: \"Key simulation outputs based on initial conditions\",\n                children: \"(i)\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 653,\n                columnNumber: 29\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 650,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"space-y-2 text-sm\",\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"flex justify-between items-center\",\n                children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"font-medium mr-2\",\n                  children: \"Projected Yield:\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 659,\n                  columnNumber: 34\n                }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: `${resultValueBg} px-3 py-1 rounded text-right min-w-[80px]`,\n                  children: isLoading ? '...' : error ? 'Error' : Number.isFinite(finalSimulatedYield) ? `${finalSimulatedYield.toFixed(2)}g` : 'N/A'\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 661,\n                  columnNumber: 33\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 658,\n                columnNumber: 29\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"flex justify-between items-center\",\n                children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"font-medium mr-2\",\n                  children: \"C:N Ratio:\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 668,\n                  columnNumber: 34\n                }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: `${resultValueBg} px-3 py-1 rounded text-right min-w-[80px]`,\n                  children: isLoading ? '...' : error ? 'Error' : initialCNRatio ? initialCNRatio.toFixed(2) : 'N/A'\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 670,\n                  columnNumber: 33\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 667,\n                columnNumber: 29\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 656,\n              columnNumber: 25\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 648,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 620,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 609,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 557,\n      columnNumber: 9\n    }, this)\n  );\n};\n\n// Export the component for use in other parts of the application\n_s(GrowthSimulation, \"H76gT0uXCmr1/wrJmUC7IPBpyxo=\", false, function () {\n  return [useNavigate];\n});\n_c = GrowthSimulation;\nexport default GrowthSimulation;\nvar _c;\n$RefreshReg$(_c, \"GrowthSimulation\");","map":{"version":3,"names":["React","useState","useEffect","useNavigate","Line","Chart","ChartJS","LineElement","PointElement","Tooltip","Legend","CategoryScale","LinearScale","Title","odeRK4","logoSrc","jsxDEV","_jsxDEV","register","linearInterpolate","data","x","length","i","x0","y0","x1","y1","divisor","t","defaultParams","timeStart","timeLength","timeStep","derivatives","dydt","y","currentParams","currentCO2","currentComplexC","currentMushroomYield","currentMycelium","currentN","currentSimpleC","currentSpace","currentTemp","initialDrySubstrateWeight","cnRatioPlusOne","InitC","AvailableN","AvailableC","NEffect","CEffect","Math","sqrt","max","VolumeNormalisation","Effect_of_CO2_on_Mush_Growth","Effect_of_CO2_on_Myc_Growth","Effect_of_pH_on_Mush_Growth","Effect_of_pH_on_Myc_Growth","Effect_of_Temp_on_Mush_Growth","Effect_of_Temp_on_Myc_Growth","TempEff_","TempEffect","pHEff_","pHEffect","CO2Eff_","CO2Effect","RawGrowthRate","GrowthOpp","GrowthRate","NormGrowthRate","flow_Breakdown","flow_CCons","flow_CO2Prod","flow_CO2Vent","flow_Colonisation","flow_MushroomGrowth","flow_NCons","flow_TempProd","flow_TempVent","getInitialState","p","Number","cnRatio","complexSimpleRatio","Init_N","Init_C","Init_ComplexC","Init_SimpleC","runSimulation","inputParams","t0","dt","positiveDt","numSteps","floor","derivativeFuncForSolver","e","console","error","fill","integrator","results","time","state","log","warn","map","CO2","ComplexC","MushroomYield","Mycelium","N","SimpleC","Space","Temp","step","some","val","isFinite","push","solverError","GrowthSimulation","_s","navigate","simulationResults","setSimulationResults","isLoading","setIsLoading","setError","batchName","setBatchName","startDate","setStartDate","initialCNRatio","setInitialCNRatio","finalSimulatedYield","setFinalSimulatedYield","activeChartTab","setActiveChartTab","isMounted","timerId","setTimeout","savedTemperature","localStorage","getItem","savedPh","savedSubstrateJson","savedDays","savedBatchName","savedStartDate","savedCNRatio","Error","substrateData","JSON","parse","parseError","message","temp","parseFloat","phValue","days","parseInt","initialWeight","Object","values","reduce","sum","simulationDuration","isInteger","isNaN","simulationInputs","lastResult","lastYield","err","clearTimeout","handleBackClick","getChartConfig","_simulationResults","datasets","options","textColor","gridColor","titleColor","responsive","maintainAspectRatio","plugins","legend","display","labels","color","tooltip","enabled","title","text","font","size","weight","scales","type","ticks","stepSize","round","grid","min","yYield","position","drawOnChartArea","beginAtZero","yTemp","label","borderColor","backgroundColor","yAxisID","tension","pointRadius","spanGaps","chartConfig","bgColor","boxBgColor","tabActiveBorderColor","tabInactiveTextColor","tabHoverTextColor","resultValueBg","className","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","src","alt","toFixed","_c","$RefreshReg$"],"sources":["C:/Users/celst/sds/src/components/GrowthSimulation.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { Line } from 'react-chartjs-2';\r\nimport {\r\n    Chart as ChartJS,\r\n    LineElement,\r\n    PointElement,\r\n    Tooltip,\r\n    Legend,\r\n    CategoryScale,\r\n    LinearScale,\r\n    Title\r\n} from 'chart.js';\r\nimport odeRK4 from 'ode-rk4'; // Import the RK4 library\r\nimport logoSrc from '../assets/images/cslogo.png'; // Ensure path is correct\r\n\r\n\r\n// Assuming Tailwind CSS is setup globally in your project (e.g., in index.css)\r\n\r\n// Register required components for Chart.js to work\r\nChartJS.register(\r\n    LineElement,\r\n    PointElement,\r\n    Tooltip,\r\n    Legend,\r\n    CategoryScale,\r\n    LinearScale,\r\n    Title\r\n);\r\n\r\n// --- Simulation Logic (Keep outside the React component for clarity) ---\r\n\r\n/**\r\n * Performs linear interpolation on a given dataset.\r\n * @param {Array<Array<number>>} data - The dataset (e.g., [[x1, y1], [x2, y2], ...]) sorted by x.\r\n * @param {number} x - The x-value to interpolate at.\r\n * @returns {number} The interpolated y-value.\r\n */\r\nfunction linearInterpolate(data, x) {\r\n    // Handle edge cases where data is empty or x is outside the range\r\n    if (!data || data.length === 0) return 0;\r\n    if (x <= data[0][0]) return data[0][1];\r\n    if (x >= data[data.length - 1][0]) return data[data.length - 1][1];\r\n\r\n    // Find the two points surrounding x\r\n    let i = 0;\r\n    while (i < data.length - 1 && x > data[i + 1][0]) i++;\r\n\r\n    // Get the coordinates of the surrounding points\r\n    const x0 = data[i][0], y0 = data[i][1];\r\n    const x1 = data[i + 1][0], y1 = data[i + 1][1];\r\n\r\n    // Calculate the interpolation factor 't'\r\n    const divisor = (x1 - x0);\r\n    if (divisor === 0) return y0; // Avoid division by zero if x points are identical\r\n    const t = (x - x0) / divisor;\r\n\r\n    // Return the interpolated y-value\r\n    return y0 + t * (y1 - y0);\r\n}\r\n\r\n// Default Model Parameters (Constants)\r\nconst defaultParams = {\r\n    timeStart: 0, timeLength: 100, timeStep: 0.2,\r\n    'C BD Rate': 1.11, 'C Coeff': 0.7, 'C Cons. Rate': 76.39, 'CO2 Coeff': 0.8,\r\n    'CO2 Production Rate': 410000, 'CO2 Removal Rate': 12.6, 'External CO2': 428.23,\r\n    'External Temp': 24, 'Growth Coeff': 5.1, 'Initial C:N Ratio': 43.58,\r\n    'Initial Complex:Simple Ratio': 0.8054, 'Initial Dry Substrate Weight': 410.2,\r\n    'IsMush': 1, 'Mushroom Multiplier': 5.17, 'N Coeff': 68.4, 'N Rate': 13.03,\r\n    'pH': 6.91, 'pH Coeff': 1.4, 'Temp Coeff': 1.3, 'Temp Production Rate': 405,\r\n    'Temp Transfer Rate': 1.5,\r\n    // Effect data arrays (used with linearInterpolate)\r\n    'Effect of CO2 on Mush Growth Data': [[500, 0.9], [800, 1], [1000, 0.8], [1200, 0.25], [1400, 0]],\r\n    'Effect of CO2 on Myc Growth Data': [[15000, 1], [20000, 0.9], [25000, 0.25], [30000, 0]],\r\n    'Effect of pH on Mush Growth Data': [[5.5, 0], [6, 0.25], [6.7, 1], [7, 0.6], [7.5, 0]],\r\n    'Effect of pH on Myc Growth Data': [[5.8, 0], [6, 0.25], [6.7, 1], [7, 0.6], [7.5, 0]],\r\n    'Effect of Temp on Mush Growth Data': [[10, 0], [15, 5.37], [20, 6.36], [25, 8.63], [30, 6.37], [40, 0]],\r\n    'Effect of Temp on Myc Growth Data': [[10, 0], [15, 5.37], [20, 6.36], [25, 8.63], [30, 6.37], [35, 5.36], [45, 0]],\r\n};\r\n\r\n/**\r\n * Derivative function required by the RK4 solver. Calculates the rate of change for each state variable.\r\n * IMPORTANT: This function contains the core logic of your mushroom growth model.\r\n * Ensure all equations accurately reflect your model. The current version is a scaffold.\r\n * @param {Array<number>} dydt - Output array to store the calculated derivatives.\r\n * @param {Array<number>} y - Current state vector [CO2, ComplexC, MushroomYield, Mycelium, N, SimpleC, Space, Temp].\r\n * @param {number} t - Current time (often unused in autonomous systems but required by solver).\r\n * @param {object} currentParams - The parameters being used for this simulation run.\r\n */\r\nfunction derivatives(dydt, y, t, currentParams) {\r\n    // Destructure the current state vector for easier access\r\n    const [ currentCO2, currentComplexC, currentMushroomYield, currentMycelium, currentN, currentSimpleC, currentSpace, currentTemp ] = y;\r\n\r\n    // --- Calculate intermediate variables based on current state and parameters ---\r\n    // These calculations represent the core interactions in your model\r\n    const initialDrySubstrateWeight = currentParams['Initial Dry Substrate Weight'] || 1; // Avoid division by zero\r\n    const cnRatioPlusOne = (currentParams['Initial C:N Ratio'] + 1) || 1; // Avoid division by zero\r\n    const InitC = initialDrySubstrateWeight - (initialDrySubstrateWeight / cnRatioPlusOne); // Initial Carbon\r\n    const AvailableN = currentN / initialDrySubstrateWeight; // Normalized available Nitrogen\r\n    const AvailableC = currentSimpleC / initialDrySubstrateWeight; // Normalized available simple Carbon\r\n    const NEffect = currentParams['N Coeff'] * AvailableN; // Effect of Nitrogen availability\r\n    const CEffect = Math.sqrt(Math.max(0, currentParams['C Coeff'] * AvailableC)); // Effect of Carbon availability (ensure non-negative)\r\n    const VolumeNormalisation = Math.sqrt(100 / initialDrySubstrateWeight); // Normalization factor\r\n\r\n    // Calculate effects using interpolation based on current conditions\r\n    const Effect_of_CO2_on_Mush_Growth = linearInterpolate(currentParams['Effect of CO2 on Mush Growth Data'], currentCO2);\r\n    const Effect_of_CO2_on_Myc_Growth = linearInterpolate(currentParams['Effect of CO2 on Myc Growth Data'], currentCO2);\r\n    const Effect_of_pH_on_Mush_Growth = linearInterpolate(currentParams['Effect of pH on Mush Growth Data'], currentParams['pH']);\r\n    const Effect_of_pH_on_Myc_Growth = linearInterpolate(currentParams['Effect of pH on Myc Growth Data'], currentParams['pH']);\r\n    const Effect_of_Temp_on_Mush_Growth = linearInterpolate(currentParams['Effect of Temp on Mush Growth Data'], currentTemp);\r\n    const Effect_of_Temp_on_Myc_Growth = linearInterpolate(currentParams['Effect of Temp on Myc Growth Data'], currentTemp);\r\n\r\n    // Determine which effect curves to use based on whether it's mushrooming phase\r\n    const TempEff_ = currentParams['IsMush'] === 0 ? Effect_of_Temp_on_Myc_Growth : Effect_of_Temp_on_Mush_Growth;\r\n    const TempEffect = (currentParams['Temp Coeff'] * TempEff_) / 10; // Scaled Temperature effect\r\n\r\n    const pHEff_ = currentParams['IsMush'] === 0 ? Effect_of_pH_on_Myc_Growth : Effect_of_pH_on_Mush_Growth;\r\n    const pHEffect = pHEff_ * currentParams['pH Coeff']; // Scaled pH effect\r\n\r\n    const CO2Eff_ = currentParams['IsMush'] === 0 ? Effect_of_CO2_on_Myc_Growth : Effect_of_CO2_on_Mush_Growth;\r\n    const CO2Effect = currentParams['CO2 Coeff'] * CO2Eff_; // Scaled CO2 effect\r\n\r\n    // Calculate the raw growth potential based on combined effects\r\n    const RawGrowthRate = TempEffect * pHEffect * NEffect * CEffect * CO2Effect;\r\n\r\n    // Calculate growth opportunity based on available space and existing mycelium\r\n    const GrowthOpp = currentSpace * currentMycelium;\r\n\r\n    // Determine actual growth rate (different logic for mycelial vs. mushroom phase)\r\n    let GrowthRate = currentParams['IsMush'] === 1\r\n        ? (RawGrowthRate * currentParams['Growth Coeff']) // Mushroom phase growth\r\n        : (RawGrowthRate * GrowthOpp * currentParams['Growth Coeff']); // Mycelial phase growth\r\n\r\n    // Normalize growth rate (different normalization for mushroom phase)\r\n    let NormGrowthRate = currentParams['IsMush'] === 1 ? (GrowthRate / 100) : GrowthRate;\r\n\r\n    // --- Calculate Flows (Rates of Change for each state variable) ---\r\n    // *** THIS IS THE CRITICAL PART - ENSURE THESE EQUATIONS ARE CORRECT ***\r\n    // These represent how each state variable changes based on the calculated rates and effects.\r\n\r\n    const flow_Breakdown = currentMycelium * currentParams['C BD Rate'] * currentComplexC * RawGrowthRate * VolumeNormalisation; // Complex C breakdown\r\n    const flow_CCons = NormGrowthRate * currentParams['C Cons. Rate']; // Simple C consumption for growth\r\n    const flow_CO2Prod = NormGrowthRate * currentParams['CO2 Production Rate']; // CO2 production from respiration\r\n    const flow_CO2Vent = currentParams['CO2 Removal Rate'] * (currentCO2 - currentParams['External CO2']) * VolumeNormalisation; // CO2 ventilation/removal\r\n    const flow_Colonisation = currentParams['IsMush'] === 0 ? GrowthRate : 0; // Mycelium growth (colonisation)\r\n    const flow_MushroomGrowth = currentParams['IsMush'] === 1 ? (GrowthRate * currentParams['Mushroom Multiplier']) : 0; // Mushroom biomass growth\r\n    const flow_NCons = NormGrowthRate * currentParams['N Rate']; // Nitrogen consumption for growth\r\n    const flow_TempProd = NormGrowthRate * currentParams['Temp Production Rate']; // Heat production from metabolism\r\n    const flow_TempVent = (currentTemp - currentParams['External Temp']) * currentParams['Temp Transfer Rate'] * VolumeNormalisation; // Heat transfer/ventilation\r\n\r\n    // --- Assign derivatives (rates of change) to the output array dydt ---\r\n    // Index corresponds to the state variable order: [CO2, ComplexC, MushroomYield, Mycelium, N, SimpleC, Space, Temp]\r\n    dydt[0] = flow_CO2Prod - flow_CO2Vent;          // dCO2/dt\r\n    dydt[1] = -flow_Breakdown;                       // dComplexC/dt\r\n    dydt[2] = flow_MushroomGrowth;                   // dMushroomYield/dt\r\n    dydt[3] = flow_Colonisation;                     // dMycelium/dt\r\n    dydt[4] = -flow_NCons;                           // dN/dt\r\n    dydt[5] = flow_Breakdown - flow_CCons;           // dSimpleC/dt\r\n    dydt[6] = -flow_Colonisation;                    // dSpace/dt (Space decreases as Mycelium grows)\r\n    dydt[7] = flow_TempProd - flow_TempVent;         // dTemp/dt\r\n\r\n    // --- Apply constraints (prevent negative values where physically impossible) ---\r\n    if (currentCO2 <= 0 && dydt[0] < 0) dydt[0] = 0;\r\n    if (currentComplexC <= 0 && dydt[1] < 0) dydt[1] = 0;\r\n    if (currentN <= 0 && dydt[4] < 0) dydt[4] = 0;\r\n    if (currentSimpleC <= 0 && dydt[5] < 0) dydt[5] = 0;\r\n    if (currentTemp <= 0 && dydt[7] < 0) dydt[7] = 0; // Assuming Temp can't go below absolute zero or a practical minimum\r\n    // Add constraints for Mycelium and Space if needed (e.g., Mycelium + Space <= 1)\r\n}\r\n\r\n/**\r\n * Calculates the initial state vector based on input parameters.\r\n * @param {object} p - Input parameters object.\r\n * @returns {Array<number>} The initial state vector [CO2, ComplexC, MushroomYield, Mycelium, N, SimpleC, Space, Temp].\r\n */\r\nfunction getInitialState(p) {\r\n    const initialDrySubstrateWeight = Number(p['Initial Dry Substrate Weight']) || 1;\r\n    const cnRatio = Number(p['Initial C:N Ratio']) || defaultParams['Initial C:N Ratio']; // Use default if invalid\r\n    const cnRatioPlusOne = cnRatio + 1;\r\n    const complexSimpleRatio = Number(p['Initial Complex:Simple Ratio']) || defaultParams['Initial Complex:Simple Ratio']; // Use default if invalid\r\n\r\n    // Calculate initial Carbon and Nitrogen based on weight and C:N ratio\r\n    const Init_N = initialDrySubstrateWeight / cnRatioPlusOne;\r\n    const Init_C = initialDrySubstrateWeight - Init_N; // Total initial Carbon\r\n\r\n    // Calculate initial Complex and Simple Carbon based on the ratio\r\n    const Init_ComplexC = Init_C * complexSimpleRatio;\r\n    const Init_SimpleC = Init_C * (1 - complexSimpleRatio);\r\n\r\n    // Define the initial state vector - Order MUST match the 'derivatives' function and results mapping\r\n    // [ CO2, ComplexC, MushroomYield, Mycelium, N, SimpleC, Space, Temp ]\r\n    return [\r\n        Number(p['External CO2']) || defaultParams['External CO2'], // Initial CO2 (assumed equilibrium with external)\r\n        Init_ComplexC,                                            // Initial Complex Carbon\r\n        0,                                                        // Initial Mushroom Yield (starts at 0)\r\n        0.02,                                                     // Initial Mycelium (small inoculation amount, e.g., 2%)\r\n        Init_N,                                                   // Initial Nitrogen\r\n        Init_SimpleC,                                             // Initial Simple Carbon\r\n        0.98,                                                     // Initial Space (1 - Initial Mycelium)\r\n        Number(p['External Temp']) || defaultParams['External Temp'] // Initial Temp (assumed equilibrium with external)\r\n    ];\r\n}\r\n\r\n/**\r\n * Runs the simulation using the RK4 method.\r\n * @param {object} inputParams - Parameters overriding the defaults for this specific run.\r\n * @returns {Array<object>} An array of result objects, each containing { time, CO2, ComplexC, ..., Temp }.\r\n */\r\nfunction runSimulation(inputParams) {\r\n    // Merge input parameters with defaults\r\n    const currentParams = { ...defaultParams, ...inputParams };\r\n\r\n    // Get the initial state vector based on the combined parameters\r\n    const y0 = getInitialState(currentParams);\r\n\r\n    // Simulation time parameters\r\n    const t0 = currentParams.timeStart;\r\n    const dt = currentParams.timeStep;\r\n    const timeLength = Math.max(0, currentParams.timeLength); // Ensure non-negative length\r\n\r\n    // Ensure time step is positive and calculate number of steps\r\n    const positiveDt = Math.max(dt, 1e-6); // Prevent zero or negative dt\r\n    const numSteps = Math.floor(timeLength / positiveDt);\r\n\r\n    // Create a wrapper for the derivative function to handle potential errors within the solver loop\r\n    const derivativeFuncForSolver = (dydt, y, t) => {\r\n        try {\r\n            derivatives(dydt, y, t, currentParams);\r\n        } catch (e) {\r\n            console.error(\"Error within derivatives function call at t=\", t, e);\r\n            // Set derivatives to zero to prevent propagation of NaN/Infinity\r\n            dydt.fill(0);\r\n        }\r\n    };\r\n\r\n    // Initialize the RK4 integrator\r\n    const integrator = odeRK4(y0, derivativeFuncForSolver, t0, positiveDt);\r\n\r\n    // Store results, starting with the initial state\r\n    const results = [{ time: integrator.t, state: [...integrator.y] }]; // Store copy of initial state\r\n\r\n    console.log(`Starting simulation for ${timeLength} days with step ${positiveDt}...`);\r\n\r\n    // Check if simulation can run\r\n    if (numSteps <= 0) {\r\n        console.warn(\"Simulation length or time step results in zero steps. Returning initial state only.\");\r\n        // Map the initial state to the desired output format\r\n        return results.map(p => ({\r\n            time: p.time,\r\n            CO2: p.state[0], ComplexC: p.state[1], MushroomYield: p.state[2],\r\n            Mycelium: p.state[3], N: p.state[4], SimpleC: p.state[5],\r\n            Space: p.state[6], Temp: p.state[7]\r\n        }));\r\n    }\r\n\r\n    // --- Simulation Loop ---\r\n    for (let i = 0; i < numSteps; i++) {\r\n        try {\r\n            // Perform one step of the RK4 integration\r\n            integrator.step();\r\n\r\n            // Check for numerical instability (NaN or Infinity)\r\n            if (integrator.y.some(val => !Number.isFinite(val))) {\r\n                console.error(\"Simulation became unstable (NaN or Infinity detected) at t=\", integrator.t, \" State:\", integrator.y);\r\n                // Optionally break or handle the instability\r\n                 break; // Stop simulation if unstable\r\n            }\r\n\r\n            // Store the results of this step (create a copy of the state array)\r\n            results.push({ time: integrator.t, state: [...integrator.y] });\r\n\r\n        } catch (solverError) {\r\n            // Catch errors specifically from the integrator.step() call\r\n            console.error(\"Error during RK4 step:\", solverError, \" at t=\", integrator.t);\r\n            break; // Stop simulation on solver error\r\n        }\r\n    }\r\n\r\n    console.log(`Simulation finished after ${results.length - 1} steps.`);\r\n\r\n    // --- Format Results ---\r\n    // Map the raw state vectors to named properties for easier use\r\n    return results.map(p => ({\r\n        time: p.time,\r\n        CO2: p.state[0],\r\n        ComplexC: p.state[1],\r\n        MushroomYield: p.state[2],\r\n        Mycelium: p.state[3],\r\n        N: p.state[4],\r\n        SimpleC: p.state[5],\r\n        Space: p.state[6],\r\n        Temp: p.state[7]\r\n    }));\r\n}\r\n\r\n\r\n// --- React Component Definition ---\r\nconst GrowthSimulation = () => {\r\n    // Hook for programmatic navigation\r\n    const navigate = useNavigate();\r\n\r\n    // --- State Variables ---\r\n    const [simulationResults, setSimulationResults] = useState(null); // Stores the array of simulation results [{time:..., CO2:..., ...}, ...]\r\n    const [isLoading, setIsLoading] = useState(true); // Tracks loading state for UI feedback\r\n    const [error, setError] = useState(null); // Stores any error message during setup or simulation\r\n    const [batchName, setBatchName] = useState(''); // Stores batch name loaded from localStorage\r\n    const [startDate, setStartDate] = useState(''); // Stores start date loaded from localStorage\r\n    const [initialCNRatio, setInitialCNRatio] = useState(defaultParams['Initial C:N Ratio']); // Stores C:N ratio used\r\n    const [finalSimulatedYield, setFinalSimulatedYield] = useState(null); // Stores the projected yield at the end\r\n    const [activeChartTab, setActiveChartTab] = useState('yield'); // Controls which chart ('yield' or 'temp') is displayed\r\n\r\n    // --- Effect Hook ---\r\n    // Runs once on component mount to load data and trigger simulation\r\n    useEffect(() => {\r\n        let isMounted = true; // Flag to prevent state updates on unmounted component\r\n        setIsLoading(true);\r\n        setError(null);\r\n        setFinalSimulatedYield(null);\r\n\r\n        // Use a small timeout to allow initial render before potentially heavy simulation\r\n        const timerId = setTimeout(() => {\r\n            if (!isMounted) return; // Exit if component unmounted during timeout\r\n\r\n            try {\r\n                // --- Load Parameters from Local Storage ---\r\n                const savedTemperature = localStorage.getItem('temperature');\r\n                const savedPh = localStorage.getItem('ph'); // Load pH even if not charted (used in simulation)\r\n                const savedSubstrateJson = localStorage.getItem('substrate');\r\n                const savedDays = localStorage.getItem('simulationDays');\r\n                const savedBatchName = localStorage.getItem('batchName') || 'YourBatchName'; // Provide default\r\n                const savedStartDate = localStorage.getItem('startDate') || 'DD/MM/YYYY'; // Provide default\r\n                const savedCNRatio = localStorage.getItem('initialCNRatio'); // Load as string first\r\n\r\n                // Update state for display\r\n                setBatchName(savedBatchName);\r\n                setStartDate(savedStartDate);\r\n\r\n                // --- Validate and Parse Parameters ---\r\n                if (!savedTemperature || !savedPh || !savedSubstrateJson || !savedDays) {\r\n                    throw new Error(\"Required simulation parameters (temp, pH, substrate, days) not found in localStorage.\");\r\n                }\r\n\r\n                let substrateData = {};\r\n                try {\r\n                    substrateData = JSON.parse(savedSubstrateJson);\r\n                    if (typeof substrateData !== 'object' || substrateData === null) {\r\n                       throw new Error(\"Invalid substrate data format.\");\r\n                    }\r\n                } catch (parseError) {\r\n                     throw new Error(`Failed to parse substrate data from localStorage: ${parseError.message}`);\r\n                }\r\n\r\n\r\n                const temp = parseFloat(savedTemperature);\r\n                const phValue = parseFloat(savedPh);\r\n                const days = parseInt(savedDays, 10);\r\n                const cnRatio = savedCNRatio ? parseFloat(savedCNRatio) : defaultParams['Initial C:N Ratio']; // Parse C:N or use default\r\n                const initialWeight = Object.values(substrateData).reduce((sum, val) => sum + (Number(val) || 0), 0);\r\n\r\n                // Update C:N ratio state *after* parsing/defaulting\r\n                setInitialCNRatio(cnRatio);\r\n\r\n                const simulationDuration = (Number.isInteger(days) && days > 0) ? days : defaultParams.timeLength;\r\n\r\n                // Check for NaN values after parsing\r\n                if (isNaN(temp) || isNaN(phValue) || isNaN(initialWeight) || isNaN(cnRatio)) {\r\n                    throw new Error(\"Invalid numerical parameters loaded (Temperature, pH, Substrate Weight, or C:N Ratio).\");\r\n                }\r\n\r\n                // --- Prepare Simulation Inputs ---\r\n                const simulationInputs = {\r\n                    'External Temp': temp,\r\n                    'pH': phValue,\r\n                    'Initial Dry Substrate Weight': initialWeight > 0 ? initialWeight : defaultParams['Initial Dry Substrate Weight'], // Use default if weight is 0\r\n                    'timeLength': simulationDuration,\r\n                    'Initial C:N Ratio': cnRatio // Use the parsed/defaulted value\r\n                    // Add any other parameters needed by your 'derivatives' function\r\n                };\r\n\r\n                // --- Run Simulation ---\r\n                console.log(\"Running simulation with inputs:\", simulationInputs);\r\n                const results = runSimulation(simulationInputs);\r\n\r\n                // --- Update State with Results ---\r\n                if (isMounted) {\r\n                    setSimulationResults(results);\r\n                    // Extract final yield if results are valid\r\n                    if (results && results.length > 0) {\r\n                         const lastResult = results[results.length - 1];\r\n                         const lastYield = lastResult?.MushroomYield;\r\n                         if (Number.isFinite(lastYield)) {\r\n                             setFinalSimulatedYield(lastYield);\r\n                         } else {\r\n                             console.warn(\"Final yield is not a finite number:\", lastYield);\r\n                             setFinalSimulatedYield(null); // Set to null if invalid\r\n                         }\r\n                    } else {\r\n                         setFinalSimulatedYield(null); // No results, no final yield\r\n                    }\r\n                }\r\n\r\n            } catch (err) {\r\n                // Catch any errors during setup or simulation run\r\n                console.error(\"Error during simulation setup or run:\", err);\r\n                 if (isMounted) {\r\n                     setError(err.message || \"An unexpected error occurred during simulation.\");\r\n                 }\r\n            } finally {\r\n                // Ensure loading state is turned off regardless of success or error\r\n                 if (isMounted) {\r\n                     setIsLoading(false);\r\n                 }\r\n            }\r\n        }, 50); // 50ms delay\r\n\r\n        // --- Cleanup Function ---\r\n        // Clears the timeout and sets isMounted to false when the component unmounts\r\n        return () => {\r\n            isMounted = false;\r\n            clearTimeout(timerId);\r\n        };\r\n    }, []); // Empty dependency array means this effect runs only once on mount\r\n\r\n    // --- Event Handlers ---\r\n    // Function to navigate back (can be attached to a button if needed)\r\n    const handleBackClick = () => {\r\n        navigate('/condition-setting'); // Navigate to the specified route\r\n    };\r\n\r\n    // --- Chart Configuration ---\r\n    // Function to generate chart data and options based on the active tab\r\n    const getChartConfig = () => {\r\n        // Return empty config if simulation hasn't run or failed\r\n        if (!simulationResults || simulationResults.length === 0) {\r\n            return { data: { datasets: [] }, options: {} };\r\n        }\r\n\r\n        let datasets = [];\r\n        // Define consistent colors and styles for the chart\r\n        const textColor = '#6b4f4b'; // Brown text\r\n        const gridColor = 'rgba(107, 79, 75, 0.1)'; // Light brown grid lines\r\n        const titleColor = '#8B4513'; // Darker brown for titles\r\n\r\n        // Base chart options\r\n        const options = {\r\n            responsive: true,       // Chart adjusts to container size\r\n            maintainAspectRatio: false, // Allows setting height independently\r\n            plugins: {\r\n                legend: {\r\n                    display: true,      // Show legend\r\n                    labels: { color: textColor } // Legend text color\r\n                },\r\n                tooltip: { enabled: true }, // Show tooltips on hover\r\n                title: {\r\n                    display: true,      // Show chart title\r\n                    text: '',           // Title text set below based on tab\r\n                    color: titleColor,  // Title color\r\n                    font: { size: 16, weight: 'bold' } // Title font style\r\n                }\r\n            },\r\n            scales: {\r\n                x: { // X-axis configuration (Time)\r\n                    type: 'linear',\r\n                    title: { display: true, text: 'Time (Days)', color: textColor },\r\n                    ticks: {\r\n                        // Calculate a reasonable step size, aiming for ~10 ticks\r\n                        stepSize: Math.max(1, Math.round((simulationResults[simulationResults.length-1]?.time || defaultParams.timeLength) / 10)),\r\n                        color: textColor\r\n                    },\r\n                    grid: { color: gridColor }, // X-axis grid line color\r\n                    min: 0, // Start X-axis at 0\r\n                },\r\n                // Y-axis definitions (only one displayed at a time based on active tab)\r\n                yYield: { // Y-axis for Yield\r\n                    type: 'linear', position: 'left',\r\n                    title: { display: true, text: 'Yield (g)', color: 'green' },\r\n                    ticks: { color: 'green' },\r\n                    grid: { drawOnChartArea: true, color: gridColor }, // Draw grid lines across chart area\r\n                    beginAtZero: true, // Start Y-axis at 0 for yield\r\n                    display: false // Initially hidden\r\n                },\r\n                yTemp: { // Y-axis for Temperature\r\n                    type: 'linear', position: 'left',\r\n                    title: { display: true, text: 'Temperature (°C)', color: 'red' },\r\n                    ticks: { color: 'red', stepSize: 2 }, // Fixed step size for temp\r\n                    grid: { drawOnChartArea: true, color: gridColor }, // Draw grid lines across chart area\r\n                    beginAtZero: false, // Temp doesn't necessarily start at 0\r\n                    display: false // Initially hidden\r\n                }\r\n                // pH axis configuration would go here if re-added\r\n            }\r\n        };\r\n\r\n        // --- Configure Datasets based on Active Tab ---\r\n        switch (activeChartTab) {\r\n            case 'yield':\r\n                options.plugins.title.text = 'Yield Over Time'; // Set chart title\r\n                options.scales.yYield.display = true; // Show the Yield Y-axis\r\n                datasets = [{\r\n                    label: 'Mushroom Yield (g)',\r\n                    // Map results, ensuring y is null for non-finite values (Chart.js handles gaps)\r\n                    data: simulationResults.map(p => ({ x: p.time, y: Number.isFinite(p.MushroomYield) ? p.MushroomYield : null })),\r\n                    borderColor: 'green',\r\n                    backgroundColor: 'rgba(0, 128, 0, 0.1)', // Fill color under the line\r\n                    yAxisID: 'yYield', // Link dataset to the correct Y-axis\r\n                    tension: 0.1,      // Slight curve to the line\r\n                    pointRadius: 1,    // Size of data points\r\n                    spanGaps: true     // Draw line even if there are null data points\r\n                }];\r\n                break;\r\n\r\n            case 'temp':\r\n                 options.plugins.title.text = 'Temperature Over Time'; // Set chart title\r\n                 options.scales.yTemp.display = true; // Show the Temperature Y-axis\r\n                 datasets = [{\r\n                     label: 'Temperature (°C)',\r\n                     // Map results, ensuring y is null for non-finite values\r\n                     data: simulationResults.map(p => ({ x: p.time, y: Number.isFinite(p.Temp) ? p.Temp : null })),\r\n                     borderColor: 'red',\r\n                     backgroundColor: 'rgba(255, 0, 0, 0.1)', // Fill color under the line\r\n                     yAxisID: 'yTemp', // Link dataset to the correct Y-axis\r\n                     tension: 0.1,\r\n                     pointRadius: 1,\r\n                     spanGaps: true\r\n                 }];\r\n                 break;\r\n\r\n            // No 'ph' case as it was removed previously\r\n            default:\r\n                // No datasets if tab is unknown\r\n                datasets = [];\r\n        }\r\n\r\n        // Return the complete configuration for the Line chart\r\n        return {\r\n            data: { datasets: datasets },\r\n            options: options\r\n        };\r\n    };\r\n\r\n    // Get the current chart configuration based on the active tab\r\n    const chartConfig = getChartConfig();\r\n\r\n    // --- Define Tailwind color classes for consistency ---\r\n    const bgColor = 'bg-[#f8f6ef]'; // Main page background (Creamy Beige)\r\n    const boxBgColor = 'bg-[#f5f2e9]'; // Content box background (Lighter Cream)\r\n    const textColor = 'text-[#6b4f4b]'; // Main text (Brown)\r\n    const titleColor = 'text-[#8B4513]'; // Logo/Batch text (Darker Brown)\r\n    const tabActiveBorderColor = 'border-[#8B4513]'; // Active tab underline color\r\n    const tabInactiveTextColor = 'text-gray-500'; // Inactive tab text color\r\n    const tabHoverTextColor = 'hover:text-[#8B4513]'; // Tab hover text color\r\n    const resultValueBg = 'bg-gray-200'; // Background for result value boxes\r\n\r\n    // --- JSX Rendering ---\r\n    return (\r\n        // Main container div applying background, text color, and padding\r\n        <div className='growth-simulation'>\r\n            <div className=\"logobox\"> {/* Consider adding a back button here or near logo */}\r\n                 <button onClick={handleBackClick} className=\"back-button\" title=\"Back to Home\"> {/* Simple Back Button Example */}\r\n                    &larr; {/* Left arrow */}\r\n                </button>\r\n                <div className=\"logo\">\r\n                    <img src={logoSrc} alt=\"Logo\" /> {/* Adjusted class usage */}\r\n                </div>\r\n              </div>\r\n            {/* Header Section */}\r\n            <header className=\"mb-6 md:mb-10\">\r\n                 {/* Flex container for header content */}\r\n                 <div className=\"flex justify-between items-start\"> {/* Align items to top */}\r\n                     {/* Left Side: Logo, Batch, Start Date */}\r\n                     <div>\r\n                         <div className={`text-lg font-semibold ${titleColor} mb-1`}>CITY SPROUTS</div>\r\n                         <div className={`text-base font-medium ${titleColor} mb-1`}>Batch: #{batchName}</div>\r\n                         <div className={`text-sm ${textColor}`}>Start Date: {startDate}</div>\r\n                     </div>\r\n\r\n                     {/* Right Side: Chart Tabs */}\r\n                     <div className=\"flex space-x-1 border-b border-gray-300\"> {/* Tab container */}\r\n                         {/* Yield Tab Button */}\r\n                         <button\r\n                             onClick={() => setActiveChartTab('yield')}\r\n                             // Dynamic classes for active/inactive state\r\n                             className={`py-2 px-4 text-sm font-medium transition duration-200 ${\r\n                                 activeChartTab === 'yield'\r\n                                 ? `${tabActiveBorderColor} ${titleColor} border-b-2` // Active style\r\n                                 : `${tabInactiveTextColor} ${tabHoverTextColor} border-b-2 border-transparent` // Inactive style\r\n                             }`}>\r\n                             Yield over Time\r\n                         </button>\r\n                         {/* Temperature Tab Button */}\r\n                         <button\r\n                              onClick={() => setActiveChartTab('temp')}\r\n                              // Dynamic classes for active/inactive state\r\n                              className={`py-2 px-4 text-sm font-medium transition duration-200 ${\r\n                                  activeChartTab === 'temp'\r\n                                  ? `${tabActiveBorderColor} ${titleColor} border-b-2` // Active style\r\n                                  : `${tabInactiveTextColor} ${tabHoverTextColor} border-b-2 border-transparent` // Inactive style\r\n                              }`}>\r\n                              Temperature\r\n                          </button>\r\n                         {/* pH Tab Button remains removed based on previous logic */}\r\n                     </div>\r\n                 </div>\r\n                 {/* Optional: Add Back button here using handleBackClick if needed */}\r\n                 {/* <button onClick={handleBackClick} className=\"mt-4 bg-blue-500 text-white py-1 px-3 rounded\">Back</button> */}\r\n            </header>\r\n\r\n            {/* Main Content Grid (1 column on small screens, 3 on medium+) */}\r\n            <main className=\"grid grid-cols-1 md:grid-cols-3 gap-6 md:gap-8\">\r\n\r\n                {/* Left Column: Animation Placeholder */}\r\n                {/* Spans 1 column on medium+ screens */}\r\n                <div className={`md:col-span-1 ${boxBgColor} p-5 rounded-xl shadow-md border border-gray-200 flex items-center justify-center min-h-[40vh] md:min-h-[60vh]`}>\r\n                    {/* Simple placeholder text */}\r\n                    <span className=\"text-gray-400 text-lg\">Chart</span>\r\n                </div>\r\n\r\n                {/* Right Column: Chart & Results */}\r\n                {/* Spans 2 columns on medium+ screens */}\r\n                <div className=\"md:col-span-2 space-y-6\"> {/* Adds vertical space between chart and results */}\r\n\r\n                    {/* Chart Area */}\r\n                    <div className={`${boxBgColor} p-4 rounded-lg shadow-md border border-gray-200`}>\r\n                         {/* Conditional Rendering based on loading/error state */}\r\n                         {isLoading && <p className=\"text-center p-10\">Loading and running simulation...</p>}\r\n                         {error && <p className=\"text-center p-10 text-red-600\">Error: {error}</p>}\r\n                         {!isLoading && !error && simulationResults && (\r\n                             // Only render chart if data is available\r\n                             chartConfig.data.datasets.length > 0 ? (\r\n                                 <div className=\"chart-container relative h-[35vh] w-full\"> {/* Container to control chart size */}\r\n                                     <Line options={chartConfig.options} data={chartConfig.data} />\r\n                                 </div>\r\n                             ) : (\r\n                                  // Message if simulation ran but produced no chartable data for the tab\r\n                                  <p className=\"text-center p-10 text-gray-500\">No data available for this chart.</p>\r\n                              )\r\n                         )}\r\n                         {/* Message if simulation results are null (e.g., initial load failed before simulation) */}\r\n                         {!isLoading && !error && !simulationResults && <p className=\"text-center p-10\">No simulation results available.</p>}\r\n\r\n                         {/* Static Warning Text */}\r\n                         <p className=\"text-xs text-orange-600 italic text-center mt-3 px-4\">\r\n                             Warning: Simulation logic may be incomplete. Ensure all equations in the 'derivatives' function are accurate.\r\n                         </p>\r\n                    </div>\r\n\r\n                    {/* Results Section */}\r\n                    <div className={`${boxBgColor} p-5 rounded-xl shadow-md border border-gray-200`}>\r\n                        {/* Results Title with Info Icon */}\r\n                        <h3 className={`text-lg font-semibold ${textColor} mb-3 flex items-center`}>\r\n                            Results\r\n                            {/* Simple info icon with tooltip */}\r\n                            <span className=\"ml-2 text-xs text-gray-500 cursor-help\" title=\"Key simulation outputs based on initial conditions\">(i)</span>\r\n                        </h3>\r\n                        {/* Container for result rows */}\r\n                        <div className=\"space-y-2 text-sm\">\r\n                            {/* Projected Yield Row */}\r\n                            <div className=\"flex justify-between items-center\">\r\n                                 <span className=\"font-medium mr-2\">Projected Yield:</span>\r\n                                {/* Value displayed in a styled box */}\r\n                                <span className={`${resultValueBg} px-3 py-1 rounded text-right min-w-[80px]`}>\r\n                                    {/* Display loading indicator, error, formatted yield, or N/A */}\r\n                                    {isLoading ? '...' : error ? 'Error' : Number.isFinite(finalSimulatedYield) ? `${finalSimulatedYield.toFixed(2)}g` : 'N/A'}\r\n                                </span>\r\n                            </div>\r\n                            {/* C:N Ratio Row */}\r\n                            <div className=\"flex justify-between items-center\">\r\n                                 <span className=\"font-medium mr-2\">C:N Ratio:</span>\r\n                                {/* Value displayed in a styled box */}\r\n                                <span className={`${resultValueBg} px-3 py-1 rounded text-right min-w-[80px]`}>\r\n                                     {/* Display loading indicator, error, formatted ratio, or N/A */}\r\n                                    {isLoading ? '...' : error ? 'Error' : initialCNRatio ? initialCNRatio.toFixed(2) : 'N/A'}\r\n                                </span>\r\n                            </div>\r\n                            {/* Add more result rows here if needed */}\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </main>\r\n        </div>\r\n    );\r\n};\r\n\r\n// Export the component for use in other parts of the application\r\nexport default GrowthSimulation;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}