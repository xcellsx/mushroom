{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\celst\\\\sds\\\\src\\\\components\\\\GrowthSimulation.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { Line } from 'react-chartjs-2';\nimport { Chart as ChartJS, LineElement, PointElement, Tooltip, Legend, CategoryScale, LinearScale, Title } from 'chart.js';\nimport odeRK4 from 'ode-rk4';\nimport '../styles/GrowthSimulation.css'; // Ensure this path is correct\nimport logoSrc from '../assets/images/cslogo.png'; // Ensure this path is correct\n\n// --- Simulation Logic & ChartJS Registration ---\n\n// *** Default Parameters for MUSHROOM Growth (Based on original Model.json) ***\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst defaultParamsMushroom = {\n  timeStart: 0,\n  timeLength: 100,\n  timeStep: 0.2,\n  'C BD Rate': 1.11,\n  'C Coeff': 0.7,\n  'C Cons. Rate': 76.39,\n  'CO2 Coeff': 0.8,\n  'CO2 Production Rate': 410000,\n  'CO2 Removal Rate': 12.6,\n  'External CO2': 428.23,\n  'External Temp': 24,\n  'Growth Coeff': 5.1,\n  // 'Initial C:N Ratio': 43.58, // Overridden by FIXED_CN_RATIO\n  'Initial Complex:Simple Ratio': 0.8054,\n  'Initial Dry Substrate Weight': 410.2,\n  // Default fallback weight\n  'IsMush': 1,\n  // <<< Mushroom phase\n  'Mushroom Multiplier': 5.17,\n  'N Coeff': 68.4,\n  'N Rate': 13.03,\n  'pH': 6.91,\n  // Default fallback pH\n  'pH Coeff': 1.4,\n  'Temp Coeff': 1.3,\n  'Temp Production Rate': 405,\n  'Temp Transfer Rate': 1.5,\n  'Effect of CO2 on Mush Growth Data': [[500, 0.9], [800, 1], [1000, 0.8], [1200, 0.25], [1400, 0]],\n  'Effect of CO2 on Myc Growth Data': [[15000, 1], [20000, 0.9], [25000, 0.25], [30000, 0]],\n  'Effect of pH on Mush Growth Data': [[5.5, 0], [6, 0.25], [6.7, 1], [7, 0.6], [7.5, 0]],\n  'Effect of pH on Myc Growth Data': [[5.8, 0], [6, 0.25], [6.7, 1], [7, 0.6], [7.5, 0]],\n  'Effect of Temp on Mush Growth Data': [[10, 0], [15, 5.37], [20, 6.36], [25, 8.63], [30, 6.37], [40, 0]],\n  'Effect of Temp on Myc Growth Data': [[10, 0], [15, 5.37], [20, 6.36], [25, 8.63], [30, 6.37], [35, 5.36], [45, 0]],\n  // Define a potential default starting Mycelium for this phase if needed\n  'Initial Mycelium': 0.9 // Example: Assume high colonization before fruiting\n};\n\n// *** Default Parameters for MYCELIUM Growth (Based on Model (1).json) ***\nconst defaultParamsMycelium = {\n  timeStart: 0,\n  timeLength: 100,\n  timeStep: 0.2,\n  'C BD Rate': 1.11,\n  'C Coeff': 0.7,\n  'C Cons. Rate': 76.39,\n  'CO2 Coeff': 0.8,\n  'CO2 Production Rate': 410000,\n  'CO2 Removal Rate': 1,\n  'External CO2': 428.23,\n  'External Temp': 28,\n  'Growth Coeff': 5.4,\n  'Initial C:N Ratio': 44.3652,\n  // Overridden by FIXED_CN_RATIO\n  'Initial Complex:Simple Ratio': 0.867,\n  'Initial Dry Substrate Weight': 200,\n  // Default fallback weight\n  'IsMush': 0,\n  // <<< Mycelium phase\n  'Mushroom Multiplier': 26,\n  'N Coeff': 68.4,\n  'N Rate': 1.53,\n  'pH': 6.91,\n  // Default fallback pH\n  'pH Coeff': 1.4,\n  'Temp Coeff': 1.7,\n  'Temp Production Rate': 255,\n  'Temp Transfer Rate': 1.5,\n  'Effect of CO2 on Mush Growth Data': [[500, 0.9], [800, 1], [1000, 0.8], [1200, 0.25], [1400, 0]],\n  'Effect of CO2 on Myc Growth Data': [[15000, 1], [20000, 0.9], [25000, 0.25], [30000, 0]],\n  'Effect of pH on Mush Growth Data': [[5.5, 0], [6, 0.25], [6.7, 1], [7, 0.6], [7.5, 0]],\n  'Effect of pH on Myc Growth Data': [[5.8, 0], [6, 0.25], [6.7, 1], [7, 0.6], [7.5, 0]],\n  'Effect of Temp on Mush Growth Data': [[10, 0], [15, 5.37], [20, 6.36], [25, 8.63], [30, 6.37], [40, 0]],\n  'Effect of Temp on Myc Growth Data': [[10, 0], [15, 5.37], [20, 6.36], [25, 8.63], [30, 6.37], [35, 5.36], [45, 0]],\n  // Define a potential default starting Mycelium for this phase\n  'Initial Mycelium': 0.004 // From Model(1).json\n};\n\n// FIXED C:N Ratio as previously requested\nconst FIXED_CN_RATIO = 0.96;\n\n// --- Simulation Functions ---\n\nfunction linearInterpolate(data, x) {\n  if (!data || data.length === 0) return 0;\n  if (x <= data[0][0]) return data[0][1];\n  if (x >= data[data.length - 1][0]) return data[data.length - 1][1];\n  let i = 0;\n  while (i < data.length - 1 && x > data[i + 1][0]) i++;\n  const x0 = data[i][0],\n    y0 = data[i][1],\n    x1 = data[i + 1][0],\n    y1 = data[i + 1][1];\n  const divisor = x1 - x0;\n  if (divisor === 0) return y0;\n  const t = (x - x0) / divisor;\n  return y0 + t * (y1 - y0);\n}\nfunction derivatives(dydt, y, t, currentParams) {\n  const [currentCO2, currentComplexC, currentMushroomYield, currentMycelium, currentN, currentSimpleC, currentSpace, currentTemp] = y;\n  const initialDrySubstrateWeight = currentParams['Initial Dry Substrate Weight'] || 1;\n  const cnRatio = currentParams['Initial C:N Ratio'];\n  const cnRatioPlusOne = cnRatio + 1;\n  // InitC depends on weight and *actual* C:N ratio used\n  const InitC = initialDrySubstrateWeight - initialDrySubstrateWeight / cnRatioPlusOne;\n  // Available N/C depend on the current state of N and SimpleC stocks\n  const AvailableN = initialDrySubstrateWeight > 0 ? currentN / initialDrySubstrateWeight : 0;\n  const AvailableC = initialDrySubstrateWeight > 0 ? currentSimpleC / initialDrySubstrateWeight : 0;\n  const NEffect = currentParams['N Coeff'] * AvailableN;\n  const CEffect = Math.sqrt(Math.max(0, currentParams['C Coeff'] * AvailableC));\n  const VolumeNormalisation = initialDrySubstrateWeight > 0 ? Math.sqrt(100 / initialDrySubstrateWeight) : Math.sqrt(100); // Avoid division by zero\n\n  // Effects based on interpolation\n  const Effect_of_CO2_on_Mush_Growth = linearInterpolate(currentParams['Effect of CO2 on Mush Growth Data'], currentCO2);\n  const Effect_of_CO2_on_Myc_Growth = linearInterpolate(currentParams['Effect of CO2 on Myc Growth Data'], currentCO2);\n  const Effect_of_pH_on_Mush_Growth = linearInterpolate(currentParams['Effect of pH on Mush Growth Data'], currentParams['pH']);\n  const Effect_of_pH_on_Myc_Growth = linearInterpolate(currentParams['Effect of pH on Myc Growth Data'], currentParams['pH']);\n  const Effect_of_Temp_on_Mush_Growth = linearInterpolate(currentParams['Effect of Temp on Mush Growth Data'], currentTemp);\n  const Effect_of_Temp_on_Myc_Growth = linearInterpolate(currentParams['Effect of Temp on Myc Growth Data'], currentTemp);\n\n  // Calculate combined effects based on IsMush flag\n  const TempEff_ = currentParams['IsMush'] === 0 ? Effect_of_Temp_on_Myc_Growth : Effect_of_Temp_on_Mush_Growth;\n  const TempEffect = currentParams['Temp Coeff'] * TempEff_ / 10;\n  const pHEff_ = currentParams['IsMush'] === 0 ? Effect_of_pH_on_Myc_Growth : Effect_of_pH_on_Mush_Growth;\n  const pHEffect = pHEff_ * currentParams['pH Coeff'];\n  const CO2Eff_ = currentParams['IsMush'] === 0 ? Effect_of_CO2_on_Myc_Growth : Effect_of_CO2_on_Mush_Growth;\n  const CO2Effect = currentParams['CO2 Coeff'] * CO2Eff_;\n\n  // Ensure effects are non-negative before combining\n  const safeTempEffect = Math.max(0, TempEffect);\n  const safePhEffect = Math.max(0, pHEffect);\n  const safeNEffect = Math.max(0, NEffect);\n  const safeCEffect = Math.max(0, CEffect); // CEffect already handles sqrt(neg) via Math.max\n  const safeCO2Effect = Math.max(0, CO2Effect);\n  const RawGrowthRate = safeTempEffect * safePhEffect * safeNEffect * safeCEffect * safeCO2Effect;\n  const GrowthOpp = currentSpace * currentMycelium; // Space and Mycelium are state variables\n\n  let GrowthRate = currentParams['IsMush'] === 1 ? RawGrowthRate * currentParams['Growth Coeff'] : RawGrowthRate * GrowthOpp * currentParams['Growth Coeff'];\n  GrowthRate = Math.max(0, GrowthRate); // Ensure non-negative growth rate\n\n  let NormGrowthRate = currentParams['IsMush'] === 1 ? GrowthRate / 100 : GrowthRate;\n\n  // Calculate Flows\n  const flow_Breakdown = Math.max(0, currentMycelium * currentParams['C BD Rate'] * currentComplexC * RawGrowthRate * VolumeNormalisation);\n  const flow_CCons = Math.max(0, NormGrowthRate * currentParams['C Cons. Rate']);\n  const flow_CO2Prod = Math.max(0, NormGrowthRate * currentParams['CO2 Production Rate']);\n  const flow_CO2Vent = Math.max(0, currentParams['CO2 Removal Rate'] * (currentCO2 - currentParams['External CO2']) * VolumeNormalisation);\n  const flow_Colonisation = currentParams['IsMush'] === 0 ? GrowthRate : 0; // Already non-negative\n  const flow_MushroomGrowth = currentParams['IsMush'] === 1 ? Math.max(0, GrowthRate * currentParams['Mushroom Multiplier']) : 0;\n  const flow_NCons = Math.max(0, NormGrowthRate * currentParams['N Rate']);\n  const flow_TempProd = Math.max(0, NormGrowthRate * currentParams['Temp Production Rate']);\n  const flow_TempVent = Math.max(0, (currentTemp - currentParams['External Temp']) * currentParams['Temp Transfer Rate'] * VolumeNormalisation);\n\n  // Assign derivatives (rate of change for stocks)\n  dydt[0] = flow_CO2Prod - flow_CO2Vent; // dCO2/dt\n  dydt[1] = -flow_Breakdown; // dComplexC/dt\n  dydt[2] = flow_MushroomGrowth; // dMushroomYield/dt\n  dydt[3] = flow_Colonisation; // dMycelium/dt\n  dydt[4] = -flow_NCons; // dN/dt\n  dydt[5] = flow_Breakdown - flow_CCons; // dSimpleC/dt\n  dydt[6] = -flow_Colonisation; // dSpace/dt\n  dydt[7] = flow_TempProd - flow_TempVent; // dTemp/dt\n\n  // Apply non-negative constraints AFTER calculating net change\n  if (currentCO2 <= 1e-9 && dydt[0] < 0) dydt[0] = 0; // Use small threshold\n  if (currentComplexC <= 1e-9 && dydt[1] < 0) dydt[1] = 0;\n  if (currentMushroomYield <= 1e-9 && dydt[2] < 0) dydt[2] = 0;\n  if (currentMycelium <= 1e-9 && dydt[3] < 0) dydt[3] = 0;\n  if (currentN <= 1e-9 && dydt[4] < 0) dydt[4] = 0;\n  if (currentSimpleC <= 1e-9 && dydt[5] < 0) dydt[5] = 0;\n  if (currentSpace <= 1e-9 && dydt[6] < 0) dydt[6] = 0;\n  if (currentTemp <= 1e-9 && dydt[7] < 0) dydt[7] = 0; // Allow temp to drop but not below absolute zero conceptually\n}\nfunction getInitialState(p, initialMyceliumValue) {\n  const initialDrySubstrateWeight = Number(p['Initial Dry Substrate Weight']);\n  const cnRatio = Number(p['Initial C:N Ratio']);\n  const complexSimpleRatio = Number(p['Initial Complex:Simple Ratio']);\n\n  // Basic validation\n  if (isNaN(initialDrySubstrateWeight) || initialDrySubstrateWeight <= 0 || isNaN(cnRatio) || isNaN(complexSimpleRatio)) {\n    console.error(\"Invalid parameters for getInitialState:\", p);\n    // Return a default state to avoid crashing, though simulation might be meaningless\n    return [400, 200, 0, 0.01, 10, 50, 0.99, 25];\n  }\n  const cnRatioPlusOne = cnRatio + 1;\n  const Init_C = initialDrySubstrateWeight - initialDrySubstrateWeight / cnRatioPlusOne;\n  const initialSpace = Math.max(0, 1 - initialMyceliumValue); // Ensure space isn't negative\n\n  return [Number(p['External CO2']), Init_C * complexSimpleRatio, 0, initialMyceliumValue, initialDrySubstrateWeight / cnRatioPlusOne, Init_C * (1 - complexSimpleRatio), initialSpace, Number(p['External Temp'])];\n}\nfunction runSimulation(inputParams, defaultParamSet) {\n  var _currentParams$Initia, _currentParams$Initia2;\n  // Ensure defaultParamSet is provided\n  if (!defaultParamSet) {\n    console.error(\"runSimulation called without defaultParamSet!\");\n    return []; // Or throw an error\n  }\n\n  // Merge parameters carefully\n  const currentParams = {\n    ...defaultParamSet,\n    // Start with the specified default set\n    ...inputParams,\n    // Override with inputs from localStorage (Temp, pH, Weight, Duration etc)\n    'Initial C:N Ratio': FIXED_CN_RATIO // Force the C:N Ratio\n  };\n\n  // Resolve final values for initial state calculation, falling back to currentParams (which includes defaults)\n  const finalInitialWeight = Number(currentParams['Initial Dry Substrate Weight']);\n  const finalCNRatio = Number(currentParams['Initial C:N Ratio']);\n  const finalComplexSimpleRatio = Number(currentParams['Initial Complex:Simple Ratio']);\n  const finalExternalCO2 = Number(currentParams['External CO2']);\n  const finalExternalTemp = Number(currentParams['External Temp']);\n\n  // Determine initial mycelium based on the phase defined in currentParams\n  const initialMyceliumValue = currentParams['IsMush'] === 0 ? (_currentParams$Initia = currentParams['Initial Mycelium']) !== null && _currentParams$Initia !== void 0 ? _currentParams$Initia : 0.004 // Use default from the set or fallback\n  : (_currentParams$Initia2 = currentParams['Initial Mycelium']) !== null && _currentParams$Initia2 !== void 0 ? _currentParams$Initia2 : 0.9; // Use default from the set or fallback\n\n  // Prepare parameters needed ONLY for getInitialState\n  const initialStateParams = {\n    'Initial Dry Substrate Weight': finalInitialWeight,\n    'Initial C:N Ratio': finalCNRatio,\n    'Initial Complex:Simple Ratio': finalComplexSimpleRatio,\n    'External CO2': finalExternalCO2,\n    'External Temp': finalExternalTemp\n  };\n  const y0 = getInitialState(initialStateParams, initialMyceliumValue);\n  const t0 = currentParams.timeStart;\n  const dt = currentParams.timeStep;\n  const timeLength = Math.max(0, Number(currentParams.timeLength)); // Ensure timeLength is a number\n  const positiveDt = Math.max(dt, 1e-6);\n  const numSteps = timeLength > 0 && positiveDt > 0 ? Math.floor(timeLength / positiveDt) : 0;\n  const derivativeFuncForSolver = (dydt, y, t) => {\n    try {\n      derivatives(dydt, y, t, currentParams);\n    } // Pass the full currentParams here\n    catch (e) {\n      console.error(\"Error in derivatives:\", e);\n      dydt.fill(0);\n    }\n  };\n  const integrator = odeRK4(y0, derivativeFuncForSolver, t0, positiveDt);\n  const results = [{\n    time: integrator.t,\n    state: [...integrator.y]\n  }];\n  const simType = currentParams['IsMush'] === 0 ? 'Mycelium' : 'Mushroom';\n  console.log(`Starting ${simType} simulation for ${timeLength} days.`); // Removed params logging for brevity\n\n  if (numSteps <= 0) {\n    console.warn(`${simType} Sim: length/step 0.`);\n    return [];\n  }\n  for (let i = 0; i < numSteps; i++) {\n    try {\n      integrator.step();\n      if (integrator.y.some(val => !Number.isFinite(val))) {\n        console.error(`${simType} Sim: unstable t=`, integrator.t.toFixed(2));\n        // Stop potentially infinite loops if state becomes NaN\n        if (i > numSteps * 2) {\n          // Heuristic check for runaway loop\n          console.error(`${simType} Sim: Terminating possibly infinite loop due to instability.`);\n          break;\n        }\n      }\n      results.push({\n        time: integrator.t,\n        state: [...integrator.y]\n      });\n    } catch (solverError) {\n      console.error(`${simType} Sim: RK4 step error:`, solverError);\n      break;\n    }\n  }\n  console.log(`${simType} simulation finished.`);\n  return results.map(p => ({\n    time: p.time,\n    CO2: p.state[0],\n    ComplexC: p.state[1],\n    MushroomYield: p.state[2],\n    Mycelium: p.state[3],\n    N: p.state[4],\n    SimpleC: p.state[5],\n    Space: p.state[6],\n    Temp: p.state[7]\n  }));\n}\n// --- (End of Simulation Functions) ---\n\n// Register ChartJS components\nChartJS.register(LineElement, PointElement, Tooltip, Legend, CategoryScale, LinearScale, Title);\n\n// Helper function to format date\nfunction formatDate_DDMMYYYY(dateString) {\n  if (!dateString || dateString === 'N/A' || !/^\\d{4}-\\d{2}-\\d{2}$/.test(dateString)) {\n    return 'N/A';\n  }\n  try {\n    const [year, month, day] = dateString.split('-');\n    return `${day}-${month}-${year}`;\n  } catch (e) {\n    console.error(\"Error formatting date:\", e);\n    return 'N/A';\n  }\n}\n\n// --- React Component ---\nconst GrowthSimulation = () => {\n  _s();\n  const navigate = useNavigate();\n  const [simulationResultsMushroom, setSimulationResultsMushroom] = useState(null);\n  const [simulationResultsMycelium, setSimulationResultsMycelium] = useState(null);\n  const [isLoading, setIsLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [batchName, setBatchName] = useState('');\n  const [startDate, setStartDate] = useState('');\n  const [finalSimulatedYield, setFinalSimulatedYield] = useState(null);\n  const [activeChartTab, setActiveChartTab] = useState('yield');\n  const LOCAL_STORAGE_KEYS = {\n    TEMPERATURE: 'sim_temperature',\n    PH: 'sim_ph',\n    SUBSTRATE: 'sim_substrate',\n    SIMULATION_DAYS: 'sim_duration',\n    BATCH_NAME: 'sim_batch_name',\n    START_DATE: 'sim_start_date'\n  };\n  useEffect(() => {\n    let isMounted = true;\n    setIsLoading(true);\n    setError(null);\n    setFinalSimulatedYield(null);\n    setSimulationResultsMushroom(null);\n    setSimulationResultsMycelium(null);\n    const runSimulationsAsync = async () => {\n      await new Promise(resolve => setTimeout(resolve, 50)); // Short delay\n      if (!isMounted) return;\n      let savedTempStr, savedPhStr, savedSubstrateJson, savedDaysStr, savedBatchName, savedStartDate;\n      try {\n        // Load parameters from localStorage\n        savedTempStr = localStorage.getItem(LOCAL_STORAGE_KEYS.TEMPERATURE);\n        savedPhStr = localStorage.getItem(LOCAL_STORAGE_KEYS.PH);\n        savedSubstrateJson = localStorage.getItem(LOCAL_STORAGE_KEYS.SUBSTRATE);\n        savedDaysStr = localStorage.getItem(LOCAL_STORAGE_KEYS.SIMULATION_DAYS);\n        savedBatchName = localStorage.getItem(LOCAL_STORAGE_KEYS.BATCH_NAME) || 'N/A';\n        savedStartDate = localStorage.getItem(LOCAL_STORAGE_KEYS.START_DATE) || 'N/A';\n        if (isMounted) {\n          setBatchName(savedBatchName);\n          setStartDate(savedStartDate);\n        }\n\n        // Validate required parameters BEFORE parsing\n        if (savedTempStr === null || savedPhStr === null || savedSubstrateJson === null || savedDaysStr === null) {\n          const missing = [/*...*/].filter(Boolean).join(', '); // Construct missing list\n          throw new Error(`Missing required parameters: ${missing}. Please set in Condition Settings.`);\n        }\n\n        // Parse values\n        const temp = parseFloat(savedTempStr);\n        const phValue = parseFloat(savedPhStr);\n        const days = parseInt(savedDaysStr, 10);\n        let substrateData = null;\n        let initialWeight = 0;\n        try {\n          substrateData = JSON.parse(savedSubstrateJson);\n          if (typeof substrateData !== 'object' || substrateData === null) throw new Error(\"Invalid substrate format.\");\n          initialWeight = Object.values(substrateData).reduce((sum, val) => sum + (Number(val) || 0), 0);\n          if (initialWeight <= 0) console.warn(\"Initial substrate weight is zero or negative.\");\n        } catch (parseError) {\n          throw new Error(`Invalid substrate data: ${parseError.message}`);\n        }\n        if (isNaN(temp) || isNaN(phValue) || isNaN(initialWeight) || isNaN(days)) {\n          throw new Error(\"Invalid numerical parameters loaded.\");\n        }\n        const simulationDuration = days > 0 ? days : defaultParamsMushroom.timeLength;\n\n        // Base inputs common to both simulations\n        const simulationInputs = {\n          'External Temp': temp,\n          'pH': phValue,\n          'Initial Dry Substrate Weight': initialWeight,\n          // Use calculated weight directly\n          'timeLength': simulationDuration\n        };\n\n        // --- Run BOTH simulations ---\n        console.log(\"Running Mushroom Simulation...\");\n        const resultsMushroom = runSimulation(simulationInputs,\n        // Pass only required overrides\n        defaultParamsMushroom // Pass mushroom defaults\n        );\n        console.log(\"Running Mycelium Simulation...\");\n        const resultsMycelium = runSimulation(simulationInputs,\n        // Pass only required overrides\n        defaultParamsMycelium // Pass mycelium defaults\n        );\n        if (isMounted) {\n          setSimulationResultsMushroom(resultsMushroom);\n          setSimulationResultsMycelium(resultsMycelium);\n          if (resultsMushroom && resultsMushroom.length > 0) {\n            const lastMushroomResult = resultsMushroom[resultsMushroom.length - 1];\n            if (lastMushroomResult && Number.isFinite(lastMushroomResult.MushroomYield)) {\n              setFinalSimulatedYield(lastMushroomResult.MushroomYield);\n            }\n          }\n          console.log(\"Both simulations complete.\");\n        }\n      } catch (err) {\n        console.error(\"Error during simulation setup or run:\", err);\n        if (isMounted) setError(err.message || \"Failed to run simulation.\");\n      } finally {\n        if (isMounted) setIsLoading(false);\n      }\n    };\n    runSimulationsAsync();\n    return () => {\n      isMounted = false;\n    };\n  }, []);\n  const handleBackClick = () => {\n    navigate('/condition-setting');\n  };\n  const getChartConfig = () => {\n    var _chartData$time, _chartData;\n    const currentResultsSource = activeChartTab === 'mycelium' ? simulationResultsMycelium : simulationResultsMushroom;\n\n    // Default options setup\n    const yieldColor = '#2E7D32';\n    const tempColor = '#C62828';\n    const myceliumColor = '#1976D2';\n    const textColor = '#333';\n    const gridColor = 'rgba(0, 0, 0, 0.08)';\n    const options = {\n      responsive: true,\n      maintainAspectRatio: false,\n      plugins: {\n        /* ... legend, tooltip, title ... */\n        legend: {\n          display: true,\n          labels: {\n            color: textColor,\n            font: {\n              family: 'Lexend'\n            }\n          }\n        },\n        tooltip: {\n          enabled: true,\n          bodyFont: {\n            family: 'Lexend'\n          },\n          titleFont: {\n            family: 'Lexend'\n          }\n        },\n        title: {\n          display: true,\n          text: '',\n          color: textColor,\n          font: {\n            size: 16,\n            family: 'Lexend'\n          }\n        }\n      },\n      scales: {\n        x: {\n          type: 'linear',\n          title: {\n            display: true,\n            text: 'Time (Days)',\n            color: textColor,\n            font: {\n              family: 'Lexend'\n            }\n          },\n          ticks: {\n            color: textColor,\n            font: {\n              family: 'Lexend'\n            }\n          },\n          grid: {\n            color: gridColor\n          },\n          min: 0,\n          max: undefined\n        },\n        // Initialize max\n        yYield: {\n          /* ... */display: false\n        },\n        yTemp: {\n          /* ... */display: false\n        },\n        yMycelium: {\n          type: 'linear',\n          position: 'left',\n          title: {\n            display: true,\n            text: 'Mycelium Density',\n            color: myceliumColor,\n            font: {\n              family: 'Lexend'\n            }\n          },\n          ticks: {\n            color: myceliumColor,\n            font: {\n              family: 'Lexend'\n            }\n          },\n          grid: {\n            drawOnChartArea: false\n          },\n          beginAtZero: true,\n          suggestedMax: 1,\n          display: false\n        }\n      }\n    };\n    options.scales.yYield.display = false;\n    options.scales.yTemp.display = false;\n    options.scales.yMycelium.display = false; // Reset\n\n    if (!currentResultsSource || currentResultsSource.length === 0) {\n      return {\n        data: {\n          datasets: []\n        },\n        options: options\n      };\n    }\n    let datasets = [];\n    let chartData = [...currentResultsSource]; // Copy source data\n\n    switch (activeChartTab) {\n      case 'yield':\n        options.plugins.title.text = 'Yield Over Time (Mushroom Sim)';\n        options.scales.yYield.display = true;\n        datasets = [{\n          label: 'Mushroom Yield (g)',\n          data: chartData.map(p => ({\n            x: p.time,\n            y: Number.isFinite(p.MushroomYield) ? p.MushroomYield : null\n          })),\n          borderColor: yieldColor,\n          backgroundColor: 'rgba(46, 125, 50, 0.1)',\n          yAxisID: 'yYield'\n        }];\n        break;\n      case 'temp':\n        options.plugins.title.text = 'Temperature Over Time (Mushroom Sim)';\n        options.scales.yTemp.display = true;\n        datasets = [{\n          label: 'Temperature (°C)',\n          data: chartData.map(p => ({\n            x: p.time,\n            y: Number.isFinite(p.Temp) ? p.Temp : null\n          })),\n          borderColor: tempColor,\n          backgroundColor: 'rgba(198, 40, 40, 0.1)',\n          yAxisID: 'yTemp'\n        }];\n        break;\n      case 'mycelium':\n        options.plugins.title.text = 'Mycelium Growth (Mycelium Sim)';\n        options.scales.yMycelium.display = true;\n\n        // *** Logic to find cutoff point ***\n        let cutoffIndex = chartData.findIndex(p => p.Mycelium >= 0.9);\n        let finalTime = (_chartData$time = (_chartData = chartData[chartData.length - 1]) === null || _chartData === void 0 ? void 0 : _chartData.time) !== null && _chartData$time !== void 0 ? _chartData$time : 0; // Default to last time point\n        let cutoffReason = \"Simulation End\"; // Default reason\n\n        if (cutoffIndex !== -1) {\n          var _chartData$time2, _chartData2;\n          // Cut off at or after the 0.9 threshold is met\n          chartData = chartData.slice(0, cutoffIndex + 1);\n          finalTime = (_chartData$time2 = (_chartData2 = chartData[chartData.length - 1]) === null || _chartData2 === void 0 ? void 0 : _chartData2.time) !== null && _chartData$time2 !== void 0 ? _chartData$time2 : finalTime; // Time at cutoff\n          cutoffReason = \"Mycelium >= 0.9\";\n          console.log(`Mycelium chart cutoff at index ${cutoffIndex}, time ${finalTime.toFixed(2)} (Threshold 0.9 reached)`);\n        } else {\n          // Threshold 0.9 NOT met, check for day 30 cutoff\n          const day30Index = chartData.findIndex(p => p.time >= 30);\n          if (day30Index !== -1) {\n            var _chartData$time3, _chartData3;\n            // Cut off at or after day 30 is met\n            chartData = chartData.slice(0, day30Index + 1);\n            finalTime = (_chartData$time3 = (_chartData3 = chartData[chartData.length - 1]) === null || _chartData3 === void 0 ? void 0 : _chartData3.time) !== null && _chartData$time3 !== void 0 ? _chartData$time3 : finalTime; // Time at day 30 (or just after)\n            cutoffReason = \"Day 30 Limit\";\n            console.log(`Mycelium chart cutoff at index ${day30Index}, time ${finalTime.toFixed(2)} (Day 30 limit)`);\n          } else {\n            // Less than 30 days simulated AND threshold not met, show all data\n            console.log(`Mycelium threshold 0.9 not reached and simulation ended before day 30 (t=${finalTime.toFixed(2)}). Showing all data.`);\n            // finalTime is already set to the last available time\n          }\n        }\n\n        // Set max time for X-axis\n        options.scales.x.max = finalTime;\n\n        // Set chart title indicating cutoff if not full duration\n        if (cutoffReason !== \"Simulation End\") {\n          options.plugins.title.text += ` (Stopped at ${cutoffReason})`;\n        }\n        datasets = [{\n          label: 'Mycelium Density',\n          data: chartData.map(p => ({\n            x: p.time,\n            y: Number.isFinite(p.Mycelium) ? p.Mycelium : null\n          })),\n          borderColor: myceliumColor,\n          backgroundColor: 'rgba(25, 118, 210, 0.1)',\n          yAxisID: 'yMycelium'\n        }];\n        break;\n      default:\n        datasets = [];\n    }\n    return {\n      data: {\n        datasets: datasets && datasets.length > 0 ? datasets.map(ds => ({\n          ...ds,\n          tension: 0.1,\n          pointRadius: 2,\n          spanGaps: true\n        })) : []\n      },\n      options: options\n    };\n  };\n  const chartConfig = getChartConfig();\n  const simulationDataReady = simulationResultsMushroom || simulationResultsMycelium;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"growth-simulation\",\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"simulation-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"logobox\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleBackClick,\n          className: \"back-button\",\n          title: \"Back to Settings\",\n          children: \"\\u2190\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 505,\n          columnNumber: 23\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"logo\",\n          children: /*#__PURE__*/_jsxDEV(\"img\", {\n            src: logoSrc,\n            alt: \"City Sprouts Logo\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 506,\n            columnNumber: 44\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 506,\n          columnNumber: 22\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 504,\n        columnNumber: 18\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"batch-info\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"batch-name\",\n          children: [\"Batch: \", batchName]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 509,\n          columnNumber: 22\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"start-date\",\n          children: [\"Start Date: \", formatDate_DDMMYYYY(startDate)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 510,\n          columnNumber: 22\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 508,\n        columnNumber: 18\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 503,\n      columnNumber: 14\n    }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n      className: \"main-content-grid\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"animation-area content-card\",\n        children: /*#__PURE__*/_jsxDEV(\"span\", {\n          children: \"Animation\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 514,\n          columnNumber: 63\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 514,\n        columnNumber: 18\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chart-results-column\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"tabs-container\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => setActiveChartTab('yield'),\n            className: `tab-button ${activeChartTab === 'yield' ? 'tab-button-active' : ''}`,\n            children: \" Yield over Time \"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 517,\n            columnNumber: 27\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => setActiveChartTab('temp'),\n            className: `tab-button ${activeChartTab === 'temp' ? 'tab-button-active' : ''}`,\n            children: \" Temperature \"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 518,\n            columnNumber: 27\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => setActiveChartTab('mycelium'),\n            className: `tab-button ${activeChartTab === 'mycelium' ? 'tab-button-active' : ''}`,\n            children: \" Mycelium \"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 519,\n            columnNumber: 27\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 516,\n          columnNumber: 22\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"chart-area content-card\",\n          children: [isLoading && /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"loading-message\",\n            children: \"Running simulations...\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 522,\n            columnNumber: 42\n          }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"error-message\",\n            children: [\"Error: \", error]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 523,\n            columnNumber: 38\n          }, this), !isLoading && !error && simulationDataReady && (chartConfig.data.datasets.length > 0 && chartConfig.data.datasets[0].data.length > 0 ? /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"chart-container\",\n            children: [\" \", /*#__PURE__*/_jsxDEV(Line, {\n              options: chartConfig.options,\n              data: chartConfig.data\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 526,\n              columnNumber: 71\n            }, this), \" \"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 526,\n            columnNumber: 37\n          }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"no-data-message\",\n            children: \"No data available for this chart.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 527,\n            columnNumber: 39\n          }, this)), !isLoading && !error && !simulationDataReady && /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"no-data-message\",\n            children: \"Simulation results not available.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 529,\n            columnNumber: 77\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 521,\n          columnNumber: 22\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"results-section content-card\",\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            className: \"results-heading\",\n            children: [\" Results \", /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"info-icon\",\n              title: \"Yield from Mushroom phase simulation. C:N Ratio fixed.\",\n              children: \"i\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 532,\n              columnNumber: 67\n            }, this), \" \"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 532,\n            columnNumber: 26\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"results-items\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"result-item\",\n              children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"result-label\",\n                children: \"Projected Yield:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 535,\n                columnNumber: 35\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"result-value\",\n                children: [\" \", isLoading ? '...' : error ? 'Error' : Number.isFinite(finalSimulatedYield) ? `${finalSimulatedYield.toFixed(1)}g` : 'N/A', \" \"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 536,\n                columnNumber: 35\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 534,\n              columnNumber: 31\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"result-item\",\n              children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"result-label\",\n                children: \"Initial C:N Ratio:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 539,\n                columnNumber: 35\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"result-value\",\n                children: [\" \", FIXED_CN_RATIO.toFixed(2), \" \"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 540,\n                columnNumber: 35\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 538,\n              columnNumber: 31\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 533,\n            columnNumber: 27\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 531,\n          columnNumber: 22\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 515,\n        columnNumber: 18\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 513,\n      columnNumber: 14\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 502,\n    columnNumber: 10\n  }, this);\n};\n_s(GrowthSimulation, \"46a/HLgskYXB9+t0m/dHXP50uC4=\", false, function () {\n  return [useNavigate];\n});\n_c = GrowthSimulation;\nexport default GrowthSimulation;\nvar _c;\n$RefreshReg$(_c, \"GrowthSimulation\");","map":{"version":3,"names":["React","useState","useEffect","useNavigate","Line","Chart","ChartJS","LineElement","PointElement","Tooltip","Legend","CategoryScale","LinearScale","Title","odeRK4","logoSrc","jsxDEV","_jsxDEV","defaultParamsMushroom","timeStart","timeLength","timeStep","defaultParamsMycelium","FIXED_CN_RATIO","linearInterpolate","data","x","length","i","x0","y0","x1","y1","divisor","t","derivatives","dydt","y","currentParams","currentCO2","currentComplexC","currentMushroomYield","currentMycelium","currentN","currentSimpleC","currentSpace","currentTemp","initialDrySubstrateWeight","cnRatio","cnRatioPlusOne","InitC","AvailableN","AvailableC","NEffect","CEffect","Math","sqrt","max","VolumeNormalisation","Effect_of_CO2_on_Mush_Growth","Effect_of_CO2_on_Myc_Growth","Effect_of_pH_on_Mush_Growth","Effect_of_pH_on_Myc_Growth","Effect_of_Temp_on_Mush_Growth","Effect_of_Temp_on_Myc_Growth","TempEff_","TempEffect","pHEff_","pHEffect","CO2Eff_","CO2Effect","safeTempEffect","safePhEffect","safeNEffect","safeCEffect","safeCO2Effect","RawGrowthRate","GrowthOpp","GrowthRate","NormGrowthRate","flow_Breakdown","flow_CCons","flow_CO2Prod","flow_CO2Vent","flow_Colonisation","flow_MushroomGrowth","flow_NCons","flow_TempProd","flow_TempVent","getInitialState","p","initialMyceliumValue","Number","complexSimpleRatio","isNaN","console","error","Init_C","initialSpace","runSimulation","inputParams","defaultParamSet","_currentParams$Initia","_currentParams$Initia2","finalInitialWeight","finalCNRatio","finalComplexSimpleRatio","finalExternalCO2","finalExternalTemp","initialStateParams","t0","dt","positiveDt","numSteps","floor","derivativeFuncForSolver","e","fill","integrator","results","time","state","simType","log","warn","step","some","val","isFinite","toFixed","push","solverError","map","CO2","ComplexC","MushroomYield","Mycelium","N","SimpleC","Space","Temp","register","formatDate_DDMMYYYY","dateString","test","year","month","day","split","GrowthSimulation","_s","navigate","simulationResultsMushroom","setSimulationResultsMushroom","simulationResultsMycelium","setSimulationResultsMycelium","isLoading","setIsLoading","setError","batchName","setBatchName","startDate","setStartDate","finalSimulatedYield","setFinalSimulatedYield","activeChartTab","setActiveChartTab","LOCAL_STORAGE_KEYS","TEMPERATURE","PH","SUBSTRATE","SIMULATION_DAYS","BATCH_NAME","START_DATE","isMounted","runSimulationsAsync","Promise","resolve","setTimeout","savedTempStr","savedPhStr","savedSubstrateJson","savedDaysStr","savedBatchName","savedStartDate","localStorage","getItem","missing","filter","Boolean","join","Error","temp","parseFloat","phValue","days","parseInt","substrateData","initialWeight","JSON","parse","Object","values","reduce","sum","parseError","message","simulationDuration","simulationInputs","resultsMushroom","resultsMycelium","lastMushroomResult","err","handleBackClick","getChartConfig","_chartData$time","_chartData","currentResultsSource","yieldColor","tempColor","myceliumColor","textColor","gridColor","options","responsive","maintainAspectRatio","plugins","legend","display","labels","color","font","family","tooltip","enabled","bodyFont","titleFont","title","text","size","scales","type","ticks","grid","min","undefined","yYield","yTemp","yMycelium","position","drawOnChartArea","beginAtZero","suggestedMax","datasets","chartData","label","borderColor","backgroundColor","yAxisID","cutoffIndex","findIndex","finalTime","cutoffReason","_chartData$time2","_chartData2","slice","day30Index","_chartData$time3","_chartData3","ds","tension","pointRadius","spanGaps","chartConfig","simulationDataReady","className","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","src","alt","_c","$RefreshReg$"],"sources":["C:/Users/celst/sds/src/components/GrowthSimulation.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { Line } from 'react-chartjs-2';\r\nimport { Chart as ChartJS, LineElement, PointElement, Tooltip, Legend, CategoryScale, LinearScale, Title } from 'chart.js';\r\nimport odeRK4 from 'ode-rk4';\r\nimport '../styles/GrowthSimulation.css'; // Ensure this path is correct\r\nimport logoSrc from '../assets/images/cslogo.png'; // Ensure this path is correct\r\n\r\n// --- Simulation Logic & ChartJS Registration ---\r\n\r\n// *** Default Parameters for MUSHROOM Growth (Based on original Model.json) ***\r\nconst defaultParamsMushroom = {\r\n    timeStart: 0, timeLength: 100, timeStep: 0.2,\r\n    'C BD Rate': 1.11, 'C Coeff': 0.7, 'C Cons. Rate': 76.39, 'CO2 Coeff': 0.8,\r\n    'CO2 Production Rate': 410000, 'CO2 Removal Rate': 12.6, 'External CO2': 428.23,\r\n    'External Temp': 24, 'Growth Coeff': 5.1,\r\n    // 'Initial C:N Ratio': 43.58, // Overridden by FIXED_CN_RATIO\r\n    'Initial Complex:Simple Ratio': 0.8054,\r\n    'Initial Dry Substrate Weight': 410.2, // Default fallback weight\r\n    'IsMush': 1, // <<< Mushroom phase\r\n    'Mushroom Multiplier': 5.17,\r\n    'N Coeff': 68.4, 'N Rate': 13.03,\r\n    'pH': 6.91, // Default fallback pH\r\n    'pH Coeff': 1.4, 'Temp Coeff': 1.3, 'Temp Production Rate': 405,\r\n    'Temp Transfer Rate': 1.5,\r\n    'Effect of CO2 on Mush Growth Data': [[500, 0.9], [800, 1], [1000, 0.8], [1200, 0.25], [1400, 0]],\r\n    'Effect of CO2 on Myc Growth Data': [[15000, 1], [20000, 0.9], [25000, 0.25], [30000, 0]],\r\n    'Effect of pH on Mush Growth Data': [[5.5, 0], [6, 0.25], [6.7, 1], [7, 0.6], [7.5, 0]],\r\n    'Effect of pH on Myc Growth Data': [[5.8, 0], [6, 0.25], [6.7, 1], [7, 0.6], [7.5, 0]],\r\n    'Effect of Temp on Mush Growth Data': [[10, 0], [15, 5.37], [20, 6.36], [25, 8.63], [30, 6.37], [40, 0]],\r\n    'Effect of Temp on Myc Growth Data': [[10, 0], [15, 5.37], [20, 6.36], [25, 8.63], [30, 6.37], [35, 5.36], [45, 0]],\r\n    // Define a potential default starting Mycelium for this phase if needed\r\n    'Initial Mycelium': 0.9, // Example: Assume high colonization before fruiting\r\n};\r\n\r\n// *** Default Parameters for MYCELIUM Growth (Based on Model (1).json) ***\r\nconst defaultParamsMycelium = {\r\n    timeStart: 0, timeLength: 100, timeStep: 0.2,\r\n    'C BD Rate': 1.11, 'C Coeff': 0.7, 'C Cons. Rate': 76.39, 'CO2 Coeff': 0.8,\r\n    'CO2 Production Rate': 410000, 'CO2 Removal Rate': 1,\r\n    'External CO2': 428.23, 'External Temp': 28,\r\n    'Growth Coeff': 5.4,\r\n    'Initial C:N Ratio': 44.3652, // Overridden by FIXED_CN_RATIO\r\n    'Initial Complex:Simple Ratio': 0.867,\r\n    'Initial Dry Substrate Weight': 200, // Default fallback weight\r\n    'IsMush': 0, // <<< Mycelium phase\r\n    'Mushroom Multiplier': 26,\r\n    'N Coeff': 68.4, 'N Rate': 1.53,\r\n    'pH': 6.91, // Default fallback pH\r\n    'pH Coeff': 1.4, 'Temp Coeff': 1.7,\r\n    'Temp Production Rate': 255,\r\n    'Temp Transfer Rate': 1.5,\r\n    'Effect of CO2 on Mush Growth Data': [[500, 0.9], [800, 1], [1000, 0.8], [1200, 0.25], [1400, 0]],\r\n    'Effect of CO2 on Myc Growth Data': [[15000, 1], [20000, 0.9], [25000, 0.25], [30000, 0]],\r\n    'Effect of pH on Mush Growth Data': [[5.5, 0], [6, 0.25], [6.7, 1], [7, 0.6], [7.5, 0]],\r\n    'Effect of pH on Myc Growth Data': [[5.8, 0], [6, 0.25], [6.7, 1], [7, 0.6], [7.5, 0]],\r\n    'Effect of Temp on Mush Growth Data': [[10, 0], [15, 5.37], [20, 6.36], [25, 8.63], [30, 6.37], [40, 0]],\r\n    'Effect of Temp on Myc Growth Data': [[10, 0], [15, 5.37], [20, 6.36], [25, 8.63], [30, 6.37], [35, 5.36], [45, 0]],\r\n     // Define a potential default starting Mycelium for this phase\r\n    'Initial Mycelium': 0.004, // From Model(1).json\r\n};\r\n\r\n// FIXED C:N Ratio as previously requested\r\nconst FIXED_CN_RATIO = 0.96;\r\n\r\n// --- Simulation Functions ---\r\n\r\nfunction linearInterpolate(data, x) {\r\n    if (!data || data.length === 0) return 0;\r\n    if (x <= data[0][0]) return data[0][1];\r\n    if (x >= data[data.length - 1][0]) return data[data.length - 1][1];\r\n    let i = 0;\r\n    while (i < data.length - 1 && x > data[i + 1][0]) i++;\r\n    const x0 = data[i][0], y0 = data[i][1], x1 = data[i + 1][0], y1 = data[i + 1][1];\r\n    const divisor = (x1 - x0);\r\n    if (divisor === 0) return y0;\r\n    const t = (x - x0) / divisor;\r\n    return y0 + t * (y1 - y0);\r\n}\r\n\r\nfunction derivatives(dydt, y, t, currentParams) {\r\n    const [ currentCO2, currentComplexC, currentMushroomYield, currentMycelium, currentN, currentSimpleC, currentSpace, currentTemp ] = y;\r\n    const initialDrySubstrateWeight = currentParams['Initial Dry Substrate Weight'] || 1;\r\n    const cnRatio = currentParams['Initial C:N Ratio'];\r\n    const cnRatioPlusOne = cnRatio + 1;\r\n    // InitC depends on weight and *actual* C:N ratio used\r\n    const InitC = initialDrySubstrateWeight - (initialDrySubstrateWeight / cnRatioPlusOne);\r\n    // Available N/C depend on the current state of N and SimpleC stocks\r\n    const AvailableN = initialDrySubstrateWeight > 0 ? currentN / initialDrySubstrateWeight : 0;\r\n    const AvailableC = initialDrySubstrateWeight > 0 ? currentSimpleC / initialDrySubstrateWeight : 0;\r\n    const NEffect = currentParams['N Coeff'] * AvailableN;\r\n    const CEffect = Math.sqrt(Math.max(0, currentParams['C Coeff'] * AvailableC));\r\n    const VolumeNormalisation = initialDrySubstrateWeight > 0 ? Math.sqrt(100 / initialDrySubstrateWeight) : Math.sqrt(100); // Avoid division by zero\r\n\r\n    // Effects based on interpolation\r\n    const Effect_of_CO2_on_Mush_Growth = linearInterpolate(currentParams['Effect of CO2 on Mush Growth Data'], currentCO2);\r\n    const Effect_of_CO2_on_Myc_Growth = linearInterpolate(currentParams['Effect of CO2 on Myc Growth Data'], currentCO2);\r\n    const Effect_of_pH_on_Mush_Growth = linearInterpolate(currentParams['Effect of pH on Mush Growth Data'], currentParams['pH']);\r\n    const Effect_of_pH_on_Myc_Growth = linearInterpolate(currentParams['Effect of pH on Myc Growth Data'], currentParams['pH']);\r\n    const Effect_of_Temp_on_Mush_Growth = linearInterpolate(currentParams['Effect of Temp on Mush Growth Data'], currentTemp);\r\n    const Effect_of_Temp_on_Myc_Growth = linearInterpolate(currentParams['Effect of Temp on Myc Growth Data'], currentTemp);\r\n\r\n    // Calculate combined effects based on IsMush flag\r\n    const TempEff_ = currentParams['IsMush'] === 0 ? Effect_of_Temp_on_Myc_Growth : Effect_of_Temp_on_Mush_Growth;\r\n    const TempEffect = (currentParams['Temp Coeff'] * TempEff_) / 10;\r\n    const pHEff_ = currentParams['IsMush'] === 0 ? Effect_of_pH_on_Myc_Growth : Effect_of_pH_on_Mush_Growth;\r\n    const pHEffect = pHEff_ * currentParams['pH Coeff'];\r\n    const CO2Eff_ = currentParams['IsMush'] === 0 ? Effect_of_CO2_on_Myc_Growth : Effect_of_CO2_on_Mush_Growth;\r\n    const CO2Effect = currentParams['CO2 Coeff'] * CO2Eff_;\r\n\r\n    // Ensure effects are non-negative before combining\r\n    const safeTempEffect = Math.max(0, TempEffect);\r\n    const safePhEffect = Math.max(0, pHEffect);\r\n    const safeNEffect = Math.max(0, NEffect);\r\n    const safeCEffect = Math.max(0, CEffect); // CEffect already handles sqrt(neg) via Math.max\r\n    const safeCO2Effect = Math.max(0, CO2Effect);\r\n\r\n    const RawGrowthRate = safeTempEffect * safePhEffect * safeNEffect * safeCEffect * safeCO2Effect;\r\n    const GrowthOpp = currentSpace * currentMycelium; // Space and Mycelium are state variables\r\n\r\n    let GrowthRate = currentParams['IsMush'] === 1\r\n        ? (RawGrowthRate * currentParams['Growth Coeff'])\r\n        : (RawGrowthRate * GrowthOpp * currentParams['Growth Coeff']);\r\n    GrowthRate = Math.max(0, GrowthRate); // Ensure non-negative growth rate\r\n\r\n    let NormGrowthRate = currentParams['IsMush'] === 1 ? (GrowthRate / 100) : GrowthRate;\r\n\r\n    // Calculate Flows\r\n    const flow_Breakdown = Math.max(0, currentMycelium * currentParams['C BD Rate'] * currentComplexC * RawGrowthRate * VolumeNormalisation);\r\n    const flow_CCons = Math.max(0, NormGrowthRate * currentParams['C Cons. Rate']);\r\n    const flow_CO2Prod = Math.max(0, NormGrowthRate * currentParams['CO2 Production Rate']);\r\n    const flow_CO2Vent = Math.max(0, currentParams['CO2 Removal Rate'] * (currentCO2 - currentParams['External CO2']) * VolumeNormalisation);\r\n    const flow_Colonisation = currentParams['IsMush'] === 0 ? GrowthRate : 0; // Already non-negative\r\n    const flow_MushroomGrowth = currentParams['IsMush'] === 1 ? Math.max(0, GrowthRate * currentParams['Mushroom Multiplier']) : 0;\r\n    const flow_NCons = Math.max(0, NormGrowthRate * currentParams['N Rate']);\r\n    const flow_TempProd = Math.max(0, NormGrowthRate * currentParams['Temp Production Rate']);\r\n    const flow_TempVent = Math.max(0, (currentTemp - currentParams['External Temp']) * currentParams['Temp Transfer Rate'] * VolumeNormalisation);\r\n\r\n    // Assign derivatives (rate of change for stocks)\r\n    dydt[0] = flow_CO2Prod - flow_CO2Vent; // dCO2/dt\r\n    dydt[1] = -flow_Breakdown; // dComplexC/dt\r\n    dydt[2] = flow_MushroomGrowth; // dMushroomYield/dt\r\n    dydt[3] = flow_Colonisation; // dMycelium/dt\r\n    dydt[4] = -flow_NCons; // dN/dt\r\n    dydt[5] = flow_Breakdown - flow_CCons; // dSimpleC/dt\r\n    dydt[6] = -flow_Colonisation; // dSpace/dt\r\n    dydt[7] = flow_TempProd - flow_TempVent; // dTemp/dt\r\n\r\n    // Apply non-negative constraints AFTER calculating net change\r\n    if (currentCO2 <= 1e-9 && dydt[0] < 0) dydt[0] = 0; // Use small threshold\r\n    if (currentComplexC <= 1e-9 && dydt[1] < 0) dydt[1] = 0;\r\n    if (currentMushroomYield <= 1e-9 && dydt[2] < 0) dydt[2] = 0;\r\n    if (currentMycelium <= 1e-9 && dydt[3] < 0) dydt[3] = 0;\r\n    if (currentN <= 1e-9 && dydt[4] < 0) dydt[4] = 0;\r\n    if (currentSimpleC <= 1e-9 && dydt[5] < 0) dydt[5] = 0;\r\n    if (currentSpace <= 1e-9 && dydt[6] < 0) dydt[6] = 0;\r\n    if (currentTemp <= 1e-9 && dydt[7] < 0) dydt[7] = 0; // Allow temp to drop but not below absolute zero conceptually\r\n}\r\n\r\n\r\nfunction getInitialState(p, initialMyceliumValue) {\r\n    const initialDrySubstrateWeight = Number(p['Initial Dry Substrate Weight']);\r\n    const cnRatio = Number(p['Initial C:N Ratio']);\r\n    const complexSimpleRatio = Number(p['Initial Complex:Simple Ratio']);\r\n\r\n    // Basic validation\r\n    if (isNaN(initialDrySubstrateWeight) || initialDrySubstrateWeight <=0 || isNaN(cnRatio) || isNaN(complexSimpleRatio)) {\r\n        console.error(\"Invalid parameters for getInitialState:\", p);\r\n        // Return a default state to avoid crashing, though simulation might be meaningless\r\n         return [400, 200, 0, 0.01, 10, 50, 0.99, 25];\r\n    }\r\n\r\n    const cnRatioPlusOne = cnRatio + 1;\r\n    const Init_C = initialDrySubstrateWeight - (initialDrySubstrateWeight / cnRatioPlusOne);\r\n    const initialSpace = Math.max(0, 1 - initialMyceliumValue); // Ensure space isn't negative\r\n\r\n    return [\r\n        Number(p['External CO2']),\r\n        Init_C * complexSimpleRatio,\r\n        0,\r\n        initialMyceliumValue,\r\n        initialDrySubstrateWeight / cnRatioPlusOne,\r\n        Init_C * (1 - complexSimpleRatio),\r\n        initialSpace,\r\n        Number(p['External Temp'])\r\n    ];\r\n}\r\n\r\n\r\nfunction runSimulation(inputParams, defaultParamSet) {\r\n    // Ensure defaultParamSet is provided\r\n    if (!defaultParamSet) {\r\n        console.error(\"runSimulation called without defaultParamSet!\");\r\n        return []; // Or throw an error\r\n    }\r\n\r\n    // Merge parameters carefully\r\n    const currentParams = {\r\n        ...defaultParamSet, // Start with the specified default set\r\n        ...inputParams,   // Override with inputs from localStorage (Temp, pH, Weight, Duration etc)\r\n        'Initial C:N Ratio': FIXED_CN_RATIO, // Force the C:N Ratio\r\n    };\r\n\r\n    // Resolve final values for initial state calculation, falling back to currentParams (which includes defaults)\r\n     const finalInitialWeight = Number(currentParams['Initial Dry Substrate Weight']);\r\n     const finalCNRatio = Number(currentParams['Initial C:N Ratio']);\r\n     const finalComplexSimpleRatio = Number(currentParams['Initial Complex:Simple Ratio']);\r\n     const finalExternalCO2 = Number(currentParams['External CO2']);\r\n     const finalExternalTemp = Number(currentParams['External Temp']);\r\n\r\n    // Determine initial mycelium based on the phase defined in currentParams\r\n    const initialMyceliumValue = currentParams['IsMush'] === 0\r\n        ? (currentParams['Initial Mycelium'] ?? 0.004) // Use default from the set or fallback\r\n        : (currentParams['Initial Mycelium'] ?? 0.9);  // Use default from the set or fallback\r\n\r\n    // Prepare parameters needed ONLY for getInitialState\r\n    const initialStateParams = {\r\n        'Initial Dry Substrate Weight': finalInitialWeight,\r\n        'Initial C:N Ratio': finalCNRatio,\r\n        'Initial Complex:Simple Ratio': finalComplexSimpleRatio,\r\n        'External CO2': finalExternalCO2,\r\n        'External Temp': finalExternalTemp,\r\n    };\r\n\r\n    const y0 = getInitialState(initialStateParams, initialMyceliumValue);\r\n\r\n    const t0 = currentParams.timeStart;\r\n    const dt = currentParams.timeStep;\r\n    const timeLength = Math.max(0, Number(currentParams.timeLength)); // Ensure timeLength is a number\r\n    const positiveDt = Math.max(dt, 1e-6);\r\n    const numSteps = timeLength > 0 && positiveDt > 0 ? Math.floor(timeLength / positiveDt) : 0;\r\n\r\n    const derivativeFuncForSolver = (dydt, y, t) => {\r\n        try { derivatives(dydt, y, t, currentParams); } // Pass the full currentParams here\r\n        catch (e) { console.error(\"Error in derivatives:\", e); dydt.fill(0); }\r\n    };\r\n\r\n    const integrator = odeRK4(y0, derivativeFuncForSolver, t0, positiveDt);\r\n    const results = [{ time: integrator.t, state: [...integrator.y] }];\r\n\r\n    const simType = currentParams['IsMush'] === 0 ? 'Mycelium' : 'Mushroom';\r\n    console.log(`Starting ${simType} simulation for ${timeLength} days.`); // Removed params logging for brevity\r\n\r\n    if (numSteps <= 0) { console.warn(`${simType} Sim: length/step 0.`); return []; }\r\n\r\n    for (let i = 0; i < numSteps; i++) {\r\n        try {\r\n            integrator.step();\r\n            if (integrator.y.some(val => !Number.isFinite(val))) {\r\n                 console.error(`${simType} Sim: unstable t=`, integrator.t.toFixed(2));\r\n                 // Stop potentially infinite loops if state becomes NaN\r\n                 if (i > numSteps * 2) { // Heuristic check for runaway loop\r\n                    console.error(`${simType} Sim: Terminating possibly infinite loop due to instability.`);\r\n                    break;\r\n                }\r\n            }\r\n            results.push({ time: integrator.t, state: [...integrator.y] });\r\n        } catch (solverError) {\r\n            console.error(`${simType} Sim: RK4 step error:`, solverError);\r\n            break;\r\n        }\r\n    }\r\n    console.log(`${simType} simulation finished.`);\r\n    return results.map(p => ({ time: p.time, CO2: p.state[0], ComplexC: p.state[1], MushroomYield: p.state[2], Mycelium: p.state[3], N: p.state[4], SimpleC: p.state[5], Space: p.state[6], Temp: p.state[7] }));\r\n}\r\n// --- (End of Simulation Functions) ---\r\n\r\n// Register ChartJS components\r\nChartJS.register(LineElement, PointElement, Tooltip, Legend, CategoryScale, LinearScale, Title);\r\n\r\n// Helper function to format date\r\nfunction formatDate_DDMMYYYY(dateString) {\r\n     if (!dateString || dateString === 'N/A' || !/^\\d{4}-\\d{2}-\\d{2}$/.test(dateString)) { return 'N/A'; }\r\n     try { const [year, month, day] = dateString.split('-'); return `${day}-${month}-${year}`; }\r\n     catch (e) { console.error(\"Error formatting date:\", e); return 'N/A'; }\r\n}\r\n\r\n// --- React Component ---\r\nconst GrowthSimulation = () => {\r\n    const navigate = useNavigate();\r\n    const [simulationResultsMushroom, setSimulationResultsMushroom] = useState(null);\r\n    const [simulationResultsMycelium, setSimulationResultsMycelium] = useState(null);\r\n    const [isLoading, setIsLoading] = useState(true);\r\n    const [error, setError] = useState(null);\r\n    const [batchName, setBatchName] = useState('');\r\n    const [startDate, setStartDate] = useState('');\r\n    const [finalSimulatedYield, setFinalSimulatedYield] = useState(null);\r\n    const [activeChartTab, setActiveChartTab] = useState('yield');\r\n\r\n    const LOCAL_STORAGE_KEYS = {\r\n        TEMPERATURE: 'sim_temperature',\r\n        PH: 'sim_ph',\r\n        SUBSTRATE: 'sim_substrate',\r\n        SIMULATION_DAYS: 'sim_duration',\r\n        BATCH_NAME: 'sim_batch_name',\r\n        START_DATE: 'sim_start_date',\r\n    };\r\n\r\n    useEffect(() => {\r\n        let isMounted = true;\r\n        setIsLoading(true);\r\n        setError(null);\r\n        setFinalSimulatedYield(null);\r\n        setSimulationResultsMushroom(null);\r\n        setSimulationResultsMycelium(null);\r\n\r\n        const runSimulationsAsync = async () => {\r\n            await new Promise(resolve => setTimeout(resolve, 50)); // Short delay\r\n            if (!isMounted) return;\r\n\r\n            let savedTempStr, savedPhStr, savedSubstrateJson, savedDaysStr, savedBatchName, savedStartDate;\r\n            try {\r\n                // Load parameters from localStorage\r\n                 savedTempStr = localStorage.getItem(LOCAL_STORAGE_KEYS.TEMPERATURE);\r\n                 savedPhStr = localStorage.getItem(LOCAL_STORAGE_KEYS.PH);\r\n                 savedSubstrateJson = localStorage.getItem(LOCAL_STORAGE_KEYS.SUBSTRATE);\r\n                 savedDaysStr = localStorage.getItem(LOCAL_STORAGE_KEYS.SIMULATION_DAYS);\r\n                 savedBatchName = localStorage.getItem(LOCAL_STORAGE_KEYS.BATCH_NAME) || 'N/A';\r\n                 savedStartDate = localStorage.getItem(LOCAL_STORAGE_KEYS.START_DATE) || 'N/A';\r\n\r\n                if (isMounted) {\r\n                    setBatchName(savedBatchName);\r\n                    setStartDate(savedStartDate);\r\n                }\r\n\r\n                // Validate required parameters BEFORE parsing\r\n                if (savedTempStr === null || savedPhStr === null || savedSubstrateJson === null || savedDaysStr === null) {\r\n                    const missing = [/*...*/].filter(Boolean).join(', '); // Construct missing list\r\n                    throw new Error(`Missing required parameters: ${missing}. Please set in Condition Settings.`);\r\n                }\r\n\r\n                // Parse values\r\n                const temp = parseFloat(savedTempStr);\r\n                const phValue = parseFloat(savedPhStr);\r\n                const days = parseInt(savedDaysStr, 10);\r\n                let substrateData = null; let initialWeight = 0;\r\n                try {\r\n                    substrateData = JSON.parse(savedSubstrateJson);\r\n                    if (typeof substrateData !== 'object' || substrateData === null) throw new Error(\"Invalid substrate format.\");\r\n                    initialWeight = Object.values(substrateData).reduce((sum, val) => sum + (Number(val) || 0), 0);\r\n                    if (initialWeight <= 0) console.warn(\"Initial substrate weight is zero or negative.\");\r\n                } catch (parseError) { throw new Error(`Invalid substrate data: ${parseError.message}`); }\r\n\r\n                if (isNaN(temp) || isNaN(phValue) || isNaN(initialWeight) || isNaN(days)) {\r\n                     throw new Error(\"Invalid numerical parameters loaded.\");\r\n                 }\r\n\r\n                const simulationDuration = (days > 0) ? days : defaultParamsMushroom.timeLength;\r\n\r\n                // Base inputs common to both simulations\r\n                const simulationInputs = {\r\n                    'External Temp': temp,\r\n                    'pH': phValue,\r\n                    'Initial Dry Substrate Weight': initialWeight, // Use calculated weight directly\r\n                    'timeLength': simulationDuration,\r\n                };\r\n\r\n                 // --- Run BOTH simulations ---\r\n                 console.log(\"Running Mushroom Simulation...\");\r\n                 const resultsMushroom = runSimulation(\r\n                     simulationInputs, // Pass only required overrides\r\n                     defaultParamsMushroom // Pass mushroom defaults\r\n                 );\r\n\r\n                 console.log(\"Running Mycelium Simulation...\");\r\n                 const resultsMycelium = runSimulation(\r\n                     simulationInputs, // Pass only required overrides\r\n                     defaultParamsMycelium // Pass mycelium defaults\r\n                 );\r\n\r\n                if (isMounted) {\r\n                    setSimulationResultsMushroom(resultsMushroom);\r\n                    setSimulationResultsMycelium(resultsMycelium);\r\n\r\n                    if (resultsMushroom && resultsMushroom.length > 0) {\r\n                        const lastMushroomResult = resultsMushroom[resultsMushroom.length - 1];\r\n                         if (lastMushroomResult && Number.isFinite(lastMushroomResult.MushroomYield)) {\r\n                             setFinalSimulatedYield(lastMushroomResult.MushroomYield);\r\n                         }\r\n                    }\r\n                    console.log(\"Both simulations complete.\");\r\n                }\r\n\r\n            } catch (err) {\r\n                console.error(\"Error during simulation setup or run:\", err);\r\n                if (isMounted) setError(err.message || \"Failed to run simulation.\");\r\n            } finally {\r\n                if (isMounted) setIsLoading(false);\r\n            }\r\n        };\r\n\r\n        runSimulationsAsync();\r\n\r\n        return () => { isMounted = false; };\r\n    }, []);\r\n\r\n    const handleBackClick = () => { navigate('/condition-setting'); };\r\n\r\n    const getChartConfig = () => {\r\n      const currentResultsSource = activeChartTab === 'mycelium'\r\n          ? simulationResultsMycelium\r\n          : simulationResultsMushroom;\r\n\r\n      // Default options setup\r\n      const yieldColor = '#2E7D32'; const tempColor = '#C62828'; const myceliumColor = '#1976D2';\r\n      const textColor = '#333'; const gridColor = 'rgba(0, 0, 0, 0.08)';\r\n      const options = {\r\n          responsive: true, maintainAspectRatio: false,\r\n          plugins: { /* ... legend, tooltip, title ... */\r\n              legend: { display: true, labels: { color: textColor, font: { family: 'Lexend'} } },\r\n              tooltip: { enabled: true, bodyFont: { family: 'Lexend'}, titleFont: { family: 'Lexend' } },\r\n              title: { display: true, text: '', color: textColor, font: { size: 16, family: 'Lexend' } }\r\n           },\r\n          scales: {\r\n              x: { type: 'linear', title: { display: true, text: 'Time (Days)', color: textColor, font: { family: 'Lexend'} }, ticks: { color: textColor, font: { family: 'Lexend'} }, grid: { color: gridColor }, min: 0, max: undefined }, // Initialize max\r\n              yYield: { /* ... */ display: false },\r\n              yTemp: { /* ... */ display: false },\r\n              yMycelium: { type: 'linear', position: 'left', title: { display: true, text: 'Mycelium Density', color: myceliumColor, font: { family: 'Lexend'} }, ticks: { color: myceliumColor, font: { family: 'Lexend'} }, grid: { drawOnChartArea: false }, beginAtZero: true, suggestedMax: 1, display: false }\r\n          }\r\n      };\r\n      options.scales.yYield.display = false; options.scales.yTemp.display = false; options.scales.yMycelium.display = false; // Reset\r\n\r\n      if (!currentResultsSource || currentResultsSource.length === 0) {\r\n          return { data: { datasets: [] }, options: options };\r\n      }\r\n\r\n      let datasets = [];\r\n      let chartData = [...currentResultsSource]; // Copy source data\r\n\r\n      switch (activeChartTab) {\r\n          case 'yield':\r\n              options.plugins.title.text = 'Yield Over Time (Mushroom Sim)';\r\n              options.scales.yYield.display = true;\r\n              datasets = [{ label: 'Mushroom Yield (g)', data: chartData.map(p => ({ x: p.time, y: Number.isFinite(p.MushroomYield) ? p.MushroomYield : null })), borderColor: yieldColor, backgroundColor: 'rgba(46, 125, 50, 0.1)', yAxisID: 'yYield', }];\r\n              break;\r\n          case 'temp':\r\n               options.plugins.title.text = 'Temperature Over Time (Mushroom Sim)';\r\n               options.scales.yTemp.display = true;\r\n               datasets = [{ label: 'Temperature (°C)', data: chartData.map(p => ({ x: p.time, y: Number.isFinite(p.Temp) ? p.Temp : null })), borderColor: tempColor, backgroundColor: 'rgba(198, 40, 40, 0.1)', yAxisID: 'yTemp', }];\r\n               break;\r\n          case 'mycelium':\r\n               options.plugins.title.text = 'Mycelium Growth (Mycelium Sim)';\r\n               options.scales.yMycelium.display = true;\r\n\r\n               // *** Logic to find cutoff point ***\r\n               let cutoffIndex = chartData.findIndex(p => p.Mycelium >= 0.9);\r\n               let finalTime = chartData[chartData.length - 1]?.time ?? 0; // Default to last time point\r\n               let cutoffReason = \"Simulation End\"; // Default reason\r\n\r\n               if (cutoffIndex !== -1) {\r\n                   // Cut off at or after the 0.9 threshold is met\r\n                   chartData = chartData.slice(0, cutoffIndex + 1);\r\n                   finalTime = chartData[chartData.length - 1]?.time ?? finalTime; // Time at cutoff\r\n                   cutoffReason = \"Mycelium >= 0.9\";\r\n                   console.log(`Mycelium chart cutoff at index ${cutoffIndex}, time ${finalTime.toFixed(2)} (Threshold 0.9 reached)`);\r\n               } else {\r\n                   // Threshold 0.9 NOT met, check for day 30 cutoff\r\n                   const day30Index = chartData.findIndex(p => p.time >= 30);\r\n\r\n                   if (day30Index !== -1) {\r\n                       // Cut off at or after day 30 is met\r\n                       chartData = chartData.slice(0, day30Index + 1);\r\n                       finalTime = chartData[chartData.length - 1]?.time ?? finalTime; // Time at day 30 (or just after)\r\n                       cutoffReason = \"Day 30 Limit\";\r\n                       console.log(`Mycelium chart cutoff at index ${day30Index}, time ${finalTime.toFixed(2)} (Day 30 limit)`);\r\n                   } else {\r\n                       // Less than 30 days simulated AND threshold not met, show all data\r\n                       console.log(`Mycelium threshold 0.9 not reached and simulation ended before day 30 (t=${finalTime.toFixed(2)}). Showing all data.`);\r\n                       // finalTime is already set to the last available time\r\n                   }\r\n               }\r\n\r\n               // Set max time for X-axis\r\n               options.scales.x.max = finalTime;\r\n\r\n               // Set chart title indicating cutoff if not full duration\r\n               if (cutoffReason !== \"Simulation End\") {\r\n                  options.plugins.title.text += ` (Stopped at ${cutoffReason})`;\r\n               }\r\n\r\n\r\n               datasets = [{\r\n                   label: 'Mycelium Density',\r\n                   data: chartData.map(p => ({ x: p.time, y: Number.isFinite(p.Mycelium) ? p.Mycelium : null })),\r\n                   borderColor: myceliumColor, backgroundColor: 'rgba(25, 118, 210, 0.1)', yAxisID: 'yMycelium',\r\n               }];\r\n               break;\r\n          default:\r\n              datasets = [];\r\n      }\r\n\r\n      return {\r\n           data: { datasets: datasets && datasets.length > 0 ? datasets.map(ds => ({ ...ds, tension: 0.1, pointRadius: 2, spanGaps: true })) : [] },\r\n           options: options\r\n      };\r\n  };\r\n\r\n    const chartConfig = getChartConfig();\r\n    const simulationDataReady = simulationResultsMushroom || simulationResultsMycelium;\r\n\r\n    return (\r\n         <div className=\"growth-simulation\">\r\n             <header className=\"simulation-header\">\r\n                 <div className=\"logobox\">\r\n                      <button onClick={handleBackClick} className=\"back-button\" title=\"Back to Settings\">&larr;</button>\r\n                     <div className=\"logo\"><img src={logoSrc} alt=\"City Sprouts Logo\" /></div>\r\n                 </div>\r\n                 <div className=\"batch-info\">\r\n                     <span className=\"batch-name\">Batch: {batchName}</span>\r\n                     <span className=\"start-date\">Start Date: {formatDate_DDMMYYYY(startDate)}</span>\r\n                 </div>\r\n             </header>\r\n             <main className=\"main-content-grid\">\r\n                 <div className=\"animation-area content-card\"><span>Animation</span></div>\r\n                 <div className=\"chart-results-column\">\r\n                     <div className=\"tabs-container\">\r\n                          <button onClick={() => setActiveChartTab('yield')} className={`tab-button ${activeChartTab === 'yield' ? 'tab-button-active' : ''}`}> Yield over Time </button>\r\n                          <button onClick={() => setActiveChartTab('temp')} className={`tab-button ${activeChartTab === 'temp' ? 'tab-button-active' : ''}`}> Temperature </button>\r\n                          <button onClick={() => setActiveChartTab('mycelium')} className={`tab-button ${activeChartTab === 'mycelium' ? 'tab-button-active' : ''}`}> Mycelium </button>\r\n                     </div>\r\n                     <div className=\"chart-area content-card\">\r\n                           {isLoading && <p className=\"loading-message\">Running simulations...</p>}\r\n                           {error && <p className=\"error-message\">Error: {error}</p>}\r\n                           {!isLoading && !error && simulationDataReady && (\r\n                                chartConfig.data.datasets.length > 0 && chartConfig.data.datasets[0].data.length > 0 ? (\r\n                                    <div className=\"chart-container\"> <Line options={chartConfig.options} data={chartConfig.data} /> </div>\r\n                                ) : ( <p className=\"no-data-message\">No data available for this chart.</p> )\r\n                           )}\r\n                           {!isLoading && !error && !simulationDataReady && <p className=\"no-data-message\">Simulation results not available.</p>}\r\n                      </div>\r\n                     <div className=\"results-section content-card\">\r\n                         <h3 className=\"results-heading\"> Results <span className=\"info-icon\" title=\"Yield from Mushroom phase simulation. C:N Ratio fixed.\">i</span> </h3>\r\n                          <div className=\"results-items\">\r\n                              <div className=\"result-item\">\r\n                                  <span className=\"result-label\">Projected Yield:</span>\r\n                                  <span className=\"result-value\"> {isLoading ? '...' : error ? 'Error' : Number.isFinite(finalSimulatedYield) ? `${finalSimulatedYield.toFixed(1)}g` : 'N/A'} </span>\r\n                              </div>\r\n                              <div className=\"result-item\">\r\n                                  <span className=\"result-label\">Initial C:N Ratio:</span>\r\n                                  <span className=\"result-value\"> {FIXED_CN_RATIO.toFixed(2)} </span>\r\n                              </div>\r\n                          </div>\r\n                      </div>\r\n                 </div>\r\n             </main>\r\n         </div>\r\n     );\r\n};\r\n\r\nexport default GrowthSimulation;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}