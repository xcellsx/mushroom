{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\celst\\\\sds\\\\src\\\\components\\\\GrowthSimulation.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport '../styles/GrowthSimulation.css';\nimport animationGif from '../assets/vids/animation.gif'; // Import the GIF file\nimport { useNavigate } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GrowthSimulation = () => {\n  _s();\n  const navigate = useNavigate();\n  const [substrate, setSubstrate] = useState({});\n  const [temperature, setTemperature] = useState(0); // Add state for temperature\n  const [ph, setPh] = useState(0); // Add state for pH\n  const [yieldValue, setYieldValue] = useState(0); // Add state for yield\n  const [days, setDays] = useState(40); // Set # of days to 40\n\n  useEffect(() => {\n    // Retrieve substrate values and other conditions from localStorage\n    const savedSubstrate = JSON.parse(localStorage.getItem('substrate'));\n    const savedTemperature = localStorage.getItem('temperature');\n    const savedPh = localStorage.getItem('ph');\n    const savedYield = localStorage.getItem('yield'); // Retrieve yield from localStorage\n\n    if (savedSubstrate) {\n      setSubstrate(savedSubstrate);\n    }\n    if (savedTemperature) {\n      setTemperature(savedTemperature);\n    }\n    if (savedPh) {\n      setPh(savedPh);\n    }\n    if (savedYield) {\n      setYieldValue(savedYield);\n    }\n  }, []);\n  const handleViewReportClick = () => {\n    const formatDate = date => {\n      const day = String(date.getDate()).padStart(2, '0');\n      const month = String(date.getMonth() + 1).padStart(2, '0'); // Months are 0-based\n      const year = date.getFullYear();\n      return `${day}/${month}/${year}`;\n    };\n    const newEntry = {\n      days,\n      // Use the # of days set to 40\n      yield: `${yieldValue}g`,\n      // Use the yield value retrieved from localStorage\n      substrate: Object.entries(substrate).map(([key, value]) => `${key.charAt(0).toUpperCase() + key.slice(1)}: ${value}g`).join(', '),\n      // Dynamically display substrate values\n      conditions: `Temperature: ${temperature}°C, pH: ${ph}`,\n      // Use retrieved values\n      date: formatDate(new Date()) // Format the date as \"dd/mm/yyyy\"\n    };\n    const existingHistory = JSON.parse(localStorage.getItem('growthHistory')) || [];\n    localStorage.setItem('growthHistory', JSON.stringify([...existingHistory, newEntry]));\n    navigate('/'); // Navigate to the Growth Report page\n  };\n  const handleBackClick = () => {\n    navigate('/condition-setting'); // Navigate back to the Condition Setting page\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"growth-simulation\",\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"simulation-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"back-button\",\n        onClick: handleBackClick,\n        children: \"\\u2190\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Growth Simulation\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n      className: \"simulation-content\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"simulation-info\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"chosen-conditions\",\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: \"Chosen Conditions:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 74,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n            children: [Object.keys(substrate).map(key => /*#__PURE__*/_jsxDEV(\"li\", {\n              children: [key.charAt(0).toUpperCase() + key.slice(1), \": \", substrate[key], \"g\"]\n            }, key, true, {\n              fileName: _jsxFileName,\n              lineNumber: 77,\n              columnNumber: 17\n            }, this)), /*#__PURE__*/_jsxDEV(\"li\", {\n              children: [\"Temperature: \", temperature, \"\\xB0C\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 81,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n              children: [\"pH: \", ph]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 82,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 75,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"simulation-results\",\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Yield: \", yieldValue, \"g\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 86,\n            columnNumber: 13\n          }, this), \" \", /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"# of Days: \", days]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 87,\n            columnNumber: 13\n          }, this), \" \", /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"C:N:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 88,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"view-report-button\",\n        onClick: handleViewReportClick,\n        children: \"View Report\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 64,\n    columnNumber: 5\n  }, this);\n};\n_s(GrowthSimulation, \"pmIc19LCtRIMh3FbHW20yi9ZBJE=\", false, function () {\n  return [useNavigate];\n});\n_c = GrowthSimulation;\nexport default GrowthSimulation;\nvar _c;\n$RefreshReg$(_c, \"GrowthSimulation\");","map":{"version":3,"names":["React","useEffect","useState","animationGif","useNavigate","jsxDEV","_jsxDEV","GrowthSimulation","_s","navigate","substrate","setSubstrate","temperature","setTemperature","ph","setPh","yieldValue","setYieldValue","days","setDays","savedSubstrate","JSON","parse","localStorage","getItem","savedTemperature","savedPh","savedYield","handleViewReportClick","formatDate","date","day","String","getDate","padStart","month","getMonth","year","getFullYear","newEntry","yield","Object","entries","map","key","value","charAt","toUpperCase","slice","join","conditions","Date","existingHistory","setItem","stringify","handleBackClick","className","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","keys","_c","$RefreshReg$"],"sources":["C:/Users/celst/sds/src/components/GrowthSimulation.jsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport '../styles/GrowthSimulation.css';\r\nimport animationGif from '../assets/vids/animation.gif'; // Import the GIF file\r\nimport { useNavigate } from 'react-router-dom';\r\n\r\nconst GrowthSimulation = () => {\r\n  const navigate = useNavigate();\r\n  const [substrate, setSubstrate] = useState({});\r\n  const [temperature, setTemperature] = useState(0); // Add state for temperature\r\n  const [ph, setPh] = useState(0); // Add state for pH\r\n  const [yieldValue, setYieldValue] = useState(0); // Add state for yield\r\n  const [days, setDays] = useState(40); // Set # of days to 40\r\n\r\n  useEffect(() => {\r\n    // Retrieve substrate values and other conditions from localStorage\r\n    const savedSubstrate = JSON.parse(localStorage.getItem('substrate'));\r\n    const savedTemperature = localStorage.getItem('temperature');\r\n    const savedPh = localStorage.getItem('ph');\r\n    const savedYield = localStorage.getItem('yield'); // Retrieve yield from localStorage\r\n\r\n    if (savedSubstrate) {\r\n      setSubstrate(savedSubstrate);\r\n    }\r\n    if (savedTemperature) {\r\n      setTemperature(savedTemperature);\r\n    }\r\n    if (savedPh) {\r\n      setPh(savedPh);\r\n    }\r\n    if (savedYield) {\r\n      setYieldValue(savedYield);\r\n    }\r\n  }, []);\r\n\r\n  const handleViewReportClick = () => {\r\n    const formatDate = (date) => {\r\n      const day = String(date.getDate()).padStart(2, '0');\r\n      const month = String(date.getMonth() + 1).padStart(2, '0'); // Months are 0-based\r\n      const year = date.getFullYear();\r\n      return `${day}/${month}/${year}`;\r\n    };\r\n\r\n    const newEntry = {\r\n      days, // Use the # of days set to 40\r\n      yield: `${yieldValue}g`, // Use the yield value retrieved from localStorage\r\n      substrate: Object.entries(substrate)\r\n        .map(([key, value]) => `${key.charAt(0).toUpperCase() + key.slice(1)}: ${value}g`)\r\n        .join(', '), // Dynamically display substrate values\r\n      conditions: `Temperature: ${temperature}°C, pH: ${ph}`, // Use retrieved values\r\n      date: formatDate(new Date()), // Format the date as \"dd/mm/yyyy\"\r\n    };\r\n\r\n    const existingHistory = JSON.parse(localStorage.getItem('growthHistory')) || [];\r\n    localStorage.setItem('growthHistory', JSON.stringify([...existingHistory, newEntry]));\r\n\r\n    navigate('/'); // Navigate to the Growth Report page\r\n  };\r\n\r\n  const handleBackClick = () => {\r\n    navigate('/condition-setting'); // Navigate back to the Condition Setting page\r\n  };\r\n\r\n  return (\r\n    <div className=\"growth-simulation\">\r\n      <header className=\"simulation-header\">\r\n        <button className=\"back-button\" onClick={handleBackClick}>\r\n          ←\r\n        </button>\r\n        <h1>Growth Simulation</h1>\r\n      </header>\r\n      <main className=\"simulation-content\">\r\n        <div className=\"simulation-info\">\r\n          <div className=\"chosen-conditions\">\r\n            <h3>Chosen Conditions:</h3>\r\n            <ul>\r\n              {Object.keys(substrate).map((key) => (\r\n                <li key={key}>\r\n                  {key.charAt(0).toUpperCase() + key.slice(1)}: {substrate[key]}g\r\n                </li>\r\n              ))}\r\n              <li>Temperature: {temperature}°C</li>\r\n              <li>pH: {ph}</li>\r\n            </ul>\r\n          </div>\r\n          <div className=\"simulation-results\">\r\n            <p>Yield: {yieldValue}g</p> {/* Display the yield */}\r\n            <p># of Days: {days}</p> {/* Display the # of days */}\r\n            <p>C:N:</p>\r\n          </div>\r\n        </div>\r\n        <button className=\"view-report-button\" onClick={handleViewReportClick}>\r\n          View Report\r\n        </button>\r\n      </main>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default GrowthSimulation;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}