{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\celst\\\\sds\\\\src\\\\components\\\\GrowthHistory.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\n// Adjust the path to your CSS file as needed\nimport '../styles/GrowthHistory.css';\n\n/**\r\n * GrowthHistory Component\r\n * Displays a list of past growth simulation entries stored in localStorage.\r\n */\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GrowthHistory = () => {\n  _s();\n  const navigate = useNavigate();\n  const [history, setHistory] = useState([]); // State to hold the history array\n  const [isLoading, setIsLoading] = useState(true); // Loading state\n  const [error, setError] = useState(null); // Error state\n\n  // Effect hook to load history from localStorage when the component mounts\n  useEffect(() => {\n    try {\n      // Retrieve the stored history string\n      const savedHistoryString = localStorage.getItem('growthHistory');\n      // Parse the JSON string, or default to an empty array if null or invalid\n      const savedHistory = savedHistoryString ? JSON.parse(savedHistoryString) : [];\n      // Ensure it's an array before setting state\n      if (Array.isArray(savedHistory)) {\n        setHistory(savedHistory);\n      } else {\n        console.warn(\"Stored growthHistory is not an array. Resetting to empty.\");\n        setHistory([]);\n        // Optionally clear the invalid item from localStorage\n        // localStorage.removeItem('growthHistory');\n      }\n    } catch (parseError) {\n      // Handle potential JSON parsing errors\n      console.error(\"Error parsing growth history from localStorage:\", parseError);\n      setError(\"Failed to load growth history. Data might be corrupted.\");\n      setHistory([]); // Set history to empty on error\n      // Optionally clear the corrupted item\n      // localStorage.removeItem('growthHistory');\n    } finally {\n      setIsLoading(false); // Set loading to false after attempting to load\n    }\n  }, []); // Empty dependency array ensures this runs only once on mount\n\n  /**\r\n   * Navigates back to the landing page (root route assumed).\r\n   */\n  const handleBackClick = () => {\n    navigate('/'); // Adjust route if your landing page is different\n  };\n\n  /**\r\n   * Formats the substrate data (expected as a JSON string or object)\r\n   * into a human-readable string.\r\n   * Example Input: '{\"riceBran\": \"100\", \"corn\": \"50\"}' or {riceBran: \"100\", corn: \"50\"}\r\n   * Example Output: \"Rice Bran: 100g, Corn Cob: 50g\"\r\n   * @param {string | object} substrate - The substrate data.\r\n   * @returns {string} A formatted string representation of the substrate.\r\n   */\n  const formatSubstrate = substrate => {\n    // Map internal keys to user-friendly display names\n    const displayNames = {\n      riceBran: 'Rice Bran',\n      corn: 'Corn Cob',\n      sugarcane: 'Sugarcane',\n      sawdust: 'Sawdust'\n      // Add other substrate types here if needed\n    };\n    let parsedSubstrate;\n\n    // Check if the input is already an object (might happen if data structure changes)\n    if (typeof substrate === 'object' && substrate !== null) {\n      parsedSubstrate = substrate;\n    } else if (typeof substrate === 'string') {\n      // Try to parse if it's a string\n      try {\n        parsedSubstrate = JSON.parse(substrate);\n        // Ensure the parsed result is an object\n        if (typeof parsedSubstrate !== 'object' || parsedSubstrate === null) {\n          console.warn(\"Parsed substrate is not an object:\", parsedSubstrate);\n          return substrate; // Return original string if parsing didn't yield an object\n        }\n      } catch (error) {\n        // If parsing fails, assume it's a pre-formatted string or invalid data\n        // console.warn(\"Could not parse substrate string, returning as is:\", substrate);\n        return substrate; // Return the original string\n      }\n    } else {\n      // If it's neither a string nor an object, return a placeholder\n      return \"Invalid substrate data\";\n    }\n\n    // Format the parsed object into a string\n    return Object.entries(parsedSubstrate)\n    // Filter out entries with empty/null/undefined values if desired\n    // .filter(([key, value]) => value)\n    .map(([key, value]) => {\n      const name = displayNames[key] || key; // Use display name or key itself\n      const amount = Number(value); // Attempt to convert value to number\n      return `${name}: ${isNaN(amount) ? value : amount + 'g'}`; // Add 'g' only if it's a valid number\n    }).join(', '); // Join components with a comma and space\n  };\n\n  /**\r\n   * Navigates to the detailed growth report page, passing the selected entry's data.\r\n   * @param {object} entry - The history entry object that was clicked.\r\n   */\n  const handleEntryClick = entry => {\n    console.log(\"Navigating to report with entry:\", entry);\n    // Navigate to the '/growth-report' route and pass the entry data via state\n    navigate('/growth-report', {\n      state: {\n        entryData: entry\n      }\n    });\n  };\n\n  // --- Render Logic ---\n\n  // Display loading message\n  if (isLoading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"growth-history\",\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Loading history...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 44\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 12\n    }, this);\n  }\n\n  // Display error message\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"growth-history error-message\",\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 58\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"growth-history\",\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"history-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"back-button\",\n        onClick: handleBackClick,\n        title: \"Back to Landing Page\",\n        children: \"\\u2190 \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Growth History\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n      className: \"history-content\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"April\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"history-list\",\n        children: history.length > 0 ?\n        // Reverse the history array to show the most recent entries first\n        [...history].reverse().map((entry, index) => {\n          var _entry$days, _entry$yield, _entry$date;\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"history-item\"\n            // Use a more stable key if entries have unique IDs, otherwise index is fallback\n            ,\n\n            onClick: () => handleEntryClick(entry) // Make the entry clickable\n            ,\n            title: \"Click to view detailed report\" // Tooltip for better UX\n            ,\n            style: {\n              cursor: 'pointer'\n            } // Visual cue for clickability\n            ,\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"history-details\",\n              children: [/*#__PURE__*/_jsxDEV(\"p\", {\n                children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                  children: \"# of Days:\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 153,\n                  columnNumber: 22\n                }, this), \" \", (_entry$days = entry.days) !== null && _entry$days !== void 0 ? _entry$days : 'N/A']\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 153,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                  children: \"Yield:\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 155,\n                  columnNumber: 22\n                }, this), \" \", entry.yield !== undefined && entry.yield !== null && !isNaN(Number(entry.yield)) ? `${Number(entry.yield).toFixed(1)}g` : (_entry$yield = entry.yield) !== null && _entry$yield !== void 0 ? _entry$yield : 'N/A']\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 155,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                children: [formatSubstrate(entry.substrate), entry.conditions ? ` | ${entry.conditions}` : '']\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 158,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 151,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"history-date\",\n              children: /*#__PURE__*/_jsxDEV(\"p\", {\n                children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                  children: \"Date:\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 165,\n                  columnNumber: 22\n                }, this), \" \", (_entry$date = entry.date) !== null && _entry$date !== void 0 ? _entry$date : 'N/A']\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 165,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 163,\n              columnNumber: 17\n            }, this)]\n          }, entry.id || `history-${index}`, true, {\n            fileName: _jsxFileName,\n            lineNumber: 143,\n            columnNumber: 15\n          }, this);\n        }) :\n        /*#__PURE__*/\n        // Message displayed when no history entries are found\n        _jsxDEV(\"p\", {\n          className: \"no-history-message\",\n          children: \"No growth history available.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 171,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 128,\n    columnNumber: 5\n  }, this);\n};\n_s(GrowthHistory, \"rdYtXXzUXn26IYafyWZ98R9MeSI=\", false, function () {\n  return [useNavigate];\n});\n_c = GrowthHistory;\nexport default GrowthHistory;\nvar _c;\n$RefreshReg$(_c, \"GrowthHistory\");","map":{"version":3,"names":["React","useEffect","useState","useNavigate","jsxDEV","_jsxDEV","GrowthHistory","_s","navigate","history","setHistory","isLoading","setIsLoading","error","setError","savedHistoryString","localStorage","getItem","savedHistory","JSON","parse","Array","isArray","console","warn","parseError","handleBackClick","formatSubstrate","substrate","displayNames","riceBran","corn","sugarcane","sawdust","parsedSubstrate","Object","entries","map","key","value","name","amount","Number","isNaN","join","handleEntryClick","entry","log","state","entryData","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","title","length","reverse","index","_entry$days","_entry$yield","_entry$date","style","cursor","days","yield","undefined","toFixed","conditions","date","id","_c","$RefreshReg$"],"sources":["C:/Users/celst/sds/src/components/GrowthHistory.jsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\n// Adjust the path to your CSS file as needed\r\nimport '../styles/GrowthHistory.css';\r\n\r\n/**\r\n * GrowthHistory Component\r\n * Displays a list of past growth simulation entries stored in localStorage.\r\n */\r\nconst GrowthHistory = () => {\r\n  const navigate = useNavigate();\r\n  const [history, setHistory] = useState([]); // State to hold the history array\r\n  const [isLoading, setIsLoading] = useState(true); // Loading state\r\n  const [error, setError] = useState(null); // Error state\r\n\r\n  // Effect hook to load history from localStorage when the component mounts\r\n  useEffect(() => {\r\n    try {\r\n      // Retrieve the stored history string\r\n      const savedHistoryString = localStorage.getItem('growthHistory');\r\n      // Parse the JSON string, or default to an empty array if null or invalid\r\n      const savedHistory = savedHistoryString ? JSON.parse(savedHistoryString) : [];\r\n      // Ensure it's an array before setting state\r\n      if (Array.isArray(savedHistory)) {\r\n        setHistory(savedHistory);\r\n      } else {\r\n        console.warn(\"Stored growthHistory is not an array. Resetting to empty.\");\r\n        setHistory([]);\r\n        // Optionally clear the invalid item from localStorage\r\n        // localStorage.removeItem('growthHistory');\r\n      }\r\n    } catch (parseError) {\r\n      // Handle potential JSON parsing errors\r\n      console.error(\"Error parsing growth history from localStorage:\", parseError);\r\n      setError(\"Failed to load growth history. Data might be corrupted.\");\r\n      setHistory([]); // Set history to empty on error\r\n      // Optionally clear the corrupted item\r\n      // localStorage.removeItem('growthHistory');\r\n    } finally {\r\n      setIsLoading(false); // Set loading to false after attempting to load\r\n    }\r\n  }, []); // Empty dependency array ensures this runs only once on mount\r\n\r\n  /**\r\n   * Navigates back to the landing page (root route assumed).\r\n   */\r\n  const handleBackClick = () => {\r\n    navigate('/'); // Adjust route if your landing page is different\r\n  };\r\n\r\n  /**\r\n   * Formats the substrate data (expected as a JSON string or object)\r\n   * into a human-readable string.\r\n   * Example Input: '{\"riceBran\": \"100\", \"corn\": \"50\"}' or {riceBran: \"100\", corn: \"50\"}\r\n   * Example Output: \"Rice Bran: 100g, Corn Cob: 50g\"\r\n   * @param {string | object} substrate - The substrate data.\r\n   * @returns {string} A formatted string representation of the substrate.\r\n   */\r\n  const formatSubstrate = (substrate) => {\r\n    // Map internal keys to user-friendly display names\r\n    const displayNames = {\r\n      riceBran: 'Rice Bran',\r\n      corn: 'Corn Cob',\r\n      sugarcane: 'Sugarcane',\r\n      sawdust: 'Sawdust',\r\n      // Add other substrate types here if needed\r\n    };\r\n\r\n    let parsedSubstrate;\r\n\r\n    // Check if the input is already an object (might happen if data structure changes)\r\n    if (typeof substrate === 'object' && substrate !== null) {\r\n        parsedSubstrate = substrate;\r\n    } else if (typeof substrate === 'string') {\r\n        // Try to parse if it's a string\r\n        try {\r\n            parsedSubstrate = JSON.parse(substrate);\r\n            // Ensure the parsed result is an object\r\n            if (typeof parsedSubstrate !== 'object' || parsedSubstrate === null) {\r\n               console.warn(\"Parsed substrate is not an object:\", parsedSubstrate);\r\n               return substrate; // Return original string if parsing didn't yield an object\r\n            }\r\n        } catch (error) {\r\n            // If parsing fails, assume it's a pre-formatted string or invalid data\r\n            // console.warn(\"Could not parse substrate string, returning as is:\", substrate);\r\n            return substrate; // Return the original string\r\n        }\r\n    } else {\r\n        // If it's neither a string nor an object, return a placeholder\r\n        return \"Invalid substrate data\";\r\n    }\r\n\r\n    // Format the parsed object into a string\r\n    return Object.entries(parsedSubstrate)\r\n      // Filter out entries with empty/null/undefined values if desired\r\n      // .filter(([key, value]) => value)\r\n      .map(([key, value]) => {\r\n          const name = displayNames[key] || key; // Use display name or key itself\r\n          const amount = Number(value); // Attempt to convert value to number\r\n          return `${name}: ${isNaN(amount) ? value : amount + 'g'}`; // Add 'g' only if it's a valid number\r\n      })\r\n      .join(', '); // Join components with a comma and space\r\n  };\r\n\r\n  /**\r\n   * Navigates to the detailed growth report page, passing the selected entry's data.\r\n   * @param {object} entry - The history entry object that was clicked.\r\n   */\r\n  const handleEntryClick = (entry) => {\r\n    console.log(\"Navigating to report with entry:\", entry);\r\n    // Navigate to the '/growth-report' route and pass the entry data via state\r\n    navigate('/growth-report', { state: { entryData: entry } });\r\n  };\r\n\r\n  // --- Render Logic ---\r\n\r\n  // Display loading message\r\n  if (isLoading) {\r\n    return <div className=\"growth-history\"><p>Loading history...</p></div>;\r\n  }\r\n\r\n  // Display error message\r\n  if (error) {\r\n    return <div className=\"growth-history error-message\"><p>{error}</p></div>;\r\n  }\r\n\r\n  return (\r\n    <div className=\"growth-history\">\r\n      <header className=\"history-header\">\r\n        <button className=\"back-button\" onClick={handleBackClick} title=\"Back to Landing Page\">\r\n          &larr; {/* Left arrow character */}\r\n        </button>\r\n        <h1>Growth History</h1>\r\n        {/* Placeholder for potential future actions like filtering/sorting */}\r\n      </header>\r\n      <main className=\"history-content\">\r\n        {/* Note: Month heading is hardcoded. Needs logic to group by month dynamically. */}\r\n        <h3>April</h3>\r\n        <div className=\"history-list\">\r\n          {history.length > 0 ? (\r\n            // Reverse the history array to show the most recent entries first\r\n            [...history].reverse().map((entry, index) => (\r\n              <div\r\n                className=\"history-item\"\r\n                // Use a more stable key if entries have unique IDs, otherwise index is fallback\r\n                key={entry.id || `history-${index}`}\r\n                onClick={() => handleEntryClick(entry)} // Make the entry clickable\r\n                title=\"Click to view detailed report\" // Tooltip for better UX\r\n                style={{ cursor: 'pointer' }} // Visual cue for clickability\r\n              >\r\n                <div className=\"history-details\">\r\n                  {/* Display Number of Days */}\r\n                  <p><strong># of Days:</strong> {entry.days ?? 'N/A'}</p>\r\n                  {/* Display Yield, format to 1 decimal place if possible */}\r\n                  <p><strong>Yield:</strong> {entry.yield !== undefined && entry.yield !== null && !isNaN(Number(entry.yield)) ? `${Number(entry.yield).toFixed(1)}g` : (entry.yield ?? 'N/A')}</p>\r\n                  {/* Display formatted Substrate and Conditions */}\r\n                  {/* Combine substrate and conditions, handle missing conditions */}\r\n                  <p>\r\n                    {formatSubstrate(entry.substrate)}\r\n                    {entry.conditions ? ` | ${entry.conditions}` : ''}\r\n                  </p>\r\n                </div>\r\n                <div className=\"history-date\">\r\n                  {/* Display Date */}\r\n                  <p><strong>Date:</strong> {entry.date ?? 'N/A'}</p>\r\n                </div>\r\n              </div>\r\n            ))\r\n          ) : (\r\n            // Message displayed when no history entries are found\r\n            <p className=\"no-history-message\">No growth history available.</p>\r\n          )}\r\n        </div>\r\n      </main>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default GrowthHistory;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}