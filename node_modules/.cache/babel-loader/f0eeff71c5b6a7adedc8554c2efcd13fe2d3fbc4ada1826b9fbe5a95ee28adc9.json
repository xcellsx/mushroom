{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\celst\\\\sds\\\\src\\\\components\\\\GrowthSimulation.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { Line } from 'react-chartjs-2';\nimport { Chart as ChartJS, LineElement, PointElement, Tooltip, Legend, CategoryScale, LinearScale, Title, Interaction // Interaction might be needed for click handling modes\n} from 'chart.js';\nimport { getElementAtEvent } from 'react-chartjs-2'; // Helper for click events\nimport odeRK4 from 'ode-rk4'; // ODE solver\n\n// --- CSS and Asset Imports ---\n// Adjust these paths according to your project structure\nimport '../styles/GrowthSimulation.css';\nimport logoSrc from '../assets/images/cslogo.png';\nimport asset1Src from '../assets/images/Asset1.png'; // Image for Day 0 click\n\n// --- Simulation Logic & ChartJS Registration ---\n\n// Register necessary ChartJS components\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nChartJS.register(LineElement, PointElement, Tooltip, Legend, CategoryScale, LinearScale, Title);\n\n// *** Default Parameters for MUSHROOM Growth ***\nconst defaultParamsMushroom = {\n  timeStart: 0,\n  timeLength: 100,\n  timeStep: 0.2,\n  'C BD Rate': 1.11,\n  'C Coeff': 0.7,\n  'C Cons. Rate': 76.39,\n  'CO2 Coeff': 0.8,\n  'CO2 Production Rate': 410000,\n  'CO2 Removal Rate': 12.6,\n  'External CO2': 428.23,\n  'External Temp': 24,\n  'Growth Coeff': 5.1,\n  'Initial Complex:Simple Ratio': 0.8054,\n  'Initial Dry Substrate Weight': 410.2,\n  // Default fallback weight\n  'IsMush': 1,\n  // Mushroom phase\n  'Mushroom Multiplier': 5.17,\n  'N Coeff': 68.4,\n  'N Rate': 13.03,\n  'pH': 6.91,\n  // Default fallback pH\n  'pH Coeff': 1.4,\n  'Temp Coeff': 1.3,\n  'Temp Production Rate': 405,\n  'Temp Transfer Rate': 1.5,\n  'Effect of CO2 on Mush Growth Data': [[500, 0.9], [800, 1], [1000, 0.8], [1200, 0.25], [1400, 0]],\n  'Effect of CO2 on Myc Growth Data': [[15000, 1], [20000, 0.9], [25000, 0.25], [30000, 0]],\n  'Effect of pH on Mush Growth Data': [[5.5, 0], [6, 0.25], [6.7, 1], [7, 0.6], [7.5, 0]],\n  'Effect of pH on Myc Growth Data': [[5.8, 0], [6, 0.25], [6.7, 1], [7, 0.6], [7.5, 0]],\n  'Effect of Temp on Mush Growth Data': [[10, 0], [15, 5.37], [20, 6.36], [25, 8.63], [30, 6.37], [40, 0]],\n  'Effect of Temp on Myc Growth Data': [[10, 0], [15, 5.37], [20, 6.36], [25, 8.63], [30, 6.37], [35, 5.36], [45, 0]],\n  'Initial Mycelium': 0.9 // Assume high colonization before fruiting\n};\n\n// *** Default Parameters for MYCELIUM Growth ***\nconst defaultParamsMycelium = {\n  timeStart: 0,\n  timeLength: 100,\n  timeStep: 0.2,\n  'C BD Rate': 1.11,\n  'C Coeff': 0.7,\n  'C Cons. Rate': 76.39,\n  'CO2 Coeff': 0.8,\n  'CO2 Production Rate': 410000,\n  'CO2 Removal Rate': 1,\n  'External CO2': 428.23,\n  'External Temp': 28,\n  'Growth Coeff': 5.4,\n  'Initial Complex:Simple Ratio': 0.867,\n  'Initial Dry Substrate Weight': 200,\n  // Default fallback weight\n  'IsMush': 0,\n  // Mycelium phase\n  'Mushroom Multiplier': 26,\n  'N Coeff': 68.4,\n  'N Rate': 1.53,\n  'pH': 6.91,\n  // Default fallback pH\n  'pH Coeff': 1.4,\n  'Temp Coeff': 1.7,\n  'Temp Production Rate': 255,\n  'Temp Transfer Rate': 1.5,\n  'Effect of CO2 on Mush Growth Data': [[500, 0.9], [800, 1], [1000, 0.8], [1200, 0.25], [1400, 0]],\n  'Effect of CO2 on Myc Growth Data': [[15000, 1], [20000, 0.9], [25000, 0.25], [30000, 0]],\n  'Effect of pH on Mush Growth Data': [[5.5, 0], [6, 0.25], [6.7, 1], [7, 0.6], [7.5, 0]],\n  'Effect of pH on Myc Growth Data': [[5.8, 0], [6, 0.25], [6.7, 1], [7, 0.6], [7.5, 0]],\n  'Effect of Temp on Mush Growth Data': [[10, 0], [15, 5.37], [20, 6.36], [25, 8.63], [30, 6.37], [40, 0]],\n  'Effect of Temp on Myc Growth Data': [[10, 0], [15, 5.37], [20, 6.36], [25, 8.63], [30, 6.37], [35, 5.36], [45, 0]],\n  'Initial Mycelium': 0.004 // From Model(1).json\n};\n\n// FIXED C:N Ratio as previously requested\nconst FIXED_CN_RATIO = 0.96;\n\n// --- Simulation Functions ---\n\n/**\r\n * Performs linear interpolation on a 2D data array.\r\n * @param {Array<Array<number>>} data - Array of [x, y] points, sorted by x.\r\n * @param {number} x - The x-value to interpolate at.\r\n * @returns {number} The interpolated y-value.\r\n */\nfunction linearInterpolate(data, x) {\n  if (!data || data.length === 0) return 0;\n  // Handle extrapolation (return edge values)\n  if (x <= data[0][0]) return data[0][1];\n  if (x >= data[data.length - 1][0]) return data[data.length - 1][1];\n\n  // Find the segment where x falls\n  let i = 0;\n  while (i < data.length - 1 && x > data[i + 1][0]) i++;\n  const x0 = data[i][0],\n    y0 = data[i][1];\n  const x1 = data[i + 1][0],\n    y1 = data[i + 1][1];\n  const divisor = x1 - x0;\n  // Avoid division by zero if points are identical\n  if (divisor === 0) return y0;\n  const t = (x - x0) / divisor; // Interpolation factor\n  return y0 + t * (y1 - y0);\n}\n\n/**\r\n * Calculates the derivatives for the ODE system.\r\n * @param {Array<number>} dydt - Output array for derivatives.\r\n * @param {Array<number>} y - Current state vector [CO2, ComplexC, MushroomYield, Mycelium, N, SimpleC, Space, Temp].\r\n * @param {number} t - Current time (not explicitly used in this model's equations but required by solver).\r\n * @param {object} currentParams - The merged parameters for the current simulation run.\r\n */\nfunction derivatives(dydt, y, t, currentParams) {\n  const [currentCO2, currentComplexC, currentMushroomYield, currentMycelium, currentN, currentSimpleC, currentSpace, currentTemp] = y;\n\n  // --- Parameter Extraction and Initial Calculations ---\n  const initialDrySubstrateWeight = currentParams['Initial Dry Substrate Weight'] || 1; // Avoid division by zero\n  const cnRatio = currentParams['Initial C:N Ratio']; // Use the potentially overridden C:N ratio\n  const cnRatioPlusOne = cnRatio + 1;\n  const InitC = initialDrySubstrateWeight - initialDrySubstrateWeight / cnRatioPlusOne; // Total initial Carbon\n\n  // Availability based on current state (relative to initial weight for consistency with original model logic)\n  const AvailableN = initialDrySubstrateWeight > 0 ? currentN / initialDrySubstrateWeight : 0;\n  const AvailableC = initialDrySubstrateWeight > 0 ? currentSimpleC / initialDrySubstrateWeight : 0;\n\n  // Volume normalization factor (adjusts rates based on substrate weight relative to a reference, e.g., 100g)\n  const VolumeNormalisation = initialDrySubstrateWeight > 0 ? Math.sqrt(100 / initialDrySubstrateWeight) : Math.sqrt(100);\n\n  // --- Calculate Environmental Effects using Interpolation ---\n  const Effect_of_CO2_on_Mush_Growth = linearInterpolate(currentParams['Effect of CO2 on Mush Growth Data'], currentCO2);\n  const Effect_of_CO2_on_Myc_Growth = linearInterpolate(currentParams['Effect of CO2 on Myc Growth Data'], currentCO2);\n  const Effect_of_pH_on_Mush_Growth = linearInterpolate(currentParams['Effect of pH on Mush Growth Data'], currentParams['pH']);\n  const Effect_of_pH_on_Myc_Growth = linearInterpolate(currentParams['Effect of pH on Myc Growth Data'], currentParams['pH']);\n  const Effect_of_Temp_on_Mush_Growth = linearInterpolate(currentParams['Effect of Temp on Mush Growth Data'], currentTemp);\n  const Effect_of_Temp_on_Myc_Growth = linearInterpolate(currentParams['Effect of Temp on Myc Growth Data'], currentTemp);\n\n  // --- Combine Effects based on Growth Phase (IsMush flag) ---\n  const isMushPhase = currentParams['IsMush'] === 1;\n  const TempEff_ = isMushPhase ? Effect_of_Temp_on_Mush_Growth : Effect_of_Temp_on_Myc_Growth;\n  const TempEffect = currentParams['Temp Coeff'] * TempEff_ / 10; // Scaled effect\n\n  const pHEff_ = isMushPhase ? Effect_of_pH_on_Mush_Growth : Effect_of_pH_on_Myc_Growth;\n  const pHEffect = pHEff_ * currentParams['pH Coeff'];\n  const CO2Eff_ = isMushPhase ? Effect_of_CO2_on_Mush_Growth : Effect_of_CO2_on_Myc_Growth;\n  const CO2Effect = currentParams['CO2 Coeff'] * CO2Eff_;\n  const NEffect = currentParams['N Coeff'] * AvailableN;\n  const CEffect = Math.sqrt(Math.max(0, currentParams['C Coeff'] * AvailableC)); // Ensure non-negative input to sqrt\n\n  // --- Ensure Individual Effects are Non-Negative ---\n  const safeTempEffect = Math.max(0, TempEffect);\n  const safePhEffect = Math.max(0, pHEffect);\n  const safeNEffect = Math.max(0, NEffect);\n  const safeCEffect = Math.max(0, CEffect); // Already handled by Math.max inside sqrt\n  const safeCO2Effect = Math.max(0, CO2Effect);\n\n  // --- Calculate Raw Growth Rate ---\n  // Product of all limiting factors\n  const RawGrowthRate = safeTempEffect * safePhEffect * safeNEffect * safeCEffect * safeCO2Effect;\n\n  // Growth opportunity depends on available space and existing mycelium (for mycelial phase)\n  const GrowthOpp = currentSpace * currentMycelium;\n\n  // Base growth rate calculation differs slightly between phases\n  let GrowthRate = isMushPhase ? RawGrowthRate * currentParams['Growth Coeff'] // Mushroom phase growth\n  : RawGrowthRate * GrowthOpp * currentParams['Growth Coeff']; // Mycelial phase growth\n  GrowthRate = Math.max(0, GrowthRate); // Ensure growth rate is not negative\n\n  // Normalized growth rate (used for consumption/production calculations)\n  // Scaling differs between phases in the original model logic\n  let NormGrowthRate = isMushPhase ? GrowthRate / 100 : GrowthRate;\n  NormGrowthRate = Math.max(0, NormGrowthRate); // Ensure non-negative\n\n  // --- Calculate Flows (Rates of Change between Stocks) ---\n  // Ensure all flows are non-negative\n  const flow_Breakdown = Math.max(0, currentMycelium * currentParams['C BD Rate'] * currentComplexC * RawGrowthRate * VolumeNormalisation);\n  const flow_CCons = Math.max(0, NormGrowthRate * currentParams['C Cons. Rate']); // Simple C consumption\n  const flow_CO2Prod = Math.max(0, NormGrowthRate * currentParams['CO2 Production Rate']); // CO2 production\n  const flow_CO2Vent = Math.max(0, currentParams['CO2 Removal Rate'] * (currentCO2 - currentParams['External CO2']) * VolumeNormalisation); // CO2 ventilation\n  const flow_Colonisation = isMushPhase ? 0 : GrowthRate; // Mycelium growth (colonisation)\n  const flow_MushroomGrowth = isMushPhase ? Math.max(0, GrowthRate * currentParams['Mushroom Multiplier']) : 0; // Mushroom fruit body growth\n  const flow_NCons = Math.max(0, NormGrowthRate * currentParams['N Rate']); // Nitrogen consumption\n  const flow_TempProd = Math.max(0, NormGrowthRate * currentParams['Temp Production Rate']); // Temperature production\n  const flow_TempVent = Math.max(0, (currentTemp - currentParams['External Temp']) * currentParams['Temp Transfer Rate'] * VolumeNormalisation); // Temperature ventilation\n\n  // --- Assign Derivatives (dStock/dt = Inflows - Outflows) ---\n  dydt[0] = flow_CO2Prod - flow_CO2Vent; // dCO2/dt\n  dydt[1] = -flow_Breakdown; // dComplexC/dt\n  dydt[2] = flow_MushroomGrowth; // dMushroomYield/dt\n  dydt[3] = flow_Colonisation; // dMycelium/dt\n  dydt[4] = -flow_NCons; // dN/dt\n  dydt[5] = flow_Breakdown - flow_CCons; // dSimpleC/dt\n  dydt[6] = -flow_Colonisation; // dSpace/dt\n  dydt[7] = flow_TempProd - flow_TempVent; // dTemp/dt\n\n  // --- Apply Non-Negative Constraints (Floor Check) ---\n  // Prevent stocks from going below zero due to numerical inaccuracies or model behavior\n  const epsilon = 1e-9; // Small threshold instead of direct zero comparison\n  if (y[0] <= epsilon && dydt[0] < 0) dydt[0] = 0; // CO2\n  if (y[1] <= epsilon && dydt[1] < 0) dydt[1] = 0; // ComplexC\n  if (y[2] <= epsilon && dydt[2] < 0) dydt[2] = 0; // MushroomYield\n  if (y[3] <= epsilon && dydt[3] < 0) dydt[3] = 0; // Mycelium\n  if (y[4] <= epsilon && dydt[4] < 0) dydt[4] = 0; // N\n  if (y[5] <= epsilon && dydt[5] < 0) dydt[5] = 0; // SimpleC\n  if (y[6] <= epsilon && dydt[6] < 0) dydt[6] = 0; // Space\n  // Temperature might naturally go below zero (Celsius), so no floor constraint needed unless modeling absolute zero.\n}\n\n/**\r\n * Calculates the initial state vector for the simulation.\r\n * @param {object} p - Parameters needed for initial state calculation ('Initial Dry Substrate Weight', 'Initial C:N Ratio', 'Initial Complex:Simple Ratio', 'External CO2', 'External Temp').\r\n * @param {number} initialMyceliumValue - The starting mycelium density (0 to 1).\r\n * @returns {Array<number>} The initial state vector y0.\r\n */\nfunction getInitialState(p, initialMyceliumValue) {\n  const initialDrySubstrateWeight = Number(p['Initial Dry Substrate Weight']);\n  const cnRatio = Number(p['Initial C:N Ratio']); // Use the C:N Ratio passed in 'p'\n  const complexSimpleRatio = Number(p['Initial Complex:Simple Ratio']);\n\n  // Basic validation\n  if (isNaN(initialDrySubstrateWeight) || initialDrySubstrateWeight <= 0 || isNaN(cnRatio) || cnRatio <= 0 || isNaN(complexSimpleRatio) || complexSimpleRatio < 0 || complexSimpleRatio > 1) {\n    console.error(\"Invalid parameters for getInitialState:\", p);\n    // Return a default state to avoid crashing, though simulation might be meaningless\n    return [400,\n    // CO2\n    200,\n    // ComplexC\n    0,\n    // MushroomYield\n    0.01,\n    // Mycelium\n    10,\n    // N\n    50,\n    // SimpleC\n    0.99,\n    // Space\n    25 // Temp\n    ];\n  }\n  const cnRatioPlusOne = cnRatio + 1;\n  const Init_N = initialDrySubstrateWeight / cnRatioPlusOne; // Initial Nitrogen\n  const Init_C = initialDrySubstrateWeight - Init_N; // Initial Carbon (Total)\n  const initialSpace = Math.max(0, 1 - initialMyceliumValue); // Ensure space isn't negative\n\n  return [Number(p['External CO2']),\n  // 0: Initial CO2 (assumed equilibrium with external)\n  Init_C * complexSimpleRatio,\n  // 1: Initial Complex Carbon\n  0,\n  // 2: Initial Mushroom Yield (always starts at 0)\n  initialMyceliumValue,\n  // 3: Initial Mycelium Density\n  Init_N,\n  // 4: Initial Nitrogen\n  Init_C * (1 - complexSimpleRatio),\n  // 5: Initial Simple Carbon\n  initialSpace,\n  // 6: Initial Available Space (1 - initial mycelium)\n  Number(p['External Temp']) // 7: Initial Temperature (assumed equilibrium with external)\n  ];\n}\n\n/**\r\n * Runs the ODE simulation using RK4 method.\r\n * @param {object} inputParams - User-provided parameters overriding defaults (e.g., Temp, pH, Weight, Duration).\r\n * @param {object} defaultParamSet - The base set of default parameters (Mycelium or Mushroom).\r\n * @returns {Array<object>} Array of result objects, each containing time and state variables.\r\n */\nfunction runSimulation(inputParams, defaultParamSet) {\n  var _currentParams$Initia, _currentParams$Initia2;\n  if (!defaultParamSet) {\n    console.error(\"runSimulation called without defaultParamSet!\");\n    return []; // Return empty array on critical error\n  }\n\n  // Merge parameters: defaults < inputs < forced values\n  const currentParams = {\n    ...defaultParamSet,\n    // Start with the phase-specific defaults\n    ...inputParams,\n    // Override with user inputs from localStorage\n    'Initial C:N Ratio': FIXED_CN_RATIO // Force the C:N Ratio\n  };\n\n  // --- Prepare for Initial State Calculation ---\n  // Extract final values needed, falling back to currentParams (which includes defaults) if somehow missing\n  const finalInitialWeight = Number(currentParams['Initial Dry Substrate Weight']);\n  const finalCNRatio = Number(currentParams['Initial C:N Ratio']); // Use the FIXED ratio\n  const finalComplexSimpleRatio = Number(currentParams['Initial Complex:Simple Ratio']);\n  const finalExternalCO2 = Number(currentParams['External CO2']);\n  const finalExternalTemp = Number(currentParams['External Temp']);\n\n  // Determine initial mycelium based on the phase defined in currentParams\n  const initialMyceliumValue = currentParams['IsMush'] === 0 ? (_currentParams$Initia = currentParams['Initial Mycelium']) !== null && _currentParams$Initia !== void 0 ? _currentParams$Initia : defaultParamsMycelium['Initial Mycelium'] // Use default from set or hardcoded fallback\n  : (_currentParams$Initia2 = currentParams['Initial Mycelium']) !== null && _currentParams$Initia2 !== void 0 ? _currentParams$Initia2 : defaultParamsMushroom['Initial Mycelium']; // Use default from set or hardcoded fallback\n\n  // Create the specific parameter object needed for getInitialState\n  const initialStateParams = {\n    'Initial Dry Substrate Weight': finalInitialWeight,\n    'Initial C:N Ratio': finalCNRatio,\n    // Pass the FIXED ratio\n    'Initial Complex:Simple Ratio': finalComplexSimpleRatio,\n    'External CO2': finalExternalCO2,\n    'External Temp': finalExternalTemp\n  };\n\n  // Calculate the initial state vector\n  const y0 = getInitialState(initialStateParams, initialMyceliumValue);\n\n  // --- Setup RK4 Integrator ---\n  const t0 = currentParams.timeStart;\n  const dt = currentParams.timeStep;\n  const timeLength = Math.max(0, Number(currentParams.timeLength)); // Ensure non-negative duration\n  const positiveDt = Math.max(dt, 1e-6); // Ensure dt is positive and non-zero for solver\n  const numSteps = timeLength > 0 && positiveDt > 0 ? Math.floor(timeLength / positiveDt) : 0;\n\n  // Wrap the derivatives function for the solver\n  const derivativeFuncForSolver = (dydt, y, t) => {\n    try {\n      derivatives(dydt, y, t, currentParams); // Pass the fully merged currentParams\n    } catch (e) {\n      console.error(\"Error inside derivatives function:\", e);\n      // Set derivatives to zero to prevent solver from failing completely if possible\n      dydt.fill(0);\n    }\n  };\n\n  // Initialize the integrator\n  const integrator = odeRK4(y0, derivativeFuncForSolver, t0, positiveDt);\n  const results = [{\n    time: integrator.t,\n    state: [...integrator.y]\n  }]; // Store initial state\n\n  const simType = currentParams['IsMush'] === 0 ? 'Mycelium' : 'Mushroom';\n  console.log(`Starting ${simType} simulation: Time=${timeLength} days, Steps=${numSteps}, dt=${positiveDt}`);\n  if (numSteps <= 0) {\n    console.warn(`${simType} Sim: timeLength or timeStep results in 0 steps. Simulation not run.`);\n    return []; // Return empty if no steps to take\n  }\n\n  // --- Run Simulation Steps ---\n  for (let i = 0; i < numSteps; i++) {\n    try {\n      integrator.step(); // Advance the simulation by one time step\n\n      // --- Sanity Checks & Corrections (Optional but Recommended) ---\n      // Check for non-finite values (NaN, Infinity) which indicate instability\n      if (integrator.y.some(val => !Number.isFinite(val))) {\n        console.error(`${simType} Sim: Non-finite value detected at t=${integrator.t.toFixed(2)}. State:`, integrator.y);\n        // Optionally break early if simulation becomes unstable\n        // break;\n      }\n\n      // Example: Correct negative Mycelium if it occurs due to numerical issues\n      // if (integrator.y[3] < 0) {\n      //     // console.warn(`${simType} Sim: Mycelium became negative at t=${integrator.t.toFixed(2)}, correcting to 0.`);\n      //     integrator.y[3] = 0;\n      // }\n      // Add similar checks for other critical state variables if needed (e.g., N, C, Space)\n\n      // Store the results for this time step\n      results.push({\n        time: integrator.t,\n        state: [...integrator.y]\n      });\n    } catch (solverError) {\n      console.error(`${simType} Sim: RK4 solver error at t=${integrator.t.toFixed(2)}:`, solverError);\n      // Stop the simulation if the solver encounters an error\n      break;\n    }\n  }\n  console.log(`${simType} simulation finished after ${results.length - 1} steps.`);\n\n  // Map results to named properties for easier use\n  return results.map(p => ({\n    time: p.time,\n    CO2: p.state[0],\n    ComplexC: p.state[1],\n    MushroomYield: p.state[2],\n    Mycelium: p.state[3],\n    N: p.state[4],\n    SimpleC: p.state[5],\n    Space: p.state[6],\n    Temp: p.state[7]\n  }));\n}\n// --- (End of Simulation Functions) ---\n\n// --- Helper Functions ---\n\n/**\r\n * Formats a date string (YYYY-MM-DD) to DD-MM-YYYY.\r\n * @param {string} dateString - Input date string in YYYY-MM-DD format.\r\n * @returns {string} Formatted date string or 'N/A'.\r\n */\nfunction formatDate_DDMMYYYY(dateString) {\n  if (!dateString || dateString === 'N/A' || !/^\\d{4}-\\d{2}-\\d{2}$/.test(dateString)) {\n    return 'N/A';\n  }\n  try {\n    const [year, month, day] = dateString.split('-');\n    return `${day}-${month}-${year}`;\n  } catch (e) {\n    console.error(\"Error formatting date:\", e);\n    return 'N/A';\n  }\n}\n\n/**\r\n * Calculates the end date based on start date and duration, then formats it.\r\n * @param {string} startDateStr - Start date in YYYY-MM-DD format.\r\n * @param {number} durationDays - Duration of the simulation in days.\r\n * @returns {string} Formatted end date (DD-MM-YYYY) or 'N/A'.\r\n */\nfunction calculateAndFormatEndDate(startDateStr, durationDays) {\n  // Validate inputs\n  if (!startDateStr || startDateStr === 'N/A' || !/^\\d{4}-\\d{2}-\\d{2}$/.test(startDateStr) || isNaN(durationDays) || durationDays < 0) {\n    return 'N/A';\n  }\n  try {\n    const startDateObj = new Date(startDateStr);\n    // Create a *new* date object for calculation to avoid modifying the original\n    const endDateObj = new Date(startDateObj.getTime());\n    // Add the duration in days\n    endDateObj.setDate(endDateObj.getDate() + durationDays);\n\n    // Format the calculated end date back to YYYY-MM-DD for the helper function\n    const endYear = endDateObj.getFullYear();\n    const endMonth = String(endDateObj.getMonth() + 1).padStart(2, '0'); // Month is 0-indexed\n    const endDay = String(endDateObj.getDate()).padStart(2, '0');\n    const endDateStrYYYYMMDD = `${endYear}-${endMonth}-${endDay}`;\n    return formatDate_DDMMYYYY(endDateStrYYYYMMDD); // Use existing formatter\n  } catch (dateError) {\n    console.error(\"Error calculating end date:\", dateError);\n    return 'N/A';\n  }\n}\n\n// --- React Component Definition ---\nconst GrowthSimulation = () => {\n  _s();\n  const navigate = useNavigate();\n  const chartRef = useRef(null); // Ref to access the chart instance\n\n  // --- State Variables ---\n  const [simulationResultsMushroom, setSimulationResultsMushroom] = useState(null);\n  const [simulationResultsMycelium, setSimulationResultsMycelium] = useState(null);\n  const [isLoading, setIsLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [batchName, setBatchName] = useState('');\n  const [startDate, setStartDate] = useState(''); // Stores YYYY-MM-DD from localStorage\n  const [endDate, setEndDate] = useState('N/A'); // Stores formatted DD-MM-YYYY end date\n  const [finalSimulatedYield, setFinalSimulatedYield] = useState(null); // Stores final yield number\n  const [activeChartTab, setActiveChartTab] = useState('yield'); // Controls which chart is visible\n  const [animationImageSrc, setAnimationImageSrc] = useState(null); // Holds the path for the animation image\n\n  // --- Local Storage Keys ---\n  const LOCAL_STORAGE_KEYS = {\n    TEMPERATURE: 'sim_temperature',\n    PH: 'sim_ph',\n    SUBSTRATE: 'sim_substrate',\n    SIMULATION_DAYS: 'sim_duration',\n    BATCH_NAME: 'sim_batch_name',\n    START_DATE: 'sim_start_date' // Expects YYYY-MM-DD\n  };\n\n  // --- Effect Hook to Run Simulations on Mount ---\n  useEffect(() => {\n    let isMounted = true; // Flag to prevent state updates on unmounted component\n    // Reset state variables at the start of the effect\n    setIsLoading(true);\n    setError(null);\n    setFinalSimulatedYield(null);\n    setSimulationResultsMushroom(null);\n    setSimulationResultsMycelium(null);\n    setEndDate('N/A');\n    setAnimationImageSrc(null); // Reset animation image\n\n    const runSimulationsAsync = async () => {\n      // Short delay to allow UI to update to loading state if needed\n      await new Promise(resolve => setTimeout(resolve, 50));\n      if (!isMounted) return; // Exit if component unmounted during delay\n\n      let savedTempStr, savedPhStr, savedSubstrateJson, savedDaysStr, savedBatchName, savedStartDateStr;\n      try {\n        // --- Load Parameters from Local Storage ---\n        savedTempStr = localStorage.getItem(LOCAL_STORAGE_KEYS.TEMPERATURE);\n        savedPhStr = localStorage.getItem(LOCAL_STORAGE_KEYS.PH);\n        savedSubstrateJson = localStorage.getItem(LOCAL_STORAGE_KEYS.SUBSTRATE);\n        savedDaysStr = localStorage.getItem(LOCAL_STORAGE_KEYS.SIMULATION_DAYS);\n        savedBatchName = localStorage.getItem(LOCAL_STORAGE_KEYS.BATCH_NAME) || 'N/A';\n        savedStartDateStr = localStorage.getItem(LOCAL_STORAGE_KEYS.START_DATE) || 'N/A'; // Expects YYYY-MM-DD\n\n        if (isMounted) {\n          setBatchName(savedBatchName);\n          setStartDate(savedStartDateStr); // Store the raw YYYY-MM-DD start date\n        }\n\n        // --- Validate Required Parameters ---\n        const missingParams = [];\n        if (savedTempStr === null) missingParams.push('Temperature');\n        if (savedPhStr === null) missingParams.push('pH');\n        if (savedSubstrateJson === null) missingParams.push('Substrate');\n        if (savedDaysStr === null) missingParams.push('Duration');\n        // Start date is optional for simulation run but needed for end date display\n        // if (savedStartDateStr === 'N/A') missingParams.push('Start Date');\n\n        if (missingParams.length > 0) {\n          throw new Error(`Missing required simulation parameters: ${missingParams.join(', ')}. Please set them in Condition Settings.`);\n        }\n\n        // --- Parse and Validate Numerical Parameters ---\n        const temp = parseFloat(savedTempStr);\n        const phValue = parseFloat(savedPhStr);\n        const days = parseInt(savedDaysStr, 10);\n        let substrateData = null;\n        let initialWeight = 0;\n        try {\n          substrateData = JSON.parse(savedSubstrateJson);\n          if (typeof substrateData !== 'object' || substrateData === null) throw new Error(\"Invalid substrate JSON format.\");\n          // Calculate initial weight from substrate components\n          initialWeight = Object.values(substrateData).reduce((sum, val) => sum + (Number(val) || 0), 0);\n          if (initialWeight <= 0) console.warn(\"Initial substrate weight calculated from components is zero or negative.\");\n        } catch (parseError) {\n          throw new Error(`Invalid substrate data in localStorage: ${parseError.message}`);\n        }\n        if (isNaN(temp) || isNaN(phValue) || isNaN(initialWeight) || isNaN(days) || days < 0) {\n          throw new Error(\"Invalid or missing numerical parameters (Temperature, pH, Weight, or Duration).\");\n        }\n        const simulationDuration = days; // Use the parsed days directly\n\n        // --- Calculate and Set End Date ---\n        const calculatedEndDate = calculateAndFormatEndDate(savedStartDateStr, simulationDuration);\n        if (isMounted) {\n          setEndDate(calculatedEndDate); // Set the formatted end date state\n        }\n\n        // --- Prepare Inputs for Simulation Function ---\n        const simulationInputs = {\n          'External Temp': temp,\n          'pH': phValue,\n          'Initial Dry Substrate Weight': initialWeight,\n          // Use calculated weight\n          'timeLength': simulationDuration\n        };\n\n        // --- Run Both Simulations ---\n        console.log(\"Running Mushroom Simulation...\");\n        const resultsMushroom = runSimulation(simulationInputs, defaultParamsMushroom);\n        console.log(\"Running Mycelium Simulation...\");\n        const resultsMycelium = runSimulation(simulationInputs, defaultParamsMycelium);\n\n        // --- Update State with Simulation Results ---\n        if (isMounted) {\n          setSimulationResultsMushroom(resultsMushroom);\n          setSimulationResultsMycelium(resultsMycelium);\n\n          // Extract final yield from mushroom simulation results\n          if (resultsMushroom && resultsMushroom.length > 0) {\n            const lastMushroomResult = resultsMushroom[resultsMushroom.length - 1];\n            if (lastMushroomResult && Number.isFinite(lastMushroomResult.MushroomYield)) {\n              setFinalSimulatedYield(lastMushroomResult.MushroomYield);\n            } else {\n              console.warn(\"Final mushroom yield is not a finite number.\");\n              setFinalSimulatedYield(null); // Set to null if not finite or undefined\n            }\n          } else {\n            console.warn(\"Mushroom simulation produced no results.\");\n            setFinalSimulatedYield(null); // Set to null if no results\n          }\n          console.log(\"Both simulations complete.\");\n        }\n      } catch (err) {\n        console.error(\"Error during simulation setup or execution:\", err);\n        if (isMounted) setError(err.message || \"An unexpected error occurred during simulation.\");\n      } finally {\n        // Ensure loading state is turned off even if errors occur\n        if (isMounted) setIsLoading(false);\n      }\n    };\n    runSimulationsAsync();\n\n    // --- Cleanup Function ---\n    // This runs when the component unmounts\n    return () => {\n      isMounted = false; // Set flag to false to prevent state updates after unmount\n      console.log(\"GrowthSimulation component unmounted.\");\n    };\n  }, []); // Empty dependency array means this effect runs only once on mount\n\n  // --- Event Handlers ---\n  const handleBackClick = () => {\n    navigate('/condition-setting'); // Navigate back to the settings page\n  };\n\n  /**\r\n   * Handles clicks on the chart points.\r\n   * Shows a specific image if Day 0 on the Yield chart is clicked.\r\n   * @param {object} event - The click event object from Chart.js.\r\n   */\n  const handleChartClick = event => {\n    const chart = chartRef.current; // Get the chart instance via ref\n    if (!chart) {\n      console.warn(\"Chart instance not available for click handling.\");\n      return;\n    }\n    const elements = getElementAtEvent(chart, event); // Get clicked elements\n\n    if (elements.length > 0) {\n      var _chart$config$data$da;\n      const {\n        datasetIndex,\n        index\n      } = elements[0]; // Get info from the first clicked element\n      // Access the data point directly from the chart's configuration\n      const dataPoint = (_chart$config$data$da = chart.config.data.datasets[datasetIndex]) === null || _chart$config$data$da === void 0 ? void 0 : _chart$config$data$da.data[index];\n\n      // Check if the click was on the 'yield' tab and the data point exists\n      if (dataPoint && activeChartTab === 'yield') {\n        // Check if the x value (time) is 0 (use a small tolerance for float comparison)\n        if (Math.abs(dataPoint.x - 0) < 0.001) {\n          console.log(\"Clicked Day 0 on Yield Chart. Displaying Asset 1.\");\n          setAnimationImageSrc(asset1Src); // Set the image source state\n        } else {\n          // If another point on the yield chart is clicked, clear the image\n          console.log(`Clicked point time ${dataPoint.x.toFixed(2)} on Yield chart. Clearing image.`);\n          setAnimationImageSrc(null);\n        }\n      } else {\n        // If clicked on a different tab's chart or invalid point, clear the image\n        console.log(\"Clicked non-yield chart or invalid point. Clearing image.\");\n        setAnimationImageSrc(null);\n      }\n    } else {\n      // Optional: Behavior when clicking the chart background (not on a point)\n      // console.log(\"Clicked chart background. Clearing image.\");\n      // setAnimationImageSrc(null); // Uncomment to clear image on background click\n    }\n  };\n\n  // --- Chart Configuration Function ---\n  /**\r\n   * Generates the data and options configuration for the active chart tab.\r\n   * @returns {object} Object containing { data, options } for the Chart component.\r\n   */\n  const getChartConfig = () => {\n    // Determine which simulation results to use based on the active tab\n    const currentResultsSource = activeChartTab === 'mycelium' ? simulationResultsMycelium : simulationResultsMushroom; // Default to mushroom sim for yield/temp charts\n\n    // --- Default Chart Options ---\n    const yieldColor = '#2E7D32';\n    const tempColor = '#C62828';\n    const myceliumColor = '#1976D2';\n    const textColor = '#333';\n    const gridColor = 'rgba(0, 0, 0, 0.08)';\n    const font = {\n      family: 'Lexend',\n      weight: '300'\n    }; // Example font\n\n    const options = {\n      responsive: true,\n      // Chart scales with container size\n      maintainAspectRatio: false,\n      // Allow chart to fill container height\n      plugins: {\n        legend: {\n          display: true,\n          labels: {\n            color: textColor,\n            font: font\n          }\n        },\n        tooltip: {\n          enabled: true,\n          bodyFont: font,\n          titleFont: font\n        },\n        title: {\n          display: true,\n          text: '',\n          color: textColor,\n          font: {\n            ...font,\n            size: 16,\n            weight: '500'\n          }\n        } // Slightly bolder title\n      },\n      scales: {\n        x: {\n          // X-Axis Configuration (Time)\n          type: 'linear',\n          title: {\n            display: true,\n            text: 'Time (Days)',\n            color: textColor,\n            font: font\n          },\n          ticks: {\n            color: textColor,\n            font: font,\n            precision: 0 // <<< Display whole numbers on the x-axis\n          },\n          grid: {\n            color: gridColor\n          },\n          min: 0,\n          // Start axis at 0\n          max: undefined // Let Chart.js determine max initially\n        },\n        // Y-Axis Definitions (initially hidden, enabled based on active tab)\n        yYield: {\n          type: 'linear',\n          position: 'left',\n          title: {\n            display: true,\n            text: 'Mushroom Yield (g)',\n            color: yieldColor,\n            font: font\n          },\n          ticks: {\n            color: yieldColor,\n            font: font\n          },\n          grid: {\n            drawOnChartArea: true,\n            color: gridColor\n          },\n          // Main grid lines for this axis\n          beginAtZero: true,\n          display: false // Hidden by default\n        },\n        yTemp: {\n          type: 'linear',\n          position: 'left',\n          // Can be 'right' if needed\n          title: {\n            display: true,\n            text: 'Temperature (°C)',\n            color: tempColor,\n            font: font\n          },\n          ticks: {\n            color: tempColor,\n            font: font\n          },\n          grid: {\n            drawOnChartArea: false\n          },\n          // No grid lines for this axis if sharing space\n          // beginAtZero: false, // Temp doesn't necessarily start at 0\n          display: false // Hidden by default\n        },\n        yMycelium: {\n          type: 'linear',\n          position: 'left',\n          title: {\n            display: true,\n            text: 'Mycelium Density',\n            color: myceliumColor,\n            font: font\n          },\n          ticks: {\n            color: myceliumColor,\n            font: font,\n            callback: value => value.toFixed(2)\n          },\n          // Format to 2 decimal places\n          grid: {\n            drawOnChartArea: true,\n            color: gridColor\n          },\n          // Main grid lines\n          beginAtZero: true,\n          suggestedMax: 1,\n          // Mycelium density is 0-1\n          display: false // Hidden by default\n        }\n      },\n      // Interaction settings for tooltips and clicks\n      interaction: {\n        mode: 'nearest',\n        // Find nearest item in any dataset\n        axis: 'x',\n        // Primarily interact based on x-axis proximity\n        intersect: false // Tooltip triggers even if not directly hovering over point\n      }\n      // onClick: handleChartClick // Can be defined here or on the component prop\n    };\n\n    // Reset Y-axis display flags before setting the active one\n    options.scales.yYield.display = false;\n    options.scales.yTemp.display = false;\n    options.scales.yMycelium.display = false;\n\n    // Return empty config if simulation data isn't ready\n    if (!currentResultsSource || currentResultsSource.length === 0) {\n      // console.log(`Chart config: No data available for tab: ${activeChartTab}`);\n      return {\n        data: {\n          datasets: []\n        },\n        options: options\n      };\n    }\n\n    // --- Generate Datasets based on Active Tab ---\n    let datasets = [];\n    let chartData = [...currentResultsSource]; // Use a copy of the data\n    let dataSourceName = ''; // To label the chart title source\n\n    switch (activeChartTab) {\n      case 'yield':\n        dataSourceName = 'Mushroom Sim';\n        options.plugins.title.text = `Yield Over Time (${dataSourceName})`;\n        options.scales.yYield.display = true; // Show yield axis\n        datasets = [{\n          label: 'Mushroom Yield (g)',\n          data: chartData.map(p => ({\n            x: p.time,\n            y: Number.isFinite(p.MushroomYield) ? p.MushroomYield : null\n          })),\n          // Handle non-finite values\n          borderColor: yieldColor,\n          backgroundColor: 'rgba(46, 125, 50, 0.1)',\n          // Light fill\n          yAxisID: 'yYield' // Link to the correct Y axis\n        }];\n        // Set X axis max based on the full duration of this dataset\n        options.scales.x.max = chartData.length > 0 ? chartData[chartData.length - 1].time : undefined;\n        break;\n      case 'temp':\n        dataSourceName = 'Mushroom Sim';\n        options.plugins.title.text = `Temperature Over Time (${dataSourceName})`;\n        options.scales.yTemp.display = true; // Show temp axis\n        datasets = [{\n          label: 'Temperature (°C)',\n          data: chartData.map(p => ({\n            x: p.time,\n            y: Number.isFinite(p.Temp) ? p.Temp : null\n          })),\n          borderColor: tempColor,\n          backgroundColor: 'rgba(198, 40, 40, 0.1)',\n          yAxisID: 'yTemp'\n        }];\n        // Set X axis max based on the full duration\n        options.scales.x.max = chartData.length > 0 ? chartData[chartData.length - 1].time : undefined;\n        break;\n      case 'mycelium':\n        dataSourceName = 'Mycelium Sim';\n        options.plugins.title.text = `Mycelium Growth (${dataSourceName})`;\n        options.scales.yMycelium.display = true; // Show mycelium axis\n\n        // --- Apply Cutoff Logic for Mycelium Chart ---\n        let cutoffIndex = chartData.findIndex(p => p.Mycelium >= 0.9); // Find first point >= 0.9\n        let finalTime = chartData.length > 0 ? chartData[chartData.length - 1].time : 0; // Default to full duration\n        let cutoffReason = \"Simulation End\";\n        if (cutoffIndex !== -1) {\n          // Found threshold\n          // Cut off data at or just after the threshold is met\n          chartData = chartData.slice(0, cutoffIndex + 1);\n          finalTime = chartData[chartData.length - 1].time; // Time at cutoff\n          cutoffReason = \"Mycelium >= 0.9\";\n          // console.log(`Mycelium chart cutoff at index ${cutoffIndex}, time ${finalTime.toFixed(2)} (${cutoffReason})`);\n        } else {\n          // Threshold 0.9 NOT met, check for day 30 cutoff\n          const day30Index = chartData.findIndex(p => p.time >= 30); // Find first point >= day 30\n          if (day30Index !== -1) {\n            // Found day >= 30\n            // Cut off data at or just after day 30\n            chartData = chartData.slice(0, day30Index + 1);\n            finalTime = chartData[chartData.length - 1].time; // Time at day 30 (or just after)\n            cutoffReason = \"Day 30 Limit\";\n            // console.log(`Mycelium chart cutoff at index ${day30Index}, time ${finalTime.toFixed(2)} (${cutoffReason})`);\n          } else {// Less than 30 days simulated AND threshold not met\n            // console.log(`Mycelium threshold 0.9 not reached and simulation ended before day 30 (t=${finalTime.toFixed(2)}). Showing all data.`);\n            // finalTime is already set to the last available time\n          }\n        }\n\n        // Set max time for X-axis based on cutoff or full duration\n        options.scales.x.max = finalTime;\n\n        // Add cutoff reason to title if applicable\n        if (cutoffReason !== \"Simulation End\") {\n          options.plugins.title.text += ` (Stopped at ${cutoffReason})`;\n        }\n        datasets = [{\n          label: 'Mycelium Density',\n          data: chartData.map(p => ({\n            x: p.time,\n            y: Number.isFinite(p.Mycelium) ? p.Mycelium : null\n          })),\n          borderColor: myceliumColor,\n          backgroundColor: 'rgba(25, 118, 210, 0.1)',\n          yAxisID: 'yMycelium'\n        }];\n        break;\n      default:\n        // Should not happen if activeChartTab is managed correctly\n        datasets = [];\n    }\n\n    // --- Final Dataset Processing ---\n    // Apply common styling and filter out empty datasets\n    const finalDatasets = datasets && datasets.length > 0 ? datasets.map(ds => {\n      var _ds$data, _ds$data2;\n      return {\n        ...ds,\n        tension: 0.1,\n        // Slight curve to lines\n        pointRadius: ((_ds$data = ds.data) === null || _ds$data === void 0 ? void 0 : _ds$data.length) > 150 ? 0.5 : ((_ds$data2 = ds.data) === null || _ds$data2 === void 0 ? void 0 : _ds$data2.length) > 50 ? 1 : 2,\n        // Adjust point size based on data density\n        pointHoverRadius: 4,\n        // Larger point on hover\n        borderWidth: 1.5,\n        // Line thickness\n        spanGaps: true // Connect lines over null/undefined data points\n      };\n    }).filter(ds => ds.data && ds.data.length > 0) // Ensure dataset has data points\n    : [];\n    if (finalDatasets.length === 0 && currentResultsSource && currentResultsSource.length > 0) {\n      // This might happen if filtering removes the dataset (e.g., all yields were null)\n      console.log(`No valid data points to display for tab: ${activeChartTab}`);\n    }\n\n    // Return the final configuration object\n    return {\n      data: {\n        datasets: finalDatasets\n      },\n      options: options\n    };\n  };\n  // --- End getChartConfig function ---\n\n  // --- Render Logic ---\n  const chartConfig = getChartConfig(); // Generate the chart config based on current state\n  // Check if either simulation has produced results\n  const simulationDataReady = simulationResultsMushroom || simulationResultsMycelium;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"growth-simulation\",\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"simulation-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"logobox\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleBackClick,\n          className: \"back-button\",\n          title: \"Back to Settings\",\n          children: \"\\u2190\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 840,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"logo\",\n          children: /*#__PURE__*/_jsxDEV(\"img\", {\n            src: logoSrc,\n            alt: \"City Sprouts Logo\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 842,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 841,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 839,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"batch-info\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"batch-name\",\n          children: [\"Batch: \", batchName]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 846,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"start-date\",\n          children: [\"Start: \", formatDate_DDMMYYYY(startDate)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 848,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 845,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 838,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n      className: \"main-content-grid\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"animation-area content-card\",\n        children: animationImageSrc ? /*#__PURE__*/_jsxDEV(\"img\", {\n          src: animationImageSrc,\n          alt: \"Simulation state representation\" // More descriptive alt text\n          ,\n          style: {\n            maxWidth: '100%',\n            maxHeight: '100%',\n            objectFit: 'contain',\n            display: 'block',\n            margin: 'auto'\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 858,\n          columnNumber: 25\n        }, this) : /*#__PURE__*/_jsxDEV(\"span\", {\n          children: \"Animation / Visualization Area\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 864,\n          columnNumber: 25\n        }, this) // Default text\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 855,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chart-results-column\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"tabs-container\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => {\n              setActiveChartTab('yield');\n              setAnimationImageSrc(null);\n            } // Clear animation on tab change\n            ,\n            className: `tab-button ${activeChartTab === 'yield' ? 'tab-button-active' : ''}`,\n            children: \"Yield\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 872,\n            columnNumber: 26\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => {\n              setActiveChartTab('temp');\n              setAnimationImageSrc(null);\n            },\n            className: `tab-button ${activeChartTab === 'temp' ? 'tab-button-active' : ''}`,\n            children: \"Temperature\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 878,\n            columnNumber: 26\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => {\n              setActiveChartTab('mycelium');\n              setAnimationImageSrc(null);\n            },\n            className: `tab-button ${activeChartTab === 'mycelium' ? 'tab-button-active' : ''}`,\n            children: \"Mycelium\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 884,\n            columnNumber: 26\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 871,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"chart-area content-card\",\n          children: [isLoading && /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"loading-message\",\n            children: \"Running simulations, please wait...\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 894,\n            columnNumber: 39\n          }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"error-message\",\n            children: [\"Error: \", error]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 895,\n            columnNumber: 35\n          }, this), !isLoading && !error && simulationDataReady && (\n          // Check if the *generated* chart config actually has datasets to display\n          chartConfig.data.datasets.length > 0 ? /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"chart-container\",\n            children: /*#__PURE__*/_jsxDEV(Line, {\n              ref: chartRef // Assign ref to access chart instance\n              ,\n              options: chartConfig.options // Pass calculated options\n              ,\n              data: chartConfig.data // Pass calculated data\n              ,\n              onClick: handleChartClick // Attach click handler\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 900,\n              columnNumber: 37\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 899,\n            columnNumber: 33\n          }, this) :\n          /*#__PURE__*/\n          // Message if simulation ran but produced no displayable data for this tab\n          _jsxDEV(\"p\", {\n            className: \"no-data-message\",\n            children: [\"No simulation data available to display for the '\", activeChartTab, \"' chart.\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 909,\n            columnNumber: 33\n          }, this)), !isLoading && !error && !simulationDataReady && /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"no-data-message\",\n            children: \"Simulation results are not yet available.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 913,\n            columnNumber: 74\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 893,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"results-section content-card\",\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            className: \"results-heading\",\n            children: [\"Simulation Results\", /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"info-icon\",\n              title: \"Projected yield is based on the Mushroom phase simulation. End date calculated from start date and duration.\",\n              children: \"i\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 920,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 918,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"results-items\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"result-item\",\n              children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"result-label\",\n                children: \"Projected Yield:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 925,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"result-value\",\n                children: isLoading ? '...' : error ? 'Error' : finalSimulatedYield !== null && Number.isFinite(finalSimulatedYield) ? `${finalSimulatedYield.toFixed(1)}g` : 'N/A'\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 926,\n                columnNumber: 33\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 924,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"result-item\",\n              children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"result-label\",\n                children: \"Projected End Date:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 932,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"result-value\",\n                children: isLoading ? '...' : error ? 'Error' : endDate\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 933,\n                columnNumber: 33\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 931,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 922,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 917,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 869,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 853,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 836,\n    columnNumber: 9\n  }, this);\n};\n_s(GrowthSimulation, \"jbcigRMmDW+PUHcTlYTkCDroljQ=\", false, function () {\n  return [useNavigate];\n});\n_c = GrowthSimulation;\nexport default GrowthSimulation;\nvar _c;\n$RefreshReg$(_c, \"GrowthSimulation\");","map":{"version":3,"names":["React","useState","useEffect","useRef","useNavigate","Line","Chart","ChartJS","LineElement","PointElement","Tooltip","Legend","CategoryScale","LinearScale","Title","Interaction","getElementAtEvent","odeRK4","logoSrc","asset1Src","jsxDEV","_jsxDEV","register","defaultParamsMushroom","timeStart","timeLength","timeStep","defaultParamsMycelium","FIXED_CN_RATIO","linearInterpolate","data","x","length","i","x0","y0","x1","y1","divisor","t","derivatives","dydt","y","currentParams","currentCO2","currentComplexC","currentMushroomYield","currentMycelium","currentN","currentSimpleC","currentSpace","currentTemp","initialDrySubstrateWeight","cnRatio","cnRatioPlusOne","InitC","AvailableN","AvailableC","VolumeNormalisation","Math","sqrt","Effect_of_CO2_on_Mush_Growth","Effect_of_CO2_on_Myc_Growth","Effect_of_pH_on_Mush_Growth","Effect_of_pH_on_Myc_Growth","Effect_of_Temp_on_Mush_Growth","Effect_of_Temp_on_Myc_Growth","isMushPhase","TempEff_","TempEffect","pHEff_","pHEffect","CO2Eff_","CO2Effect","NEffect","CEffect","max","safeTempEffect","safePhEffect","safeNEffect","safeCEffect","safeCO2Effect","RawGrowthRate","GrowthOpp","GrowthRate","NormGrowthRate","flow_Breakdown","flow_CCons","flow_CO2Prod","flow_CO2Vent","flow_Colonisation","flow_MushroomGrowth","flow_NCons","flow_TempProd","flow_TempVent","epsilon","getInitialState","p","initialMyceliumValue","Number","complexSimpleRatio","isNaN","console","error","Init_N","Init_C","initialSpace","runSimulation","inputParams","defaultParamSet","_currentParams$Initia","_currentParams$Initia2","finalInitialWeight","finalCNRatio","finalComplexSimpleRatio","finalExternalCO2","finalExternalTemp","initialStateParams","t0","dt","positiveDt","numSteps","floor","derivativeFuncForSolver","e","fill","integrator","results","time","state","simType","log","warn","step","some","val","isFinite","toFixed","push","solverError","map","CO2","ComplexC","MushroomYield","Mycelium","N","SimpleC","Space","Temp","formatDate_DDMMYYYY","dateString","test","year","month","day","split","calculateAndFormatEndDate","startDateStr","durationDays","startDateObj","Date","endDateObj","getTime","setDate","getDate","endYear","getFullYear","endMonth","String","getMonth","padStart","endDay","endDateStrYYYYMMDD","dateError","GrowthSimulation","_s","navigate","chartRef","simulationResultsMushroom","setSimulationResultsMushroom","simulationResultsMycelium","setSimulationResultsMycelium","isLoading","setIsLoading","setError","batchName","setBatchName","startDate","setStartDate","endDate","setEndDate","finalSimulatedYield","setFinalSimulatedYield","activeChartTab","setActiveChartTab","animationImageSrc","setAnimationImageSrc","LOCAL_STORAGE_KEYS","TEMPERATURE","PH","SUBSTRATE","SIMULATION_DAYS","BATCH_NAME","START_DATE","isMounted","runSimulationsAsync","Promise","resolve","setTimeout","savedTempStr","savedPhStr","savedSubstrateJson","savedDaysStr","savedBatchName","savedStartDateStr","localStorage","getItem","missingParams","Error","join","temp","parseFloat","phValue","days","parseInt","substrateData","initialWeight","JSON","parse","Object","values","reduce","sum","parseError","message","simulationDuration","calculatedEndDate","simulationInputs","resultsMushroom","resultsMycelium","lastMushroomResult","err","handleBackClick","handleChartClick","event","chart","current","elements","_chart$config$data$da","datasetIndex","index","dataPoint","config","datasets","abs","getChartConfig","currentResultsSource","yieldColor","tempColor","myceliumColor","textColor","gridColor","font","family","weight","options","responsive","maintainAspectRatio","plugins","legend","display","labels","color","tooltip","enabled","bodyFont","titleFont","title","text","size","scales","type","ticks","precision","grid","min","undefined","yYield","position","drawOnChartArea","beginAtZero","yTemp","yMycelium","callback","value","suggestedMax","interaction","mode","axis","intersect","chartData","dataSourceName","label","borderColor","backgroundColor","yAxisID","cutoffIndex","findIndex","finalTime","cutoffReason","slice","day30Index","finalDatasets","ds","_ds$data","_ds$data2","tension","pointRadius","pointHoverRadius","borderWidth","spanGaps","filter","chartConfig","simulationDataReady","className","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","src","alt","style","maxWidth","maxHeight","objectFit","margin","ref","_c","$RefreshReg$"],"sources":["C:/Users/celst/sds/src/components/GrowthSimulation.jsx"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { Line } from 'react-chartjs-2';\r\nimport {\r\n    Chart as ChartJS,\r\n    LineElement,\r\n    PointElement,\r\n    Tooltip,\r\n    Legend,\r\n    CategoryScale,\r\n    LinearScale,\r\n    Title,\r\n    Interaction // Interaction might be needed for click handling modes\r\n} from 'chart.js';\r\nimport { getElementAtEvent } from 'react-chartjs-2'; // Helper for click events\r\nimport odeRK4 from 'ode-rk4'; // ODE solver\r\n\r\n// --- CSS and Asset Imports ---\r\n// Adjust these paths according to your project structure\r\nimport '../styles/GrowthSimulation.css';\r\nimport logoSrc from '../assets/images/cslogo.png';\r\nimport asset1Src from '../assets/images/Asset1.png'; // Image for Day 0 click\r\n\r\n// --- Simulation Logic & ChartJS Registration ---\r\n\r\n// Register necessary ChartJS components\r\nChartJS.register(LineElement, PointElement, Tooltip, Legend, CategoryScale, LinearScale, Title);\r\n\r\n// *** Default Parameters for MUSHROOM Growth ***\r\nconst defaultParamsMushroom = {\r\n    timeStart: 0, timeLength: 100, timeStep: 0.2,\r\n    'C BD Rate': 1.11, 'C Coeff': 0.7, 'C Cons. Rate': 76.39, 'CO2 Coeff': 0.8,\r\n    'CO2 Production Rate': 410000, 'CO2 Removal Rate': 12.6, 'External CO2': 428.23,\r\n    'External Temp': 24, 'Growth Coeff': 5.1,\r\n    'Initial Complex:Simple Ratio': 0.8054,\r\n    'Initial Dry Substrate Weight': 410.2, // Default fallback weight\r\n    'IsMush': 1, // Mushroom phase\r\n    'Mushroom Multiplier': 5.17,\r\n    'N Coeff': 68.4, 'N Rate': 13.03,\r\n    'pH': 6.91, // Default fallback pH\r\n    'pH Coeff': 1.4, 'Temp Coeff': 1.3, 'Temp Production Rate': 405,\r\n    'Temp Transfer Rate': 1.5,\r\n    'Effect of CO2 on Mush Growth Data': [[500, 0.9], [800, 1], [1000, 0.8], [1200, 0.25], [1400, 0]],\r\n    'Effect of CO2 on Myc Growth Data': [[15000, 1], [20000, 0.9], [25000, 0.25], [30000, 0]],\r\n    'Effect of pH on Mush Growth Data': [[5.5, 0], [6, 0.25], [6.7, 1], [7, 0.6], [7.5, 0]],\r\n    'Effect of pH on Myc Growth Data': [[5.8, 0], [6, 0.25], [6.7, 1], [7, 0.6], [7.5, 0]],\r\n    'Effect of Temp on Mush Growth Data': [[10, 0], [15, 5.37], [20, 6.36], [25, 8.63], [30, 6.37], [40, 0]],\r\n    'Effect of Temp on Myc Growth Data': [[10, 0], [15, 5.37], [20, 6.36], [25, 8.63], [30, 6.37], [35, 5.36], [45, 0]],\r\n    'Initial Mycelium': 0.9, // Assume high colonization before fruiting\r\n};\r\n\r\n// *** Default Parameters for MYCELIUM Growth ***\r\nconst defaultParamsMycelium = {\r\n    timeStart: 0, timeLength: 100, timeStep: 0.2,\r\n    'C BD Rate': 1.11, 'C Coeff': 0.7, 'C Cons. Rate': 76.39, 'CO2 Coeff': 0.8,\r\n    'CO2 Production Rate': 410000, 'CO2 Removal Rate': 1,\r\n    'External CO2': 428.23, 'External Temp': 28,\r\n    'Growth Coeff': 5.4,\r\n    'Initial Complex:Simple Ratio': 0.867,\r\n    'Initial Dry Substrate Weight': 200, // Default fallback weight\r\n    'IsMush': 0, // Mycelium phase\r\n    'Mushroom Multiplier': 26,\r\n    'N Coeff': 68.4, 'N Rate': 1.53,\r\n    'pH': 6.91, // Default fallback pH\r\n    'pH Coeff': 1.4, 'Temp Coeff': 1.7,\r\n    'Temp Production Rate': 255,\r\n    'Temp Transfer Rate': 1.5,\r\n    'Effect of CO2 on Mush Growth Data': [[500, 0.9], [800, 1], [1000, 0.8], [1200, 0.25], [1400, 0]],\r\n    'Effect of CO2 on Myc Growth Data': [[15000, 1], [20000, 0.9], [25000, 0.25], [30000, 0]],\r\n    'Effect of pH on Mush Growth Data': [[5.5, 0], [6, 0.25], [6.7, 1], [7, 0.6], [7.5, 0]],\r\n    'Effect of pH on Myc Growth Data': [[5.8, 0], [6, 0.25], [6.7, 1], [7, 0.6], [7.5, 0]],\r\n    'Effect of Temp on Mush Growth Data': [[10, 0], [15, 5.37], [20, 6.36], [25, 8.63], [30, 6.37], [40, 0]],\r\n    'Effect of Temp on Myc Growth Data': [[10, 0], [15, 5.37], [20, 6.36], [25, 8.63], [30, 6.37], [35, 5.36], [45, 0]],\r\n    'Initial Mycelium': 0.004, // From Model(1).json\r\n};\r\n\r\n// FIXED C:N Ratio as previously requested\r\nconst FIXED_CN_RATIO = 0.96;\r\n\r\n// --- Simulation Functions ---\r\n\r\n/**\r\n * Performs linear interpolation on a 2D data array.\r\n * @param {Array<Array<number>>} data - Array of [x, y] points, sorted by x.\r\n * @param {number} x - The x-value to interpolate at.\r\n * @returns {number} The interpolated y-value.\r\n */\r\nfunction linearInterpolate(data, x) {\r\n    if (!data || data.length === 0) return 0;\r\n    // Handle extrapolation (return edge values)\r\n    if (x <= data[0][0]) return data[0][1];\r\n    if (x >= data[data.length - 1][0]) return data[data.length - 1][1];\r\n\r\n    // Find the segment where x falls\r\n    let i = 0;\r\n    while (i < data.length - 1 && x > data[i + 1][0]) i++;\r\n\r\n    const x0 = data[i][0], y0 = data[i][1];\r\n    const x1 = data[i + 1][0], y1 = data[i + 1][1];\r\n\r\n    const divisor = (x1 - x0);\r\n    // Avoid division by zero if points are identical\r\n    if (divisor === 0) return y0;\r\n\r\n    const t = (x - x0) / divisor; // Interpolation factor\r\n    return y0 + t * (y1 - y0);\r\n}\r\n\r\n/**\r\n * Calculates the derivatives for the ODE system.\r\n * @param {Array<number>} dydt - Output array for derivatives.\r\n * @param {Array<number>} y - Current state vector [CO2, ComplexC, MushroomYield, Mycelium, N, SimpleC, Space, Temp].\r\n * @param {number} t - Current time (not explicitly used in this model's equations but required by solver).\r\n * @param {object} currentParams - The merged parameters for the current simulation run.\r\n */\r\nfunction derivatives(dydt, y, t, currentParams) {\r\n    const [ currentCO2, currentComplexC, currentMushroomYield, currentMycelium, currentN, currentSimpleC, currentSpace, currentTemp ] = y;\r\n\r\n    // --- Parameter Extraction and Initial Calculations ---\r\n    const initialDrySubstrateWeight = currentParams['Initial Dry Substrate Weight'] || 1; // Avoid division by zero\r\n    const cnRatio = currentParams['Initial C:N Ratio']; // Use the potentially overridden C:N ratio\r\n    const cnRatioPlusOne = cnRatio + 1;\r\n    const InitC = initialDrySubstrateWeight - (initialDrySubstrateWeight / cnRatioPlusOne); // Total initial Carbon\r\n\r\n    // Availability based on current state (relative to initial weight for consistency with original model logic)\r\n    const AvailableN = initialDrySubstrateWeight > 0 ? currentN / initialDrySubstrateWeight : 0;\r\n    const AvailableC = initialDrySubstrateWeight > 0 ? currentSimpleC / initialDrySubstrateWeight : 0;\r\n\r\n    // Volume normalization factor (adjusts rates based on substrate weight relative to a reference, e.g., 100g)\r\n    const VolumeNormalisation = initialDrySubstrateWeight > 0 ? Math.sqrt(100 / initialDrySubstrateWeight) : Math.sqrt(100);\r\n\r\n    // --- Calculate Environmental Effects using Interpolation ---\r\n    const Effect_of_CO2_on_Mush_Growth = linearInterpolate(currentParams['Effect of CO2 on Mush Growth Data'], currentCO2);\r\n    const Effect_of_CO2_on_Myc_Growth = linearInterpolate(currentParams['Effect of CO2 on Myc Growth Data'], currentCO2);\r\n    const Effect_of_pH_on_Mush_Growth = linearInterpolate(currentParams['Effect of pH on Mush Growth Data'], currentParams['pH']);\r\n    const Effect_of_pH_on_Myc_Growth = linearInterpolate(currentParams['Effect of pH on Myc Growth Data'], currentParams['pH']);\r\n    const Effect_of_Temp_on_Mush_Growth = linearInterpolate(currentParams['Effect of Temp on Mush Growth Data'], currentTemp);\r\n    const Effect_of_Temp_on_Myc_Growth = linearInterpolate(currentParams['Effect of Temp on Myc Growth Data'], currentTemp);\r\n\r\n    // --- Combine Effects based on Growth Phase (IsMush flag) ---\r\n    const isMushPhase = currentParams['IsMush'] === 1;\r\n\r\n    const TempEff_ = isMushPhase ? Effect_of_Temp_on_Mush_Growth : Effect_of_Temp_on_Myc_Growth;\r\n    const TempEffect = (currentParams['Temp Coeff'] * TempEff_) / 10; // Scaled effect\r\n\r\n    const pHEff_ = isMushPhase ? Effect_of_pH_on_Mush_Growth : Effect_of_pH_on_Myc_Growth;\r\n    const pHEffect = pHEff_ * currentParams['pH Coeff'];\r\n\r\n    const CO2Eff_ = isMushPhase ? Effect_of_CO2_on_Mush_Growth : Effect_of_CO2_on_Myc_Growth;\r\n    const CO2Effect = currentParams['CO2 Coeff'] * CO2Eff_;\r\n\r\n    const NEffect = currentParams['N Coeff'] * AvailableN;\r\n    const CEffect = Math.sqrt(Math.max(0, currentParams['C Coeff'] * AvailableC)); // Ensure non-negative input to sqrt\r\n\r\n    // --- Ensure Individual Effects are Non-Negative ---\r\n    const safeTempEffect = Math.max(0, TempEffect);\r\n    const safePhEffect = Math.max(0, pHEffect);\r\n    const safeNEffect = Math.max(0, NEffect);\r\n    const safeCEffect = Math.max(0, CEffect); // Already handled by Math.max inside sqrt\r\n    const safeCO2Effect = Math.max(0, CO2Effect);\r\n\r\n    // --- Calculate Raw Growth Rate ---\r\n    // Product of all limiting factors\r\n    const RawGrowthRate = safeTempEffect * safePhEffect * safeNEffect * safeCEffect * safeCO2Effect;\r\n\r\n    // Growth opportunity depends on available space and existing mycelium (for mycelial phase)\r\n    const GrowthOpp = currentSpace * currentMycelium;\r\n\r\n    // Base growth rate calculation differs slightly between phases\r\n    let GrowthRate = isMushPhase\r\n        ? (RawGrowthRate * currentParams['Growth Coeff']) // Mushroom phase growth\r\n        : (RawGrowthRate * GrowthOpp * currentParams['Growth Coeff']); // Mycelial phase growth\r\n    GrowthRate = Math.max(0, GrowthRate); // Ensure growth rate is not negative\r\n\r\n    // Normalized growth rate (used for consumption/production calculations)\r\n    // Scaling differs between phases in the original model logic\r\n    let NormGrowthRate = isMushPhase ? (GrowthRate / 100) : GrowthRate;\r\n    NormGrowthRate = Math.max(0, NormGrowthRate); // Ensure non-negative\r\n\r\n    // --- Calculate Flows (Rates of Change between Stocks) ---\r\n    // Ensure all flows are non-negative\r\n    const flow_Breakdown = Math.max(0, currentMycelium * currentParams['C BD Rate'] * currentComplexC * RawGrowthRate * VolumeNormalisation);\r\n    const flow_CCons = Math.max(0, NormGrowthRate * currentParams['C Cons. Rate']); // Simple C consumption\r\n    const flow_CO2Prod = Math.max(0, NormGrowthRate * currentParams['CO2 Production Rate']); // CO2 production\r\n    const flow_CO2Vent = Math.max(0, currentParams['CO2 Removal Rate'] * (currentCO2 - currentParams['External CO2']) * VolumeNormalisation); // CO2 ventilation\r\n    const flow_Colonisation = isMushPhase ? 0 : GrowthRate; // Mycelium growth (colonisation)\r\n    const flow_MushroomGrowth = isMushPhase ? Math.max(0, GrowthRate * currentParams['Mushroom Multiplier']) : 0; // Mushroom fruit body growth\r\n    const flow_NCons = Math.max(0, NormGrowthRate * currentParams['N Rate']); // Nitrogen consumption\r\n    const flow_TempProd = Math.max(0, NormGrowthRate * currentParams['Temp Production Rate']); // Temperature production\r\n    const flow_TempVent = Math.max(0, (currentTemp - currentParams['External Temp']) * currentParams['Temp Transfer Rate'] * VolumeNormalisation); // Temperature ventilation\r\n\r\n    // --- Assign Derivatives (dStock/dt = Inflows - Outflows) ---\r\n    dydt[0] = flow_CO2Prod - flow_CO2Vent;             // dCO2/dt\r\n    dydt[1] = -flow_Breakdown;                          // dComplexC/dt\r\n    dydt[2] = flow_MushroomGrowth;                      // dMushroomYield/dt\r\n    dydt[3] = flow_Colonisation;                        // dMycelium/dt\r\n    dydt[4] = -flow_NCons;                              // dN/dt\r\n    dydt[5] = flow_Breakdown - flow_CCons;              // dSimpleC/dt\r\n    dydt[6] = -flow_Colonisation;                       // dSpace/dt\r\n    dydt[7] = flow_TempProd - flow_TempVent;            // dTemp/dt\r\n\r\n    // --- Apply Non-Negative Constraints (Floor Check) ---\r\n    // Prevent stocks from going below zero due to numerical inaccuracies or model behavior\r\n    const epsilon = 1e-9; // Small threshold instead of direct zero comparison\r\n    if (y[0] <= epsilon && dydt[0] < 0) dydt[0] = 0; // CO2\r\n    if (y[1] <= epsilon && dydt[1] < 0) dydt[1] = 0; // ComplexC\r\n    if (y[2] <= epsilon && dydt[2] < 0) dydt[2] = 0; // MushroomYield\r\n    if (y[3] <= epsilon && dydt[3] < 0) dydt[3] = 0; // Mycelium\r\n    if (y[4] <= epsilon && dydt[4] < 0) dydt[4] = 0; // N\r\n    if (y[5] <= epsilon && dydt[5] < 0) dydt[5] = 0; // SimpleC\r\n    if (y[6] <= epsilon && dydt[6] < 0) dydt[6] = 0; // Space\r\n    // Temperature might naturally go below zero (Celsius), so no floor constraint needed unless modeling absolute zero.\r\n}\r\n\r\n/**\r\n * Calculates the initial state vector for the simulation.\r\n * @param {object} p - Parameters needed for initial state calculation ('Initial Dry Substrate Weight', 'Initial C:N Ratio', 'Initial Complex:Simple Ratio', 'External CO2', 'External Temp').\r\n * @param {number} initialMyceliumValue - The starting mycelium density (0 to 1).\r\n * @returns {Array<number>} The initial state vector y0.\r\n */\r\nfunction getInitialState(p, initialMyceliumValue) {\r\n    const initialDrySubstrateWeight = Number(p['Initial Dry Substrate Weight']);\r\n    const cnRatio = Number(p['Initial C:N Ratio']); // Use the C:N Ratio passed in 'p'\r\n    const complexSimpleRatio = Number(p['Initial Complex:Simple Ratio']);\r\n\r\n    // Basic validation\r\n    if (isNaN(initialDrySubstrateWeight) || initialDrySubstrateWeight <= 0 || isNaN(cnRatio) || cnRatio <= 0 || isNaN(complexSimpleRatio) || complexSimpleRatio < 0 || complexSimpleRatio > 1) {\r\n        console.error(\"Invalid parameters for getInitialState:\", p);\r\n        // Return a default state to avoid crashing, though simulation might be meaningless\r\n        return [\r\n            400,  // CO2\r\n            200,  // ComplexC\r\n            0,    // MushroomYield\r\n            0.01, // Mycelium\r\n            10,   // N\r\n            50,   // SimpleC\r\n            0.99, // Space\r\n            25    // Temp\r\n        ];\r\n    }\r\n\r\n    const cnRatioPlusOne = cnRatio + 1;\r\n    const Init_N = initialDrySubstrateWeight / cnRatioPlusOne; // Initial Nitrogen\r\n    const Init_C = initialDrySubstrateWeight - Init_N; // Initial Carbon (Total)\r\n    const initialSpace = Math.max(0, 1 - initialMyceliumValue); // Ensure space isn't negative\r\n\r\n    return [\r\n        Number(p['External CO2']),        // 0: Initial CO2 (assumed equilibrium with external)\r\n        Init_C * complexSimpleRatio,      // 1: Initial Complex Carbon\r\n        0,                                // 2: Initial Mushroom Yield (always starts at 0)\r\n        initialMyceliumValue,             // 3: Initial Mycelium Density\r\n        Init_N,                           // 4: Initial Nitrogen\r\n        Init_C * (1 - complexSimpleRatio),// 5: Initial Simple Carbon\r\n        initialSpace,                     // 6: Initial Available Space (1 - initial mycelium)\r\n        Number(p['External Temp'])        // 7: Initial Temperature (assumed equilibrium with external)\r\n    ];\r\n}\r\n\r\n/**\r\n * Runs the ODE simulation using RK4 method.\r\n * @param {object} inputParams - User-provided parameters overriding defaults (e.g., Temp, pH, Weight, Duration).\r\n * @param {object} defaultParamSet - The base set of default parameters (Mycelium or Mushroom).\r\n * @returns {Array<object>} Array of result objects, each containing time and state variables.\r\n */\r\nfunction runSimulation(inputParams, defaultParamSet) {\r\n    if (!defaultParamSet) {\r\n        console.error(\"runSimulation called without defaultParamSet!\");\r\n        return []; // Return empty array on critical error\r\n    }\r\n\r\n    // Merge parameters: defaults < inputs < forced values\r\n    const currentParams = {\r\n        ...defaultParamSet, // Start with the phase-specific defaults\r\n        ...inputParams,     // Override with user inputs from localStorage\r\n        'Initial C:N Ratio': FIXED_CN_RATIO, // Force the C:N Ratio\r\n    };\r\n\r\n    // --- Prepare for Initial State Calculation ---\r\n    // Extract final values needed, falling back to currentParams (which includes defaults) if somehow missing\r\n    const finalInitialWeight = Number(currentParams['Initial Dry Substrate Weight']);\r\n    const finalCNRatio = Number(currentParams['Initial C:N Ratio']); // Use the FIXED ratio\r\n    const finalComplexSimpleRatio = Number(currentParams['Initial Complex:Simple Ratio']);\r\n    const finalExternalCO2 = Number(currentParams['External CO2']);\r\n    const finalExternalTemp = Number(currentParams['External Temp']);\r\n\r\n    // Determine initial mycelium based on the phase defined in currentParams\r\n    const initialMyceliumValue = currentParams['IsMush'] === 0\r\n        ? (currentParams['Initial Mycelium'] ?? defaultParamsMycelium['Initial Mycelium']) // Use default from set or hardcoded fallback\r\n        : (currentParams['Initial Mycelium'] ?? defaultParamsMushroom['Initial Mycelium']);  // Use default from set or hardcoded fallback\r\n\r\n    // Create the specific parameter object needed for getInitialState\r\n    const initialStateParams = {\r\n        'Initial Dry Substrate Weight': finalInitialWeight,\r\n        'Initial C:N Ratio': finalCNRatio, // Pass the FIXED ratio\r\n        'Initial Complex:Simple Ratio': finalComplexSimpleRatio,\r\n        'External CO2': finalExternalCO2,\r\n        'External Temp': finalExternalTemp,\r\n    };\r\n\r\n    // Calculate the initial state vector\r\n    const y0 = getInitialState(initialStateParams, initialMyceliumValue);\r\n\r\n    // --- Setup RK4 Integrator ---\r\n    const t0 = currentParams.timeStart;\r\n    const dt = currentParams.timeStep;\r\n    const timeLength = Math.max(0, Number(currentParams.timeLength)); // Ensure non-negative duration\r\n    const positiveDt = Math.max(dt, 1e-6); // Ensure dt is positive and non-zero for solver\r\n    const numSteps = timeLength > 0 && positiveDt > 0 ? Math.floor(timeLength / positiveDt) : 0;\r\n\r\n    // Wrap the derivatives function for the solver\r\n    const derivativeFuncForSolver = (dydt, y, t) => {\r\n        try {\r\n            derivatives(dydt, y, t, currentParams); // Pass the fully merged currentParams\r\n        } catch (e) {\r\n            console.error(\"Error inside derivatives function:\", e);\r\n            // Set derivatives to zero to prevent solver from failing completely if possible\r\n            dydt.fill(0);\r\n        }\r\n    };\r\n\r\n    // Initialize the integrator\r\n    const integrator = odeRK4(y0, derivativeFuncForSolver, t0, positiveDt);\r\n    const results = [{ time: integrator.t, state: [...integrator.y] }]; // Store initial state\r\n\r\n    const simType = currentParams['IsMush'] === 0 ? 'Mycelium' : 'Mushroom';\r\n    console.log(`Starting ${simType} simulation: Time=${timeLength} days, Steps=${numSteps}, dt=${positiveDt}`);\r\n\r\n    if (numSteps <= 0) {\r\n        console.warn(`${simType} Sim: timeLength or timeStep results in 0 steps. Simulation not run.`);\r\n        return []; // Return empty if no steps to take\r\n    }\r\n\r\n    // --- Run Simulation Steps ---\r\n    for (let i = 0; i < numSteps; i++) {\r\n        try {\r\n            integrator.step(); // Advance the simulation by one time step\r\n\r\n            // --- Sanity Checks & Corrections (Optional but Recommended) ---\r\n            // Check for non-finite values (NaN, Infinity) which indicate instability\r\n            if (integrator.y.some(val => !Number.isFinite(val))) {\r\n                console.error(`${simType} Sim: Non-finite value detected at t=${integrator.t.toFixed(2)}. State:`, integrator.y);\r\n                // Optionally break early if simulation becomes unstable\r\n                // break;\r\n            }\r\n\r\n            // Example: Correct negative Mycelium if it occurs due to numerical issues\r\n            // if (integrator.y[3] < 0) {\r\n            //     // console.warn(`${simType} Sim: Mycelium became negative at t=${integrator.t.toFixed(2)}, correcting to 0.`);\r\n            //     integrator.y[3] = 0;\r\n            // }\r\n            // Add similar checks for other critical state variables if needed (e.g., N, C, Space)\r\n\r\n            // Store the results for this time step\r\n            results.push({ time: integrator.t, state: [...integrator.y] });\r\n\r\n        } catch (solverError) {\r\n            console.error(`${simType} Sim: RK4 solver error at t=${integrator.t.toFixed(2)}:`, solverError);\r\n            // Stop the simulation if the solver encounters an error\r\n            break;\r\n        }\r\n    }\r\n    console.log(`${simType} simulation finished after ${results.length - 1} steps.`);\r\n\r\n    // Map results to named properties for easier use\r\n    return results.map(p => ({\r\n        time: p.time,\r\n        CO2: p.state[0],\r\n        ComplexC: p.state[1],\r\n        MushroomYield: p.state[2],\r\n        Mycelium: p.state[3],\r\n        N: p.state[4],\r\n        SimpleC: p.state[5],\r\n        Space: p.state[6],\r\n        Temp: p.state[7]\r\n    }));\r\n}\r\n// --- (End of Simulation Functions) ---\r\n\r\n\r\n// --- Helper Functions ---\r\n\r\n/**\r\n * Formats a date string (YYYY-MM-DD) to DD-MM-YYYY.\r\n * @param {string} dateString - Input date string in YYYY-MM-DD format.\r\n * @returns {string} Formatted date string or 'N/A'.\r\n */\r\nfunction formatDate_DDMMYYYY(dateString) {\r\n    if (!dateString || dateString === 'N/A' || !/^\\d{4}-\\d{2}-\\d{2}$/.test(dateString)) {\r\n        return 'N/A';\r\n    }\r\n    try {\r\n        const [year, month, day] = dateString.split('-');\r\n        return `${day}-${month}-${year}`;\r\n    } catch (e) {\r\n        console.error(\"Error formatting date:\", e);\r\n        return 'N/A';\r\n    }\r\n}\r\n\r\n/**\r\n * Calculates the end date based on start date and duration, then formats it.\r\n * @param {string} startDateStr - Start date in YYYY-MM-DD format.\r\n * @param {number} durationDays - Duration of the simulation in days.\r\n * @returns {string} Formatted end date (DD-MM-YYYY) or 'N/A'.\r\n */\r\nfunction calculateAndFormatEndDate(startDateStr, durationDays) {\r\n    // Validate inputs\r\n    if (!startDateStr || startDateStr === 'N/A' || !/^\\d{4}-\\d{2}-\\d{2}$/.test(startDateStr) || isNaN(durationDays) || durationDays < 0) {\r\n        return 'N/A';\r\n    }\r\n    try {\r\n        const startDateObj = new Date(startDateStr);\r\n        // Create a *new* date object for calculation to avoid modifying the original\r\n        const endDateObj = new Date(startDateObj.getTime());\r\n        // Add the duration in days\r\n        endDateObj.setDate(endDateObj.getDate() + durationDays);\r\n\r\n        // Format the calculated end date back to YYYY-MM-DD for the helper function\r\n        const endYear = endDateObj.getFullYear();\r\n        const endMonth = String(endDateObj.getMonth() + 1).padStart(2, '0'); // Month is 0-indexed\r\n        const endDay = String(endDateObj.getDate()).padStart(2, '0');\r\n        const endDateStrYYYYMMDD = `${endYear}-${endMonth}-${endDay}`;\r\n\r\n        return formatDate_DDMMYYYY(endDateStrYYYYMMDD); // Use existing formatter\r\n    } catch (dateError) {\r\n        console.error(\"Error calculating end date:\", dateError);\r\n        return 'N/A';\r\n    }\r\n}\r\n\r\n\r\n// --- React Component Definition ---\r\nconst GrowthSimulation = () => {\r\n    const navigate = useNavigate();\r\n    const chartRef = useRef(null); // Ref to access the chart instance\r\n\r\n    // --- State Variables ---\r\n    const [simulationResultsMushroom, setSimulationResultsMushroom] = useState(null);\r\n    const [simulationResultsMycelium, setSimulationResultsMycelium] = useState(null);\r\n    const [isLoading, setIsLoading] = useState(true);\r\n    const [error, setError] = useState(null);\r\n    const [batchName, setBatchName] = useState('');\r\n    const [startDate, setStartDate] = useState(''); // Stores YYYY-MM-DD from localStorage\r\n    const [endDate, setEndDate] = useState('N/A'); // Stores formatted DD-MM-YYYY end date\r\n    const [finalSimulatedYield, setFinalSimulatedYield] = useState(null); // Stores final yield number\r\n    const [activeChartTab, setActiveChartTab] = useState('yield'); // Controls which chart is visible\r\n    const [animationImageSrc, setAnimationImageSrc] = useState(null); // Holds the path for the animation image\r\n\r\n    // --- Local Storage Keys ---\r\n    const LOCAL_STORAGE_KEYS = {\r\n        TEMPERATURE: 'sim_temperature',\r\n        PH: 'sim_ph',\r\n        SUBSTRATE: 'sim_substrate',\r\n        SIMULATION_DAYS: 'sim_duration',\r\n        BATCH_NAME: 'sim_batch_name',\r\n        START_DATE: 'sim_start_date', // Expects YYYY-MM-DD\r\n    };\r\n\r\n    // --- Effect Hook to Run Simulations on Mount ---\r\n    useEffect(() => {\r\n        let isMounted = true; // Flag to prevent state updates on unmounted component\r\n        // Reset state variables at the start of the effect\r\n        setIsLoading(true);\r\n        setError(null);\r\n        setFinalSimulatedYield(null);\r\n        setSimulationResultsMushroom(null);\r\n        setSimulationResultsMycelium(null);\r\n        setEndDate('N/A');\r\n        setAnimationImageSrc(null); // Reset animation image\r\n\r\n        const runSimulationsAsync = async () => {\r\n            // Short delay to allow UI to update to loading state if needed\r\n            await new Promise(resolve => setTimeout(resolve, 50));\r\n            if (!isMounted) return; // Exit if component unmounted during delay\r\n\r\n            let savedTempStr, savedPhStr, savedSubstrateJson, savedDaysStr, savedBatchName, savedStartDateStr;\r\n            try {\r\n                // --- Load Parameters from Local Storage ---\r\n                savedTempStr = localStorage.getItem(LOCAL_STORAGE_KEYS.TEMPERATURE);\r\n                savedPhStr = localStorage.getItem(LOCAL_STORAGE_KEYS.PH);\r\n                savedSubstrateJson = localStorage.getItem(LOCAL_STORAGE_KEYS.SUBSTRATE);\r\n                savedDaysStr = localStorage.getItem(LOCAL_STORAGE_KEYS.SIMULATION_DAYS);\r\n                savedBatchName = localStorage.getItem(LOCAL_STORAGE_KEYS.BATCH_NAME) || 'N/A';\r\n                savedStartDateStr = localStorage.getItem(LOCAL_STORAGE_KEYS.START_DATE) || 'N/A'; // Expects YYYY-MM-DD\r\n\r\n                if (isMounted) {\r\n                    setBatchName(savedBatchName);\r\n                    setStartDate(savedStartDateStr); // Store the raw YYYY-MM-DD start date\r\n                }\r\n\r\n                // --- Validate Required Parameters ---\r\n                const missingParams = [];\r\n                if (savedTempStr === null) missingParams.push('Temperature');\r\n                if (savedPhStr === null) missingParams.push('pH');\r\n                if (savedSubstrateJson === null) missingParams.push('Substrate');\r\n                if (savedDaysStr === null) missingParams.push('Duration');\r\n                // Start date is optional for simulation run but needed for end date display\r\n                // if (savedStartDateStr === 'N/A') missingParams.push('Start Date');\r\n\r\n                if (missingParams.length > 0) {\r\n                    throw new Error(`Missing required simulation parameters: ${missingParams.join(', ')}. Please set them in Condition Settings.`);\r\n                }\r\n\r\n                // --- Parse and Validate Numerical Parameters ---\r\n                const temp = parseFloat(savedTempStr);\r\n                const phValue = parseFloat(savedPhStr);\r\n                const days = parseInt(savedDaysStr, 10);\r\n                let substrateData = null;\r\n                let initialWeight = 0;\r\n                try {\r\n                    substrateData = JSON.parse(savedSubstrateJson);\r\n                    if (typeof substrateData !== 'object' || substrateData === null) throw new Error(\"Invalid substrate JSON format.\");\r\n                    // Calculate initial weight from substrate components\r\n                    initialWeight = Object.values(substrateData).reduce((sum, val) => sum + (Number(val) || 0), 0);\r\n                    if (initialWeight <= 0) console.warn(\"Initial substrate weight calculated from components is zero or negative.\");\r\n                } catch (parseError) {\r\n                    throw new Error(`Invalid substrate data in localStorage: ${parseError.message}`);\r\n                }\r\n\r\n                if (isNaN(temp) || isNaN(phValue) || isNaN(initialWeight) || isNaN(days) || days < 0) {\r\n                    throw new Error(\"Invalid or missing numerical parameters (Temperature, pH, Weight, or Duration).\");\r\n                }\r\n\r\n                const simulationDuration = days; // Use the parsed days directly\r\n\r\n                // --- Calculate and Set End Date ---\r\n                const calculatedEndDate = calculateAndFormatEndDate(savedStartDateStr, simulationDuration);\r\n                if (isMounted) {\r\n                    setEndDate(calculatedEndDate); // Set the formatted end date state\r\n                }\r\n\r\n                // --- Prepare Inputs for Simulation Function ---\r\n                const simulationInputs = {\r\n                    'External Temp': temp,\r\n                    'pH': phValue,\r\n                    'Initial Dry Substrate Weight': initialWeight, // Use calculated weight\r\n                    'timeLength': simulationDuration,\r\n                };\r\n\r\n                // --- Run Both Simulations ---\r\n                console.log(\"Running Mushroom Simulation...\");\r\n                const resultsMushroom = runSimulation(simulationInputs, defaultParamsMushroom);\r\n\r\n                console.log(\"Running Mycelium Simulation...\");\r\n                const resultsMycelium = runSimulation(simulationInputs, defaultParamsMycelium);\r\n\r\n                // --- Update State with Simulation Results ---\r\n                if (isMounted) {\r\n                    setSimulationResultsMushroom(resultsMushroom);\r\n                    setSimulationResultsMycelium(resultsMycelium);\r\n\r\n                    // Extract final yield from mushroom simulation results\r\n                    if (resultsMushroom && resultsMushroom.length > 0) {\r\n                        const lastMushroomResult = resultsMushroom[resultsMushroom.length - 1];\r\n                         if (lastMushroomResult && Number.isFinite(lastMushroomResult.MushroomYield)) {\r\n                            setFinalSimulatedYield(lastMushroomResult.MushroomYield);\r\n                        } else {\r\n                            console.warn(\"Final mushroom yield is not a finite number.\");\r\n                            setFinalSimulatedYield(null); // Set to null if not finite or undefined\r\n                        }\r\n                    } else {\r\n                        console.warn(\"Mushroom simulation produced no results.\");\r\n                        setFinalSimulatedYield(null); // Set to null if no results\r\n                    }\r\n                    console.log(\"Both simulations complete.\");\r\n                }\r\n\r\n            } catch (err) {\r\n                console.error(\"Error during simulation setup or execution:\", err);\r\n                if (isMounted) setError(err.message || \"An unexpected error occurred during simulation.\");\r\n            } finally {\r\n                // Ensure loading state is turned off even if errors occur\r\n                if (isMounted) setIsLoading(false);\r\n            }\r\n        };\r\n\r\n        runSimulationsAsync();\r\n\r\n        // --- Cleanup Function ---\r\n        // This runs when the component unmounts\r\n        return () => {\r\n            isMounted = false; // Set flag to false to prevent state updates after unmount\r\n            console.log(\"GrowthSimulation component unmounted.\");\r\n        };\r\n    }, []); // Empty dependency array means this effect runs only once on mount\r\n\r\n    // --- Event Handlers ---\r\n    const handleBackClick = () => {\r\n        navigate('/condition-setting'); // Navigate back to the settings page\r\n    };\r\n\r\n    /**\r\n     * Handles clicks on the chart points.\r\n     * Shows a specific image if Day 0 on the Yield chart is clicked.\r\n     * @param {object} event - The click event object from Chart.js.\r\n     */\r\n    const handleChartClick = (event) => {\r\n        const chart = chartRef.current; // Get the chart instance via ref\r\n        if (!chart) {\r\n            console.warn(\"Chart instance not available for click handling.\");\r\n            return;\r\n        }\r\n\r\n        const elements = getElementAtEvent(chart, event); // Get clicked elements\r\n\r\n        if (elements.length > 0) {\r\n            const { datasetIndex, index } = elements[0]; // Get info from the first clicked element\r\n            // Access the data point directly from the chart's configuration\r\n            const dataPoint = chart.config.data.datasets[datasetIndex]?.data[index];\r\n\r\n            // Check if the click was on the 'yield' tab and the data point exists\r\n            if (dataPoint && activeChartTab === 'yield') {\r\n                 // Check if the x value (time) is 0 (use a small tolerance for float comparison)\r\n                if (Math.abs(dataPoint.x - 0) < 0.001) {\r\n                    console.log(\"Clicked Day 0 on Yield Chart. Displaying Asset 1.\");\r\n                    setAnimationImageSrc(asset1Src); // Set the image source state\r\n                } else {\r\n                    // If another point on the yield chart is clicked, clear the image\r\n                    console.log(`Clicked point time ${dataPoint.x.toFixed(2)} on Yield chart. Clearing image.`);\r\n                    setAnimationImageSrc(null);\r\n                }\r\n            } else {\r\n                // If clicked on a different tab's chart or invalid point, clear the image\r\n                 console.log(\"Clicked non-yield chart or invalid point. Clearing image.\");\r\n                setAnimationImageSrc(null);\r\n            }\r\n        } else {\r\n            // Optional: Behavior when clicking the chart background (not on a point)\r\n            // console.log(\"Clicked chart background. Clearing image.\");\r\n            // setAnimationImageSrc(null); // Uncomment to clear image on background click\r\n        }\r\n    };\r\n\r\n    // --- Chart Configuration Function ---\r\n    /**\r\n     * Generates the data and options configuration for the active chart tab.\r\n     * @returns {object} Object containing { data, options } for the Chart component.\r\n     */\r\n    const getChartConfig = () => {\r\n      // Determine which simulation results to use based on the active tab\r\n      const currentResultsSource = activeChartTab === 'mycelium'\r\n          ? simulationResultsMycelium\r\n          : simulationResultsMushroom; // Default to mushroom sim for yield/temp charts\r\n\r\n      // --- Default Chart Options ---\r\n      const yieldColor = '#2E7D32'; const tempColor = '#C62828'; const myceliumColor = '#1976D2';\r\n      const textColor = '#333'; const gridColor = 'rgba(0, 0, 0, 0.08)';\r\n      const font = { family: 'Lexend', weight: '300' }; // Example font\r\n\r\n      const options = {\r\n          responsive: true,       // Chart scales with container size\r\n          maintainAspectRatio: false, // Allow chart to fill container height\r\n          plugins: {\r\n              legend: { display: true, labels: { color: textColor, font: font } },\r\n              tooltip: { enabled: true, bodyFont: font, titleFont: font },\r\n              title: { display: true, text: '', color: textColor, font: { ...font, size: 16, weight: '500'} } // Slightly bolder title\r\n            },\r\n          scales: {\r\n              x: { // X-Axis Configuration (Time)\r\n                  type: 'linear',\r\n                  title: { display: true, text: 'Time (Days)', color: textColor, font: font },\r\n                  ticks: {\r\n                      color: textColor,\r\n                      font: font,\r\n                      precision: 0 // <<< Display whole numbers on the x-axis\r\n                  },\r\n                  grid: { color: gridColor },\r\n                  min: 0,          // Start axis at 0\r\n                  max: undefined   // Let Chart.js determine max initially\r\n              },\r\n              // Y-Axis Definitions (initially hidden, enabled based on active tab)\r\n              yYield: {\r\n                  type: 'linear', position: 'left',\r\n                  title: { display: true, text: 'Mushroom Yield (g)', color: yieldColor, font: font },\r\n                  ticks: { color: yieldColor, font: font },\r\n                  grid: { drawOnChartArea: true, color: gridColor }, // Main grid lines for this axis\r\n                  beginAtZero: true, display: false // Hidden by default\r\n              },\r\n              yTemp: {\r\n                  type: 'linear', position: 'left', // Can be 'right' if needed\r\n                  title: { display: true, text: 'Temperature (°C)', color: tempColor, font: font },\r\n                  ticks: { color: tempColor, font: font },\r\n                  grid: { drawOnChartArea: false }, // No grid lines for this axis if sharing space\r\n                  // beginAtZero: false, // Temp doesn't necessarily start at 0\r\n                  display: false // Hidden by default\r\n               },\r\n              yMycelium: {\r\n                   type: 'linear', position: 'left',\r\n                   title: { display: true, text: 'Mycelium Density', color: myceliumColor, font: font },\r\n                   ticks: { color: myceliumColor, font: font, callback: (value) => value.toFixed(2) }, // Format to 2 decimal places\r\n                   grid: { drawOnChartArea: true, color: gridColor }, // Main grid lines\r\n                   beginAtZero: true, suggestedMax: 1, // Mycelium density is 0-1\r\n                   display: false // Hidden by default\r\n              }\r\n          },\r\n          // Interaction settings for tooltips and clicks\r\n          interaction: {\r\n              mode: 'nearest', // Find nearest item in any dataset\r\n              axis: 'x',       // Primarily interact based on x-axis proximity\r\n              intersect: false // Tooltip triggers even if not directly hovering over point\r\n          },\r\n          // onClick: handleChartClick // Can be defined here or on the component prop\r\n      };\r\n\r\n      // Reset Y-axis display flags before setting the active one\r\n      options.scales.yYield.display = false;\r\n      options.scales.yTemp.display = false;\r\n      options.scales.yMycelium.display = false;\r\n\r\n      // Return empty config if simulation data isn't ready\r\n      if (!currentResultsSource || currentResultsSource.length === 0) {\r\n          // console.log(`Chart config: No data available for tab: ${activeChartTab}`);\r\n          return { data: { datasets: [] }, options: options };\r\n      }\r\n\r\n      // --- Generate Datasets based on Active Tab ---\r\n      let datasets = [];\r\n      let chartData = [...currentResultsSource]; // Use a copy of the data\r\n      let dataSourceName = ''; // To label the chart title source\r\n\r\n      switch (activeChartTab) {\r\n          case 'yield':\r\n              dataSourceName = 'Mushroom Sim';\r\n              options.plugins.title.text = `Yield Over Time (${dataSourceName})`;\r\n              options.scales.yYield.display = true; // Show yield axis\r\n              datasets = [{\r\n                  label: 'Mushroom Yield (g)',\r\n                  data: chartData.map(p => ({ x: p.time, y: Number.isFinite(p.MushroomYield) ? p.MushroomYield : null })), // Handle non-finite values\r\n                  borderColor: yieldColor,\r\n                  backgroundColor: 'rgba(46, 125, 50, 0.1)', // Light fill\r\n                  yAxisID: 'yYield', // Link to the correct Y axis\r\n              }];\r\n              // Set X axis max based on the full duration of this dataset\r\n              options.scales.x.max = chartData.length > 0 ? chartData[chartData.length - 1].time : undefined;\r\n              break;\r\n\r\n          case 'temp':\r\n              dataSourceName = 'Mushroom Sim';\r\n              options.plugins.title.text = `Temperature Over Time (${dataSourceName})`;\r\n              options.scales.yTemp.display = true; // Show temp axis\r\n              datasets = [{\r\n                  label: 'Temperature (°C)',\r\n                  data: chartData.map(p => ({ x: p.time, y: Number.isFinite(p.Temp) ? p.Temp : null })),\r\n                  borderColor: tempColor,\r\n                  backgroundColor: 'rgba(198, 40, 40, 0.1)',\r\n                  yAxisID: 'yTemp',\r\n              }];\r\n              // Set X axis max based on the full duration\r\n               options.scales.x.max = chartData.length > 0 ? chartData[chartData.length - 1].time : undefined;\r\n              break;\r\n\r\n          case 'mycelium':\r\n              dataSourceName = 'Mycelium Sim';\r\n              options.plugins.title.text = `Mycelium Growth (${dataSourceName})`;\r\n              options.scales.yMycelium.display = true; // Show mycelium axis\r\n\r\n              // --- Apply Cutoff Logic for Mycelium Chart ---\r\n              let cutoffIndex = chartData.findIndex(p => p.Mycelium >= 0.9); // Find first point >= 0.9\r\n              let finalTime = chartData.length > 0 ? chartData[chartData.length - 1].time : 0; // Default to full duration\r\n              let cutoffReason = \"Simulation End\";\r\n\r\n              if (cutoffIndex !== -1) { // Found threshold\r\n                  // Cut off data at or just after the threshold is met\r\n                  chartData = chartData.slice(0, cutoffIndex + 1);\r\n                  finalTime = chartData[chartData.length - 1].time; // Time at cutoff\r\n                  cutoffReason = \"Mycelium >= 0.9\";\r\n                  // console.log(`Mycelium chart cutoff at index ${cutoffIndex}, time ${finalTime.toFixed(2)} (${cutoffReason})`);\r\n              } else { // Threshold 0.9 NOT met, check for day 30 cutoff\r\n                  const day30Index = chartData.findIndex(p => p.time >= 30); // Find first point >= day 30\r\n                  if (day30Index !== -1) { // Found day >= 30\r\n                      // Cut off data at or just after day 30\r\n                      chartData = chartData.slice(0, day30Index + 1);\r\n                      finalTime = chartData[chartData.length - 1].time; // Time at day 30 (or just after)\r\n                      cutoffReason = \"Day 30 Limit\";\r\n                      // console.log(`Mycelium chart cutoff at index ${day30Index}, time ${finalTime.toFixed(2)} (${cutoffReason})`);\r\n                  } else { // Less than 30 days simulated AND threshold not met\r\n                       // console.log(`Mycelium threshold 0.9 not reached and simulation ended before day 30 (t=${finalTime.toFixed(2)}). Showing all data.`);\r\n                      // finalTime is already set to the last available time\r\n                  }\r\n              }\r\n\r\n              // Set max time for X-axis based on cutoff or full duration\r\n              options.scales.x.max = finalTime;\r\n\r\n              // Add cutoff reason to title if applicable\r\n              if (cutoffReason !== \"Simulation End\") {\r\n                  options.plugins.title.text += ` (Stopped at ${cutoffReason})`;\r\n              }\r\n\r\n              datasets = [{\r\n                  label: 'Mycelium Density',\r\n                  data: chartData.map(p => ({ x: p.time, y: Number.isFinite(p.Mycelium) ? p.Mycelium : null })),\r\n                  borderColor: myceliumColor,\r\n                  backgroundColor: 'rgba(25, 118, 210, 0.1)',\r\n                  yAxisID: 'yMycelium',\r\n              }];\r\n              break;\r\n          default:\r\n              // Should not happen if activeChartTab is managed correctly\r\n              datasets = [];\r\n      }\r\n\r\n      // --- Final Dataset Processing ---\r\n      // Apply common styling and filter out empty datasets\r\n      const finalDatasets = datasets && datasets.length > 0\r\n          ? datasets.map(ds => ({\r\n                ...ds,\r\n                tension: 0.1, // Slight curve to lines\r\n                pointRadius: ds.data?.length > 150 ? 0.5 : (ds.data?.length > 50 ? 1 : 2), // Adjust point size based on data density\r\n                pointHoverRadius: 4, // Larger point on hover\r\n                borderWidth: 1.5,     // Line thickness\r\n                spanGaps: true      // Connect lines over null/undefined data points\r\n            })).filter(ds => ds.data && ds.data.length > 0) // Ensure dataset has data points\r\n          : [];\r\n\r\n      if (finalDatasets.length === 0 && currentResultsSource && currentResultsSource.length > 0) {\r\n           // This might happen if filtering removes the dataset (e.g., all yields were null)\r\n           console.log(`No valid data points to display for tab: ${activeChartTab}`);\r\n      }\r\n\r\n      // Return the final configuration object\r\n      return {\r\n            data: { datasets: finalDatasets },\r\n            options: options\r\n      };\r\n    };\r\n    // --- End getChartConfig function ---\r\n\r\n\r\n    // --- Render Logic ---\r\n    const chartConfig = getChartConfig(); // Generate the chart config based on current state\r\n    // Check if either simulation has produced results\r\n    const simulationDataReady = simulationResultsMushroom || simulationResultsMycelium;\r\n\r\n    return (\r\n        <div className=\"growth-simulation\">\r\n            {/* --- Header Section --- */}\r\n            <header className=\"simulation-header\">\r\n                <div className=\"logobox\">\r\n                    <button onClick={handleBackClick} className=\"back-button\" title=\"Back to Settings\">&larr;</button>\r\n                    <div className=\"logo\">\r\n                        <img src={logoSrc} alt=\"City Sprouts Logo\" />\r\n                    </div>\r\n                </div>\r\n                <div className=\"batch-info\">\r\n                    <span className=\"batch-name\">Batch: {batchName}</span>\r\n                    {/* Display formatted start date */}\r\n                    <span className=\"start-date\">Start: {formatDate_DDMMYYYY(startDate)}</span>\r\n                </div>\r\n            </header>\r\n\r\n            {/* --- Main Content Area (Grid Layout) --- */}\r\n            <main className=\"main-content-grid\">\r\n                {/* --- Animation Area --- */}\r\n                <div className=\"animation-area content-card\">\r\n                    {/* Conditionally render image or placeholder text */}\r\n                    {animationImageSrc ? (\r\n                        <img\r\n                            src={animationImageSrc}\r\n                            alt=\"Simulation state representation\" // More descriptive alt text\r\n                            style={{ maxWidth: '100%', maxHeight: '100%', objectFit: 'contain', display: 'block', margin: 'auto' }}\r\n                        />\r\n                    ) : (\r\n                        <span>Animation / Visualization Area</span> // Default text\r\n                    )}\r\n                </div>\r\n\r\n                {/* --- Chart and Results Column --- */}\r\n                <div className=\"chart-results-column\">\r\n                    {/* --- Tabs for Chart Selection --- */}\r\n                    <div className=\"tabs-container\">\r\n                         <button\r\n                            onClick={() => { setActiveChartTab('yield'); setAnimationImageSrc(null); }} // Clear animation on tab change\r\n                            className={`tab-button ${activeChartTab === 'yield' ? 'tab-button-active' : ''}`}\r\n                         >\r\n                            Yield\r\n                         </button>\r\n                         <button\r\n                            onClick={() => { setActiveChartTab('temp'); setAnimationImageSrc(null); }}\r\n                            className={`tab-button ${activeChartTab === 'temp' ? 'tab-button-active' : ''}`}\r\n                         >\r\n                             Temperature\r\n                         </button>\r\n                         <button\r\n                            onClick={() => { setActiveChartTab('mycelium'); setAnimationImageSrc(null); }}\r\n                            className={`tab-button ${activeChartTab === 'mycelium' ? 'tab-button-active' : ''}`}\r\n                         >\r\n                             Mycelium\r\n                         </button>\r\n                    </div>\r\n\r\n                    {/* --- Chart Display Area --- */}\r\n                    <div className=\"chart-area content-card\">\r\n                        {isLoading && <p className=\"loading-message\">Running simulations, please wait...</p>}\r\n                        {error && <p className=\"error-message\">Error: {error}</p>}\r\n                        {!isLoading && !error && simulationDataReady && (\r\n                            // Check if the *generated* chart config actually has datasets to display\r\n                            chartConfig.data.datasets.length > 0 ? (\r\n                                <div className=\"chart-container\">\r\n                                    <Line\r\n                                        ref={chartRef} // Assign ref to access chart instance\r\n                                        options={chartConfig.options} // Pass calculated options\r\n                                        data={chartConfig.data}       // Pass calculated data\r\n                                        onClick={handleChartClick} // Attach click handler\r\n                                    />\r\n                                </div>\r\n                            ) : (\r\n                                // Message if simulation ran but produced no displayable data for this tab\r\n                                <p className=\"no-data-message\">No simulation data available to display for the '{activeChartTab}' chart.</p>\r\n                            )\r\n                        )}\r\n                        {/* Fallback message if simulations haven't run or failed very early */}\r\n                        {!isLoading && !error && !simulationDataReady && <p className=\"no-data-message\">Simulation results are not yet available.</p>}\r\n                    </div>\r\n\r\n                    {/* --- Results Summary Section --- */}\r\n                    <div className=\"results-section content-card\">\r\n                        <h3 className=\"results-heading\">\r\n                            Simulation Results\r\n                            <span className=\"info-icon\" title=\"Projected yield is based on the Mushroom phase simulation. End date calculated from start date and duration.\">i</span>\r\n                        </h3>\r\n                        <div className=\"results-items\">\r\n                            {/* Projected Yield */}\r\n                            <div className=\"result-item\">\r\n                                <span className=\"result-label\">Projected Yield:</span>\r\n                                <span className=\"result-value\">\r\n                                    {isLoading ? '...' : error ? 'Error' : (finalSimulatedYield !== null && Number.isFinite(finalSimulatedYield)) ? `${finalSimulatedYield.toFixed(1)}g` : 'N/A'}\r\n                                </span>\r\n                            </div>\r\n                            {/* Projected End Date */}\r\n                            <div className=\"result-item\">\r\n                                <span className=\"result-label\">Projected End Date:</span>\r\n                                <span className=\"result-value\">\r\n                                    {/* Display the formatted end date from state */}\r\n                                    {isLoading ? '...' : error ? 'Error' : endDate}\r\n                                </span>\r\n                            </div>\r\n                            {/* C:N Ratio display has been removed */}\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </main>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default GrowthSimulation;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}