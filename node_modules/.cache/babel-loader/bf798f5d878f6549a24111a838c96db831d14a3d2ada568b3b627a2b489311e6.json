{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\celst\\\\sds\\\\src\\\\components\\\\GrowthSimulation.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { Line } from 'react-chartjs-2';\nimport { Chart as ChartJS, LineElement, PointElement, Tooltip, Legend, CategoryScale, LinearScale } from 'chart.js';\nimport odeRK4 from 'ode-rk4'; // Import the RK4 library\n\nimport '../styles/GrowthSimulation.css'; // Make sure you have some basic CSS\n\n// Register required components for Chart.js\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nChartJS.register(LineElement, PointElement, Tooltip, Legend, CategoryScale, LinearScale);\n\n// --- Simulation Logic (Adapted from the scaffold) ---\n\n// Helper function for Converters (Linear Interpolation)\nfunction linearInterpolate(data, x) {\n  if (!data || data.length === 0) return 0;\n  if (x <= data[0][0]) return data[0][1];\n  if (x >= data[data.length - 1][0]) return data[data.length - 1][1];\n  let i = 0;\n  while (i < data.length - 1 && x > data[i + 1][0]) i++;\n  const x0 = data[i][0],\n    y0 = data[i][1],\n    x1 = data[i + 1][0],\n    y1 = data[i + 1][1];\n  const t = (x - x0) / (x1 - x0);\n  return y0 + t * (y1 - y0);\n}\n\n// Default Model Parameters (can be overridden by inputs)\nconst defaultParams = {\n  timeStart: 0,\n  timeLength: 100,\n  timeStep: 0.2,\n  'C BD Rate': 1.11,\n  'C Coeff': 0.7,\n  'C Cons. Rate': 76.39,\n  'CO2 Coeff': 0.8,\n  'CO2 Production Rate': 410000,\n  'CO2 Removal Rate': 12.6,\n  'External CO2': 428.23,\n  'External Temp': 24,\n  'Growth Coeff': 5.1,\n  'Initial C:N Ratio': 43.58,\n  'Initial Complex:Simple Ratio': 0.8054,\n  'Initial Dry Substrate Weight': 410.2,\n  'IsMush': 1,\n  'Mushroom Multiplier': 5.17,\n  'N Coeff': 68.4,\n  'N Rate': 13.03,\n  'pH': 6.91,\n  'pH Coeff': 1.4,\n  'Temp Coeff': 1.3,\n  'Temp Production Rate': 405,\n  'Temp Transfer Rate': 1.5,\n  'Effect of CO2 on Mush Growth Data': [[500, 0.9], [800, 1], [1000, 0.8], [1200, 0.25], [1400, 0]],\n  'Effect of CO2 on Myc Growth Data': [[15000, 1], [20000, 0.9], [25000, 0.25], [30000, 0]],\n  'Effect of pH on Mush Growth Data': [[5.5, 0], [6, 0.25], [6.7, 1], [7, 0.6], [7.5, 0]],\n  'Effect of pH on Myc Growth Data': [[5.8, 0], [6, 0.25], [6.7, 1], [7, 0.6], [7.5, 0]],\n  'Effect of Temp on Mush Growth Data': [[10, 0], [15, 5.37], [20, 6.36], [25, 8.63], [30, 6.37], [40, 0]],\n  'Effect of Temp on Myc Growth Data': [[10, 0], [15, 5.37], [20, 6.36], [25, 8.63], [30, 6.37], [35, 5.36], [45, 0]]\n};\n\n// Derivative Function for RK4 Solver\nfunction derivatives(dydt, y, t, currentParams) {\n  // Pass params object\n  const [currentCO2, currentComplexC, currentMushroomYield, currentMycelium, currentN, currentSimpleC, currentSpace, currentTemp] = y;\n\n  // --- Calculate intermediate variables ---\n  // *** THIS SECTION IS INCOMPLETE - NEEDS ALL MODEL EQUATIONS ***\n  const InitC = currentParams['Initial Dry Substrate Weight'] - currentParams['Initial Dry Substrate Weight'] / (currentParams['Initial C:N Ratio'] + 1);\n  const AvailableN = currentN / currentParams['Initial Dry Substrate Weight'];\n  const AvailableC = currentSimpleC / currentParams['Initial Dry Substrate Weight'];\n  const NEffect = currentParams['N Coeff'] * AvailableN;\n  const CEffect = Math.sqrt(Math.max(0, currentParams['C Coeff'] * AvailableC));\n  const VolumeNormalisation = Math.sqrt(100 / currentParams['Initial Dry Substrate Weight']);\n  const Effect_of_CO2_on_Mush_Growth = linearInterpolate(currentParams['Effect of CO2 on Mush Growth Data'], currentCO2);\n  const Effect_of_CO2_on_Myc_Growth = linearInterpolate(currentParams['Effect of CO2 on Myc Growth Data'], currentCO2);\n  const Effect_of_pH_on_Mush_Growth = linearInterpolate(currentParams['Effect of pH on Mush Growth Data'], currentParams['pH']);\n  const Effect_of_pH_on_Myc_Growth = linearInterpolate(currentParams['Effect of pH on Myc Growth Data'], currentParams['pH']);\n  const Effect_of_Temp_on_Mush_Growth = linearInterpolate(currentParams['Effect of Temp on Mush Growth Data'], currentTemp);\n  const Effect_of_Temp_on_Myc_Growth = linearInterpolate(currentParams['Effect of Temp on Myc Growth Data'], currentTemp);\n  const TempEff_ = currentParams['IsMush'] === 0 ? Effect_of_Temp_on_Myc_Growth : Effect_of_Temp_on_Mush_Growth;\n  const TempEffect = currentParams['Temp Coeff'] * TempEff_ / 10;\n  const pHEff_ = currentParams['IsMush'] === 0 ? Effect_of_pH_on_Myc_Growth : Effect_of_pH_on_Mush_Growth;\n  const pHEffect = pHEff_ * currentParams['pH Coeff'];\n  const CO2Eff_ = currentParams['IsMush'] === 0 ? Effect_of_CO2_on_Myc_Growth : Effect_of_CO2_on_Mush_Growth;\n  const CO2Effect = currentParams['CO2 Coeff'] * CO2Eff_;\n  const RawGrowthRate = TempEffect * pHEffect * NEffect * CEffect * CO2Effect;\n  const GrowthOpp = currentSpace * currentMycelium;\n  let GrowthRate = currentParams['IsMush'] === 1 ? RawGrowthRate * currentParams['Growth Coeff'] : RawGrowthRate * GrowthOpp * currentParams['Growth Coeff'];\n  let NormGrowthRate = currentParams['IsMush'] === 1 ? GrowthRate / 100 : GrowthRate;\n\n  // *** ADD ALL OTHER VARIABLE EQUATIONS FROM YOUR MODEL HERE ***\n  // --- Calculate flow rates ---\n  const flow_Breakdown = currentMycelium * currentParams['C BD Rate'] * currentComplexC * RawGrowthRate * VolumeNormalisation;\n  const flow_CCons = NormGrowthRate * currentParams['C Cons. Rate'];\n  const flow_CO2Prod = NormGrowthRate * currentParams['CO2 Production Rate'];\n  const flow_CO2Vent = currentParams['CO2 Removal Rate'] * (currentCO2 - currentParams['External CO2']) * VolumeNormalisation;\n  const flow_Colonisation = currentParams['IsMush'] === 0 ? GrowthRate : 0;\n  const flow_MushroomGrowth = currentParams['IsMush'] === 1 ? GrowthRate * currentParams['Mushroom Multiplier'] : 0;\n  const flow_NCons = NormGrowthRate * currentParams['N Rate'];\n  const flow_TempProd = NormGrowthRate * currentParams['Temp Production Rate'];\n  const flow_TempVent = (currentTemp - currentParams['External Temp']) * currentParams['Temp Transfer Rate'] * VolumeNormalisation;\n\n  // --- Calculate derivatives (dStock/dt) ---\n  dydt[0] = flow_CO2Prod - flow_CO2Vent; // dCO2/dt\n  dydt[1] = -flow_Breakdown; // dComplexC/dt\n  dydt[2] = flow_MushroomGrowth; // dMushroomYield/dt\n  dydt[3] = flow_Colonisation; // dMycelium/dt\n  dydt[4] = -flow_NCons; // dN/dt\n  dydt[5] = flow_Breakdown - flow_CCons; // dSimpleC/dt\n  dydt[6] = -flow_Colonisation; // dSpace/dt\n  dydt[7] = flow_TempProd - flow_TempVent; // dTemp/dt\n\n  // Apply non-negative constraints (basic check)\n  if (currentCO2 <= 0 && dydt[0] < 0) dydt[0] = 0;\n  if (currentComplexC <= 0 && dydt[1] < 0) dydt[1] = 0;\n  if (currentN <= 0 && dydt[4] < 0) dydt[4] = 0;\n  if (currentSimpleC <= 0 && dydt[5] < 0) dydt[5] = 0;\n  if (currentTemp <= 0 && dydt[7] < 0) dydt[7] = 0; // Assuming Temp > 0\n}\n\n// Initial State Calculation\nfunction getInitialState(p) {\n  const Init_C = p['Initial Dry Substrate Weight'] - p['Initial Dry Substrate Weight'] / (p['Initial C:N Ratio'] + 1);\n  return [p['External CO2'],\n  // initialCO2\n  Init_C * p['Initial Complex:Simple Ratio'],\n  // initialComplexC\n  0,\n  // initialMushroomYield\n  0.9,\n  // initialMycelium\n  p['Initial Dry Substrate Weight'] / (p['Initial C:N Ratio'] + 1),\n  // initialN\n  Init_C * (1 - p['Initial Complex:Simple Ratio']),\n  // initialSimpleC\n  0.98,\n  // initialSpace\n  p['External Temp'] // initialTemp\n  ];\n}\n\n// Run Simulation Function\nfunction runSimulation(inputParams) {\n  const currentParams = {\n    ...defaultParams,\n    ...inputParams\n  };\n  const y0 = getInitialState(currentParams);\n  const t0 = currentParams.timeStart;\n  const dt = currentParams.timeStep;\n  const numSteps = Math.floor(currentParams.timeLength / dt);\n\n  // Wrap the derivative function to pass currentParams\n  const derivativeFuncForSolver = (dydt, y, t) => {\n    derivatives(dydt, y, t, currentParams);\n  };\n  const integrator = odeRK4(y0, derivativeFuncForSolver, t0, dt);\n  const results = [{\n    time: integrator.t,\n    state: [...integrator.y]\n  }];\n  console.log(\"Starting JS simulation...\");\n  for (let i = 0; i < numSteps; i++) {\n    integrator.step();\n    results.push({\n      time: integrator.t,\n      state: [...integrator.y]\n    });\n  }\n  console.log(\"JS simulation finished.\");\n  const processedResults = results.map(point => ({\n    time: point.time,\n    CO2: point.state[0],\n    ComplexC: point.state[1],\n    MushroomYield: point.state[2],\n    Mycelium: point.state[3],\n    N: point.state[4],\n    SimpleC: point.state[5],\n    Space: point.state[6],\n    Temp: point.state[7]\n  }));\n  return processedResults;\n}\n\n// --- React Component ---\nconst GrowthSimulation = () => {\n  _s();\n  const navigate = useNavigate();\n  const [simulationResults, setSimulationResults] = useState(null);\n  const [isLoading, setIsLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [displayConditions, setDisplayConditions] = useState({\n    // For displaying inputs\n    substrate: {},\n    temperature: 0,\n    ph: 0,\n    yieldValue: 0,\n    days: defaultParams.timeLength\n  });\n  useEffect(() => {\n    setIsLoading(true);\n    setError(null);\n    try {\n      // Load parameters from localStorage\n      const savedTemperature = localStorage.getItem('temperature');\n      const savedPh = localStorage.getItem('ph');\n      const savedSubstrateJson = localStorage.getItem('substrate');\n      const savedYield = localStorage.getItem('yield'); // Initial target yield\n\n      if (!savedTemperature || !savedPh || !savedSubstrateJson) {\n        throw new Error(\"Required parameters not found in localStorage.\");\n      }\n      const substrateData = JSON.parse(savedSubstrateJson);\n      const temp = parseFloat(savedTemperature);\n      const phValue = parseFloat(savedPh);\n      const initialWeight = Object.values(substrateData).reduce((sum, val) => sum + val, 0); // Calculate initial weight from substrate parts\n\n      // Store for display\n      setDisplayConditions({\n        substrate: substrateData,\n        temperature: temp,\n        ph: phValue,\n        yieldValue: parseFloat(savedYield) || 0,\n        days: defaultParams.timeLength\n      });\n\n      // Prepare inputs for the simulation function\n      const simulationInputs = {\n        'External Temp': temp,\n        'pH': phValue,\n        // Use calculated total weight if that's the intended input, otherwise use default\n        'Initial Dry Substrate Weight': initialWeight || defaultParams['Initial Dry Substrate Weight']\n        // Add overrides for other params based on substrate if needed\n        // e.g., 'Initial C:N Ratio': calculateCNRatio(substrateData),\n      };\n\n      // Run the simulation\n      const results = runSimulation(simulationInputs);\n      setSimulationResults(results);\n    } catch (err) {\n      console.error(\"Error during simulation setup or run:\", err);\n      setError(err.message || \"Failed to run simulation.\");\n      // Optionally navigate back or show error prominently\n      // navigate('/condition-setting');\n    } finally {\n      setIsLoading(false);\n    }\n  }, [navigate]); // Run once on mount\n\n  const handleBackClick = () => {\n    navigate('/condition-setting');\n  };\n  const handleViewReportClick = () => {\n    // This saves data based on INITIAL conditions from localStorage.\n    const formatDate = date => {\n      /* ... date formatting ... */\n      const day = String(date.getDate()).padStart(2, '0');\n      const month = String(date.getMonth() + 1).padStart(2, '0');\n      const year = date.getFullYear();\n      return `${day}/${month}/${year}`;\n    };\n    const newEntry = {\n      days: displayConditions.days,\n      yield: `${displayConditions.yieldValue}g`,\n      // Initial target yield\n      substrate: Object.entries(displayConditions.substrate).map(([key, value]) => {\n        /* ... substrate formatting ... */\n        const displayNames = {\n          riceBran: 'Rice Bran',\n          corn: 'Corn Cob',\n          sugarcane: 'Sugarcane',\n          sawdust: 'Sawdust'\n        };\n        return `${displayNames[key] || key}: ${value}g`;\n      }).join(', '),\n      conditions: `Temperature: ${displayConditions.temperature}°C, pH: ${displayConditions.ph}`,\n      date: formatDate(new Date())\n    };\n    try {\n      const existingHistory = JSON.parse(localStorage.getItem('growthHistory')) || [];\n      localStorage.setItem('growthHistory', JSON.stringify([...existingHistory, newEntry]));\n      navigate('/');\n    } catch (err) {\n      console.error(\"Error saving growth history:\", err);\n      alert(\"Could not save growth history.\");\n    }\n  };\n\n  // Prepare data for Chart.js\n  const lineChartData = {\n    labels: simulationResults ? simulationResults.map(p => p.time.toFixed(1)) : [],\n    datasets: [{\n      label: 'Simulated Mushroom Yield (g)',\n      data: simulationResults ? simulationResults.map(p => p.MushroomYield) : [],\n      borderColor: 'lightgreen',\n      backgroundColor: 'rgba(144, 238, 144, 0.2)',\n      // Optional fill\n      tension: 0.1,\n      // Optional line smoothing\n      pointRadius: 2,\n      pointHoverRadius: 5\n    }]\n  };\n\n  // Chart options\n  const lineChartOptions = {\n    responsive: true,\n    maintainAspectRatio: false,\n    // Allow chart to resize\n    plugins: {\n      legend: {\n        labels: {\n          color: '#FFF'\n        }\n      },\n      tooltip: {\n        enabled: true\n      }\n    },\n    scales: {\n      x: {\n        title: {\n          display: true,\n          text: 'Time (Days)',\n          color: '#FFF'\n        },\n        ticks: {\n          color: '#FFF'\n        },\n        grid: {\n          color: 'rgba(255, 255, 255, 0.2)'\n        }\n      },\n      y: {\n        title: {\n          display: true,\n          text: 'Mushroom Yield (g)',\n          color: '#FFF'\n        },\n        ticks: {\n          color: '#FFF'\n        },\n        grid: {\n          color: 'rgba(255, 255, 255, 0.2)'\n        },\n        beginAtZero: true\n      }\n    }\n  };\n\n  // Map substrate keys to display names\n  const substrateDisplayNames = {\n    riceBran: 'Rice Bran',\n    corn: 'Corn Cob',\n    sugarcane: 'Sugarcane',\n    sawdust: 'Sawdust'\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"growth-simulation\",\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"simulation-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"back-button\",\n        onClick: handleBackClick,\n        children: \"\\u2190 Back\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 281,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Mushroom Growth Simulation\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 282,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 280,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n      className: \"simulation-content\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"simulation-area\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Yield vs Time\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 286,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          style: {\n            color: 'orange',\n            fontStyle: 'italic',\n            textAlign: 'center',\n            marginBottom: '15px'\n          },\n          children: \"Warning: Simulation logic is based on a scaffold. Ensure all equations in the 'derivatives' function are fully implemented for accurate results.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 288,\n          columnNumber: 22\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"chart-container\",\n          style: {\n            position: 'relative',\n            height: '40vh',\n            width: '100%'\n          },\n          children: [\" \", isLoading && /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"Loading and running simulation...\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 292,\n            columnNumber: 39\n          }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n            style: {\n              color: 'red'\n            },\n            children: [\"Error: \", error]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 293,\n            columnNumber: 35\n          }, this), !isLoading && !error && simulationResults && /*#__PURE__*/_jsxDEV(Line, {\n            options: lineChartOptions,\n            data: lineChartData\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 295,\n            columnNumber: 29\n          }, this), !isLoading && !error && !simulationResults && /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"No simulation results to display.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 297,\n            columnNumber: 73\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 291,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 285,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chosen-conditions\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Initial Conditions Used:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 302,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n          children: [Object.entries(displayConditions.substrate).map(([key, value]) => /*#__PURE__*/_jsxDEV(\"li\", {\n            children: [substrateDisplayNames[key] || key, \": \", value, \"g\"]\n          }, key, true, {\n            fileName: _jsxFileName,\n            lineNumber: 305,\n            columnNumber: 29\n          }, this)), /*#__PURE__*/_jsxDEV(\"li\", {\n            children: [\"Temperature: \", displayConditions.temperature, \"\\xB0C\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 307,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n            children: [\"pH: \", displayConditions.ph]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 308,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n            children: [\"Initial Weight: \", (simulationResults ? getInitialState({\n              ...defaultParams,\n              ...{\n                'External Temp': displayConditions.temperature,\n                'pH': displayConditions.ph,\n                'Initial Dry Substrate Weight': displayConditions.substrate.reduce((s, v) => s + v, 0) || defaultParams['Initial Dry Substrate Weight']\n              }\n            })[1] + getInitialState({\n              ...defaultParams,\n              ...{\n                'External Temp': displayConditions.temperature,\n                'pH': displayConditions.ph,\n                'Initial Dry Substrate Weight': displayConditions.substrate.reduce((s, v) => s + v, 0) || defaultParams['Initial Dry Substrate Weight']\n              }\n            })[5] : defaultParams['Initial Dry Substrate Weight']).toFixed(2), \"g\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 310,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n            children: [\"Target Yield (from settings): \", displayConditions.yieldValue, \"g\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 311,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n            children: [\"Simulated Days: \", displayConditions.days]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 312,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 303,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 301,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"view-report-button\",\n        onClick: handleViewReportClick,\n        disabled: isLoading || !!error,\n        children: \"Done\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 316,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 284,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 279,\n    columnNumber: 9\n  }, this);\n};\n_s(GrowthSimulation, \"O3jWYVm51p58B1usPLLZkQ0qg/w=\", false, function () {\n  return [useNavigate];\n});\n_c = GrowthSimulation;\nexport default GrowthSimulation;\nvar _c;\n$RefreshReg$(_c, \"GrowthSimulation\");","map":{"version":3,"names":["React","useState","useEffect","useNavigate","Line","Chart","ChartJS","LineElement","PointElement","Tooltip","Legend","CategoryScale","LinearScale","odeRK4","jsxDEV","_jsxDEV","register","linearInterpolate","data","x","length","i","x0","y0","x1","y1","t","defaultParams","timeStart","timeLength","timeStep","derivatives","dydt","y","currentParams","currentCO2","currentComplexC","currentMushroomYield","currentMycelium","currentN","currentSimpleC","currentSpace","currentTemp","InitC","AvailableN","AvailableC","NEffect","CEffect","Math","sqrt","max","VolumeNormalisation","Effect_of_CO2_on_Mush_Growth","Effect_of_CO2_on_Myc_Growth","Effect_of_pH_on_Mush_Growth","Effect_of_pH_on_Myc_Growth","Effect_of_Temp_on_Mush_Growth","Effect_of_Temp_on_Myc_Growth","TempEff_","TempEffect","pHEff_","pHEffect","CO2Eff_","CO2Effect","RawGrowthRate","GrowthOpp","GrowthRate","NormGrowthRate","flow_Breakdown","flow_CCons","flow_CO2Prod","flow_CO2Vent","flow_Colonisation","flow_MushroomGrowth","flow_NCons","flow_TempProd","flow_TempVent","getInitialState","p","Init_C","runSimulation","inputParams","t0","dt","numSteps","floor","derivativeFuncForSolver","integrator","results","time","state","console","log","step","push","processedResults","map","point","CO2","ComplexC","MushroomYield","Mycelium","N","SimpleC","Space","Temp","GrowthSimulation","_s","navigate","simulationResults","setSimulationResults","isLoading","setIsLoading","error","setError","displayConditions","setDisplayConditions","substrate","temperature","ph","yieldValue","days","savedTemperature","localStorage","getItem","savedPh","savedSubstrateJson","savedYield","Error","substrateData","JSON","parse","temp","parseFloat","phValue","initialWeight","Object","values","reduce","sum","val","simulationInputs","err","message","handleBackClick","handleViewReportClick","formatDate","date","day","String","getDate","padStart","month","getMonth","year","getFullYear","newEntry","yield","entries","key","value","displayNames","riceBran","corn","sugarcane","sawdust","join","conditions","Date","existingHistory","setItem","stringify","alert","lineChartData","labels","toFixed","datasets","label","borderColor","backgroundColor","tension","pointRadius","pointHoverRadius","lineChartOptions","responsive","maintainAspectRatio","plugins","legend","color","tooltip","enabled","scales","title","display","text","ticks","grid","beginAtZero","substrateDisplayNames","className","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","style","fontStyle","textAlign","marginBottom","position","height","width","options","s","v","disabled","_c","$RefreshReg$"],"sources":["C:/Users/celst/sds/src/components/GrowthSimulation.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { Line } from 'react-chartjs-2';\r\nimport { Chart as ChartJS, LineElement, PointElement, Tooltip, Legend, CategoryScale, LinearScale } from 'chart.js';\r\nimport odeRK4 from 'ode-rk4'; // Import the RK4 library\r\n\r\nimport '../styles/GrowthSimulation.css'; // Make sure you have some basic CSS\r\n\r\n// Register required components for Chart.js\r\nChartJS.register(LineElement, PointElement, Tooltip, Legend, CategoryScale, LinearScale);\r\n\r\n// --- Simulation Logic (Adapted from the scaffold) ---\r\n\r\n// Helper function for Converters (Linear Interpolation)\r\nfunction linearInterpolate(data, x) {\r\n    if (!data || data.length === 0) return 0;\r\n    if (x <= data[0][0]) return data[0][1];\r\n    if (x >= data[data.length - 1][0]) return data[data.length - 1][1];\r\n    let i = 0;\r\n    while (i < data.length - 1 && x > data[i + 1][0]) i++;\r\n    const x0 = data[i][0], y0 = data[i][1], x1 = data[i + 1][0], y1 = data[i + 1][1];\r\n    const t = (x - x0) / (x1 - x0);\r\n    return y0 + t * (y1 - y0);\r\n}\r\n\r\n// Default Model Parameters (can be overridden by inputs)\r\nconst defaultParams = {\r\n    timeStart: 0, timeLength: 100, timeStep: 0.2,\r\n    'C BD Rate': 1.11, 'C Coeff': 0.7, 'C Cons. Rate': 76.39, 'CO2 Coeff': 0.8,\r\n    'CO2 Production Rate': 410000, 'CO2 Removal Rate': 12.6, 'External CO2': 428.23,\r\n    'External Temp': 24, 'Growth Coeff': 5.1, 'Initial C:N Ratio': 43.58,\r\n    'Initial Complex:Simple Ratio': 0.8054, 'Initial Dry Substrate Weight': 410.2,\r\n    'IsMush': 1, 'Mushroom Multiplier': 5.17, 'N Coeff': 68.4, 'N Rate': 13.03,\r\n    'pH': 6.91, 'pH Coeff': 1.4, 'Temp Coeff': 1.3, 'Temp Production Rate': 405,\r\n    'Temp Transfer Rate': 1.5,\r\n    'Effect of CO2 on Mush Growth Data': [[500, 0.9], [800, 1], [1000, 0.8], [1200, 0.25], [1400, 0]],\r\n    'Effect of CO2 on Myc Growth Data': [[15000, 1], [20000, 0.9], [25000, 0.25], [30000, 0]],\r\n    'Effect of pH on Mush Growth Data': [[5.5, 0], [6, 0.25], [6.7, 1], [7, 0.6], [7.5, 0]],\r\n    'Effect of pH on Myc Growth Data': [[5.8, 0], [6, 0.25], [6.7, 1], [7, 0.6], [7.5, 0]],\r\n    'Effect of Temp on Mush Growth Data': [[10, 0], [15, 5.37], [20, 6.36], [25, 8.63], [30, 6.37], [40, 0]],\r\n    'Effect of Temp on Myc Growth Data': [[10, 0], [15, 5.37], [20, 6.36], [25, 8.63], [30, 6.37], [35, 5.36], [45, 0]],\r\n};\r\n\r\n// Derivative Function for RK4 Solver\r\nfunction derivatives(dydt, y, t, currentParams) { // Pass params object\r\n    const [\r\n        currentCO2, currentComplexC, currentMushroomYield, currentMycelium,\r\n        currentN, currentSimpleC, currentSpace, currentTemp\r\n    ] = y;\r\n\r\n    // --- Calculate intermediate variables ---\r\n    // *** THIS SECTION IS INCOMPLETE - NEEDS ALL MODEL EQUATIONS ***\r\n    const InitC = currentParams['Initial Dry Substrate Weight'] - (currentParams['Initial Dry Substrate Weight'] / (currentParams['Initial C:N Ratio'] + 1));\r\n    const AvailableN = currentN / currentParams['Initial Dry Substrate Weight'];\r\n    const AvailableC = currentSimpleC / currentParams['Initial Dry Substrate Weight'];\r\n    const NEffect = currentParams['N Coeff'] * AvailableN;\r\n    const CEffect = Math.sqrt(Math.max(0, currentParams['C Coeff'] * AvailableC));\r\n    const VolumeNormalisation = Math.sqrt(100 / currentParams['Initial Dry Substrate Weight']);\r\n\r\n    const Effect_of_CO2_on_Mush_Growth = linearInterpolate(currentParams['Effect of CO2 on Mush Growth Data'], currentCO2);\r\n    const Effect_of_CO2_on_Myc_Growth = linearInterpolate(currentParams['Effect of CO2 on Myc Growth Data'], currentCO2);\r\n    const Effect_of_pH_on_Mush_Growth = linearInterpolate(currentParams['Effect of pH on Mush Growth Data'], currentParams['pH']);\r\n    const Effect_of_pH_on_Myc_Growth = linearInterpolate(currentParams['Effect of pH on Myc Growth Data'], currentParams['pH']);\r\n    const Effect_of_Temp_on_Mush_Growth = linearInterpolate(currentParams['Effect of Temp on Mush Growth Data'], currentTemp);\r\n    const Effect_of_Temp_on_Myc_Growth = linearInterpolate(currentParams['Effect of Temp on Myc Growth Data'], currentTemp);\r\n\r\n    const TempEff_ = currentParams['IsMush'] === 0 ? Effect_of_Temp_on_Myc_Growth : Effect_of_Temp_on_Mush_Growth;\r\n    const TempEffect = (currentParams['Temp Coeff'] * TempEff_) / 10;\r\n    const pHEff_ = currentParams['IsMush'] === 0 ? Effect_of_pH_on_Myc_Growth : Effect_of_pH_on_Mush_Growth;\r\n    const pHEffect = pHEff_ * currentParams['pH Coeff'];\r\n    const CO2Eff_ = currentParams['IsMush'] === 0 ? Effect_of_CO2_on_Myc_Growth : Effect_of_CO2_on_Mush_Growth;\r\n    const CO2Effect = currentParams['CO2 Coeff'] * CO2Eff_;\r\n\r\n    const RawGrowthRate = TempEffect * pHEffect * NEffect * CEffect * CO2Effect;\r\n    const GrowthOpp = currentSpace * currentMycelium;\r\n    let GrowthRate = currentParams['IsMush'] === 1 ? (RawGrowthRate * currentParams['Growth Coeff']) : (RawGrowthRate * GrowthOpp * currentParams['Growth Coeff']);\r\n    let NormGrowthRate = currentParams['IsMush'] === 1 ? (GrowthRate / 100) : GrowthRate;\r\n\r\n    // *** ADD ALL OTHER VARIABLE EQUATIONS FROM YOUR MODEL HERE ***\r\n    // --- Calculate flow rates ---\r\n    const flow_Breakdown = currentMycelium * currentParams['C BD Rate'] * currentComplexC * RawGrowthRate * VolumeNormalisation;\r\n    const flow_CCons = NormGrowthRate * currentParams['C Cons. Rate'];\r\n    const flow_CO2Prod = NormGrowthRate * currentParams['CO2 Production Rate'];\r\n    const flow_CO2Vent = currentParams['CO2 Removal Rate'] * (currentCO2 - currentParams['External CO2']) * VolumeNormalisation;\r\n    const flow_Colonisation = currentParams['IsMush'] === 0 ? GrowthRate : 0;\r\n    const flow_MushroomGrowth = currentParams['IsMush'] === 1 ? (GrowthRate * currentParams['Mushroom Multiplier']) : 0;\r\n    const flow_NCons = NormGrowthRate * currentParams['N Rate'];\r\n    const flow_TempProd = NormGrowthRate * currentParams['Temp Production Rate'];\r\n    const flow_TempVent = (currentTemp - currentParams['External Temp']) * currentParams['Temp Transfer Rate'] * VolumeNormalisation;\r\n\r\n    // --- Calculate derivatives (dStock/dt) ---\r\n    dydt[0] = flow_CO2Prod - flow_CO2Vent;          // dCO2/dt\r\n    dydt[1] = -flow_Breakdown;                       // dComplexC/dt\r\n    dydt[2] = flow_MushroomGrowth;                   // dMushroomYield/dt\r\n    dydt[3] = flow_Colonisation;                     // dMycelium/dt\r\n    dydt[4] = -flow_NCons;                           // dN/dt\r\n    dydt[5] = flow_Breakdown - flow_CCons;           // dSimpleC/dt\r\n    dydt[6] = -flow_Colonisation;                    // dSpace/dt\r\n    dydt[7] = flow_TempProd - flow_TempVent;         // dTemp/dt\r\n\r\n    // Apply non-negative constraints (basic check)\r\n    if (currentCO2 <= 0 && dydt[0] < 0) dydt[0] = 0;\r\n    if (currentComplexC <= 0 && dydt[1] < 0) dydt[1] = 0;\r\n    if (currentN <= 0 && dydt[4] < 0) dydt[4] = 0;\r\n    if (currentSimpleC <= 0 && dydt[5] < 0) dydt[5] = 0;\r\n    if (currentTemp <= 0 && dydt[7] < 0) dydt[7] = 0; // Assuming Temp > 0\r\n}\r\n\r\n// Initial State Calculation\r\nfunction getInitialState(p) {\r\n    const Init_C = p['Initial Dry Substrate Weight'] - (p['Initial Dry Substrate Weight'] / (p['Initial C:N Ratio'] + 1));\r\n    return [\r\n        p['External CO2'],                                  // initialCO2\r\n        Init_C * p['Initial Complex:Simple Ratio'],         // initialComplexC\r\n        0,                                                  // initialMushroomYield\r\n        0.9,                                                // initialMycelium\r\n        p['Initial Dry Substrate Weight'] / (p['Initial C:N Ratio'] + 1), // initialN\r\n        Init_C * (1 - p['Initial Complex:Simple Ratio']),   // initialSimpleC\r\n        0.98,                                               // initialSpace\r\n        p['External Temp']                                  // initialTemp\r\n    ];\r\n}\r\n\r\n// Run Simulation Function\r\nfunction runSimulation(inputParams) {\r\n    const currentParams = { ...defaultParams, ...inputParams };\r\n    const y0 = getInitialState(currentParams);\r\n    const t0 = currentParams.timeStart;\r\n    const dt = currentParams.timeStep;\r\n    const numSteps = Math.floor(currentParams.timeLength / dt);\r\n\r\n    // Wrap the derivative function to pass currentParams\r\n    const derivativeFuncForSolver = (dydt, y, t) => {\r\n        derivatives(dydt, y, t, currentParams);\r\n    };\r\n\r\n    const integrator = odeRK4(y0, derivativeFuncForSolver, t0, dt);\r\n    const results = [{ time: integrator.t, state: [...integrator.y] }];\r\n\r\n    console.log(\"Starting JS simulation...\");\r\n    for (let i = 0; i < numSteps; i++) {\r\n        integrator.step();\r\n        results.push({ time: integrator.t, state: [...integrator.y] });\r\n    }\r\n    console.log(\"JS simulation finished.\");\r\n\r\n    const processedResults = results.map(point => ({\r\n        time: point.time,\r\n        CO2: point.state[0], ComplexC: point.state[1], MushroomYield: point.state[2],\r\n        Mycelium: point.state[3], N: point.state[4], SimpleC: point.state[5],\r\n        Space: point.state[6], Temp: point.state[7]\r\n    }));\r\n    return processedResults;\r\n}\r\n\r\n// --- React Component ---\r\nconst GrowthSimulation = () => {\r\n    const navigate = useNavigate();\r\n    const [simulationResults, setSimulationResults] = useState(null);\r\n    const [isLoading, setIsLoading] = useState(true);\r\n    const [error, setError] = useState(null);\r\n    const [displayConditions, setDisplayConditions] = useState({ // For displaying inputs\r\n        substrate: {}, temperature: 0, ph: 0, yieldValue: 0, days: defaultParams.timeLength\r\n    });\r\n\r\n    useEffect(() => {\r\n        setIsLoading(true);\r\n        setError(null);\r\n        try {\r\n            // Load parameters from localStorage\r\n            const savedTemperature = localStorage.getItem('temperature');\r\n            const savedPh = localStorage.getItem('ph');\r\n            const savedSubstrateJson = localStorage.getItem('substrate');\r\n            const savedYield = localStorage.getItem('yield'); // Initial target yield\r\n\r\n            if (!savedTemperature || !savedPh || !savedSubstrateJson) {\r\n                throw new Error(\"Required parameters not found in localStorage.\");\r\n            }\r\n\r\n            const substrateData = JSON.parse(savedSubstrateJson);\r\n            const temp = parseFloat(savedTemperature);\r\n            const phValue = parseFloat(savedPh);\r\n            const initialWeight = Object.values(substrateData).reduce((sum, val) => sum + val, 0); // Calculate initial weight from substrate parts\r\n\r\n            // Store for display\r\n            setDisplayConditions({\r\n                substrate: substrateData, temperature: temp, ph: phValue,\r\n                yieldValue: parseFloat(savedYield) || 0, days: defaultParams.timeLength\r\n            });\r\n\r\n            // Prepare inputs for the simulation function\r\n            const simulationInputs = {\r\n                'External Temp': temp,\r\n                'pH': phValue,\r\n                // Use calculated total weight if that's the intended input, otherwise use default\r\n                'Initial Dry Substrate Weight': initialWeight || defaultParams['Initial Dry Substrate Weight'],\r\n                // Add overrides for other params based on substrate if needed\r\n                // e.g., 'Initial C:N Ratio': calculateCNRatio(substrateData),\r\n            };\r\n\r\n            // Run the simulation\r\n            const results = runSimulation(simulationInputs);\r\n            setSimulationResults(results);\r\n\r\n        } catch (err) {\r\n            console.error(\"Error during simulation setup or run:\", err);\r\n            setError(err.message || \"Failed to run simulation.\");\r\n            // Optionally navigate back or show error prominently\r\n            // navigate('/condition-setting');\r\n        } finally {\r\n            setIsLoading(false);\r\n        }\r\n    }, [navigate]); // Run once on mount\r\n\r\n    const handleBackClick = () => {\r\n        navigate('/condition-setting');\r\n    };\r\n\r\n    const handleViewReportClick = () => {\r\n        // This saves data based on INITIAL conditions from localStorage.\r\n        const formatDate = (date) => { /* ... date formatting ... */\r\n            const day = String(date.getDate()).padStart(2, '0');\r\n            const month = String(date.getMonth() + 1).padStart(2, '0');\r\n            const year = date.getFullYear();\r\n            return `${day}/${month}/${year}`;\r\n         };\r\n        const newEntry = {\r\n            days: displayConditions.days,\r\n            yield: `${displayConditions.yieldValue}g`, // Initial target yield\r\n            substrate: Object.entries(displayConditions.substrate)\r\n                .map(([key, value]) => { /* ... substrate formatting ... */\r\n                    const displayNames = { riceBran: 'Rice Bran', corn: 'Corn Cob', sugarcane: 'Sugarcane', sawdust: 'Sawdust' };\r\n                    return `${displayNames[key] || key}: ${value}g`;\r\n                 })\r\n                .join(', '),\r\n            conditions: `Temperature: ${displayConditions.temperature}°C, pH: ${displayConditions.ph}`,\r\n            date: formatDate(new Date()),\r\n        };\r\n        try {\r\n            const existingHistory = JSON.parse(localStorage.getItem('growthHistory')) || [];\r\n            localStorage.setItem('growthHistory', JSON.stringify([...existingHistory, newEntry]));\r\n            navigate('/');\r\n        } catch (err) {\r\n            console.error(\"Error saving growth history:\", err);\r\n            alert(\"Could not save growth history.\");\r\n        }\r\n    };\r\n\r\n    // Prepare data for Chart.js\r\n    const lineChartData = {\r\n        labels: simulationResults ? simulationResults.map(p => p.time.toFixed(1)) : [],\r\n        datasets: [\r\n            {\r\n                label: 'Simulated Mushroom Yield (g)',\r\n                data: simulationResults ? simulationResults.map(p => p.MushroomYield) : [],\r\n                borderColor: 'lightgreen',\r\n                backgroundColor: 'rgba(144, 238, 144, 0.2)', // Optional fill\r\n                tension: 0.1, // Optional line smoothing\r\n                pointRadius: 2,\r\n                pointHoverRadius: 5,\r\n            },\r\n        ],\r\n    };\r\n\r\n    // Chart options\r\n    const lineChartOptions = {\r\n        responsive: true, maintainAspectRatio: false, // Allow chart to resize\r\n        plugins: { legend: { labels: { color: '#FFF' } }, tooltip: { enabled: true } },\r\n        scales: {\r\n            x: { title: { display: true, text: 'Time (Days)', color: '#FFF' }, ticks: { color: '#FFF' }, grid: { color: 'rgba(255, 255, 255, 0.2)' } },\r\n            y: { title: { display: true, text: 'Mushroom Yield (g)', color: '#FFF' }, ticks: { color: '#FFF' }, grid: { color: 'rgba(255, 255, 255, 0.2)' }, beginAtZero: true }\r\n        }\r\n    };\r\n\r\n    // Map substrate keys to display names\r\n    const substrateDisplayNames = { riceBran: 'Rice Bran', corn: 'Corn Cob', sugarcane: 'Sugarcane', sawdust: 'Sawdust' };\r\n\r\n    return (\r\n        <div className=\"growth-simulation\">\r\n            <header className=\"simulation-header\">\r\n                <button className=\"back-button\" onClick={handleBackClick}>← Back</button>\r\n                <h1>Mushroom Growth Simulation</h1>\r\n            </header>\r\n            <main className=\"simulation-content\">\r\n                <div className=\"simulation-area\">\r\n                    <h3>Yield vs Time</h3>\r\n                     {/* Warning about incomplete logic */}\r\n                     <p style={{ color: 'orange', fontStyle: 'italic', textAlign: 'center', marginBottom: '15px' }}>\r\n                        Warning: Simulation logic is based on a scaffold. Ensure all equations in the 'derivatives' function are fully implemented for accurate results.\r\n                    </p>\r\n                    <div className=\"chart-container\" style={{ position: 'relative', height: '40vh', width: '100%' }}> {/* Set height */}\r\n                        {isLoading && <p>Loading and running simulation...</p>}\r\n                        {error && <p style={{ color: 'red' }}>Error: {error}</p>}\r\n                        {!isLoading && !error && simulationResults && (\r\n                            <Line options={lineChartOptions} data={lineChartData} />\r\n                        )}\r\n                         {!isLoading && !error && !simulationResults && <p>No simulation results to display.</p>}\r\n                    </div>\r\n                </div>\r\n\r\n                <div className=\"chosen-conditions\">\r\n                    <h3>Initial Conditions Used:</h3>\r\n                    <ul>\r\n                        {Object.entries(displayConditions.substrate).map(([key, value]) => (\r\n                            <li key={key}>{substrateDisplayNames[key] || key}: {value}g</li>\r\n                        ))}\r\n                        <li>Temperature: {displayConditions.temperature}°C</li>\r\n                        <li>pH: {displayConditions.ph}</li>\r\n                        {/* Display calculated initial weight used */}\r\n                        <li>Initial Weight: {(simulationResults ? getInitialState( { ...defaultParams, ...{ 'External Temp': displayConditions.temperature, 'pH': displayConditions.ph, 'Initial Dry Substrate Weight': displayConditions.substrate.reduce((s,v)=>s+v,0) || defaultParams['Initial Dry Substrate Weight']} })[1] + getInitialState( { ...defaultParams, ...{ 'External Temp': displayConditions.temperature, 'pH': displayConditions.ph, 'Initial Dry Substrate Weight': displayConditions.substrate.reduce((s,v)=>s+v,0) || defaultParams['Initial Dry Substrate Weight']} })[5] : defaultParams['Initial Dry Substrate Weight']).toFixed(2)}g</li>\r\n                        <li>Target Yield (from settings): {displayConditions.yieldValue}g</li>\r\n                        <li>Simulated Days: {displayConditions.days}</li>\r\n                    </ul>\r\n                </div>\r\n\r\n                <button className=\"view-report-button\" onClick={handleViewReportClick} disabled={isLoading || !!error}>\r\n                    Done\r\n                </button>\r\n            </main>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default GrowthSimulation;\r\n\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}