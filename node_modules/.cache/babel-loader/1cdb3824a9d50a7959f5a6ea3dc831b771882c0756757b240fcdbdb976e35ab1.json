{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\celst\\\\sds\\\\src\\\\components\\\\GrowthSimulation.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { Line } from 'react-chartjs-2';\nimport { Chart as ChartJS, LineElement, PointElement, Tooltip, Legend, CategoryScale, LinearScale, Title, Interaction } from 'chart.js';\nimport { getElementAtEvent } from 'react-chartjs-2';\nimport odeRK4 from 'ode-rk4';\n\n// --- CSS and Asset Imports ---\n// Adjust these paths according to your project structure\nimport '../styles/GrowthSimulation.css';\nimport logoSrc from '../assets/images/cslogo.png';\nimport asset1Src from '../assets/images/my100.jpg'; // Image for Day 0 click\nimport day1Src from '../assets/images/Day1.jpg'; // <<< IMPORT Image for Day 10 click\nimport day5Src from '../assets/images/Day5.jpg'; // <<< IMPORT Image for Last Day click\n\n// --- Simulation Logic & ChartJS Registration ---\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nChartJS.register(LineElement, PointElement, Tooltip, Legend, CategoryScale, LinearScale, Title);\n\n// *** Default Parameters & Simulation Functions ***\n// (Assume defaultParamsMushroom, defaultParamsMycelium, FIXED_CN_RATIO,\n// linearInterpolate, derivatives, getInitialState, runSimulation are unchanged from previous version)\n// *** Default Parameters for MUSHROOM Growth ***\nconst defaultParamsMushroom = {\n  timeStart: 0,\n  timeLength: 100,\n  timeStep: 0.2,\n  'C BD Rate': 1.11,\n  'C Coeff': 0.7,\n  'C Cons. Rate': 76.39,\n  'CO2 Coeff': 0.8,\n  'CO2 Production Rate': 410000,\n  'CO2 Removal Rate': 12.6,\n  'External CO2': 428.23,\n  'External Temp': 24,\n  'Growth Coeff': 5.1,\n  'Initial Complex:Simple Ratio': 0.8054,\n  'Initial Dry Substrate Weight': 410.2,\n  // Default fallback weight\n  'IsMush': 1,\n  // Mushroom phase\n  'Mushroom Multiplier': 5.17,\n  'N Coeff': 68.4,\n  'N Rate': 13.03,\n  'pH': 6.91,\n  // Default fallback pH\n  'pH Coeff': 1.4,\n  'Temp Coeff': 1.3,\n  'Temp Production Rate': 405,\n  'Temp Transfer Rate': 1.5,\n  'Effect of CO2 on Mush Growth Data': [[500, 0.9], [800, 1], [1000, 0.8], [1200, 0.25], [1400, 0]],\n  'Effect of CO2 on Myc Growth Data': [[15000, 1], [20000, 0.9], [25000, 0.25], [30000, 0]],\n  'Effect of pH on Mush Growth Data': [[5.5, 0], [6, 0.25], [6.7, 1], [7, 0.6], [7.5, 0]],\n  'Effect of pH on Myc Growth Data': [[5.8, 0], [6, 0.25], [6.7, 1], [7, 0.6], [7.5, 0]],\n  'Effect of Temp on Mush Growth Data': [[10, 0], [15, 5.37], [20, 6.36], [25, 8.63], [30, 6.37], [40, 0]],\n  'Effect of Temp on Myc Growth Data': [[10, 0], [15, 5.37], [20, 6.36], [25, 8.63], [30, 6.37], [35, 5.36], [45, 0]],\n  'Initial Mycelium': 0.9 // Assume high colonization before fruiting\n};\n\n// *** Default Parameters for MYCELIUM Growth ***\nconst defaultParamsMycelium = {\n  timeStart: 0,\n  timeLength: 100,\n  timeStep: 0.2,\n  'C BD Rate': 1.11,\n  'C Coeff': 0.7,\n  'C Cons. Rate': 76.39,\n  'CO2 Coeff': 0.8,\n  'CO2 Production Rate': 410000,\n  'CO2 Removal Rate': 1,\n  'External CO2': 428.23,\n  'External Temp': 28,\n  'Growth Coeff': 5.4,\n  'Initial Complex:Simple Ratio': 0.867,\n  'Initial Dry Substrate Weight': 200,\n  // Default fallback weight\n  'IsMush': 0,\n  // Mycelium phase\n  'Mushroom Multiplier': 26,\n  'N Coeff': 68.4,\n  'N Rate': 1.53,\n  'pH': 6.91,\n  // Default fallback pH\n  'pH Coeff': 1.4,\n  'Temp Coeff': 1.7,\n  'Temp Production Rate': 255,\n  'Temp Transfer Rate': 1.5,\n  'Effect of CO2 on Mush Growth Data': [[500, 0.9], [800, 1], [1000, 0.8], [1200, 0.25], [1400, 0]],\n  'Effect of CO2 on Myc Growth Data': [[15000, 1], [20000, 0.9], [25000, 0.25], [30000, 0]],\n  'Effect of pH on Mush Growth Data': [[5.5, 0], [6, 0.25], [6.7, 1], [7, 0.6], [7.5, 0]],\n  'Effect of pH on Myc Growth Data': [[5.8, 0], [6, 0.25], [6.7, 1], [7, 0.6], [7.5, 0]],\n  'Effect of Temp on Mush Growth Data': [[10, 0], [15, 5.37], [20, 6.36], [25, 8.63], [30, 6.37], [40, 0]],\n  'Effect of Temp on Myc Growth Data': [[10, 0], [15, 5.37], [20, 6.36], [25, 8.63], [30, 6.37], [35, 5.36], [45, 0]],\n  'Initial Mycelium': 0.004 // From Model(1).json\n};\n\n// FIXED C:N Ratio as previously requested\nconst FIXED_CN_RATIO = 0.96;\n\n// --- Simulation Functions ---\nfunction linearInterpolate(data, x) {\n  if (!data || data.length === 0) return 0;\n  if (x <= data[0][0]) return data[0][1];\n  if (x >= data[data.length - 1][0]) return data[data.length - 1][1];\n  let i = 0;\n  while (i < data.length - 1 && x > data[i + 1][0]) i++;\n  const x0 = data[i][0],\n    y0 = data[i][1];\n  const x1 = data[i + 1][0],\n    y1 = data[i + 1][1];\n  const divisor = x1 - x0;\n  if (divisor === 0) return y0;\n  const t = (x - x0) / divisor;\n  return y0 + t * (y1 - y0);\n}\nfunction derivatives(dydt, y, t, currentParams) {\n  const [currentCO2, currentComplexC, currentMushroomYield, currentMycelium, currentN, currentSimpleC, currentSpace, currentTemp] = y;\n  const initialDrySubstrateWeight = currentParams['Initial Dry Substrate Weight'] || 1;\n  const cnRatio = currentParams['Initial C:N Ratio'];\n  const cnRatioPlusOne = cnRatio + 1;\n  const InitC = initialDrySubstrateWeight - initialDrySubstrateWeight / cnRatioPlusOne;\n  const AvailableN = initialDrySubstrateWeight > 0 ? currentN / initialDrySubstrateWeight : 0;\n  const AvailableC = initialDrySubstrateWeight > 0 ? currentSimpleC / initialDrySubstrateWeight : 0;\n  const VolumeNormalisation = initialDrySubstrateWeight > 0 ? Math.sqrt(100 / initialDrySubstrateWeight) : Math.sqrt(100);\n  const Effect_of_CO2_on_Mush_Growth = linearInterpolate(currentParams['Effect of CO2 on Mush Growth Data'], currentCO2);\n  const Effect_of_CO2_on_Myc_Growth = linearInterpolate(currentParams['Effect of CO2 on Myc Growth Data'], currentCO2);\n  const Effect_of_pH_on_Mush_Growth = linearInterpolate(currentParams['Effect of pH on Mush Growth Data'], currentParams['pH']);\n  const Effect_of_pH_on_Myc_Growth = linearInterpolate(currentParams['Effect of pH on Myc Growth Data'], currentParams['pH']);\n  const Effect_of_Temp_on_Mush_Growth = linearInterpolate(currentParams['Effect of Temp on Mush Growth Data'], currentTemp);\n  const Effect_of_Temp_on_Myc_Growth = linearInterpolate(currentParams['Effect of Temp on Myc Growth Data'], currentTemp);\n  const isMushPhase = currentParams['IsMush'] === 1;\n  const TempEff_ = isMushPhase ? Effect_of_Temp_on_Mush_Growth : Effect_of_Temp_on_Myc_Growth;\n  const TempEffect = currentParams['Temp Coeff'] * TempEff_ / 10;\n  const pHEff_ = isMushPhase ? Effect_of_pH_on_Mush_Growth : Effect_of_pH_on_Myc_Growth;\n  const pHEffect = pHEff_ * currentParams['pH Coeff'];\n  const CO2Eff_ = isMushPhase ? Effect_of_CO2_on_Mush_Growth : Effect_of_CO2_on_Myc_Growth;\n  const CO2Effect = currentParams['CO2 Coeff'] * CO2Eff_;\n  const NEffect = currentParams['N Coeff'] * AvailableN;\n  const CEffect = Math.sqrt(Math.max(0, currentParams['C Coeff'] * AvailableC));\n  const safeTempEffect = Math.max(0, TempEffect);\n  const safePhEffect = Math.max(0, pHEffect);\n  const safeNEffect = Math.max(0, NEffect);\n  const safeCEffect = Math.max(0, CEffect);\n  const safeCO2Effect = Math.max(0, CO2Effect);\n  const RawGrowthRate = safeTempEffect * safePhEffect * safeNEffect * safeCEffect * safeCO2Effect;\n  const GrowthOpp = currentSpace * currentMycelium;\n  let GrowthRate = isMushPhase ? RawGrowthRate * currentParams['Growth Coeff'] : RawGrowthRate * GrowthOpp * currentParams['Growth Coeff'];\n  GrowthRate = Math.max(0, GrowthRate);\n  let NormGrowthRate = isMushPhase ? GrowthRate / 100 : GrowthRate;\n  NormGrowthRate = Math.max(0, NormGrowthRate);\n  const flow_Breakdown = Math.max(0, currentMycelium * currentParams['C BD Rate'] * currentComplexC * RawGrowthRate * VolumeNormalisation);\n  const flow_CCons = Math.max(0, NormGrowthRate * currentParams['C Cons. Rate']);\n  const flow_CO2Prod = Math.max(0, NormGrowthRate * currentParams['CO2 Production Rate']);\n  const flow_CO2Vent = Math.max(0, currentParams['CO2 Removal Rate'] * (currentCO2 - currentParams['External CO2']) * VolumeNormalisation);\n  const flow_Colonisation = isMushPhase ? 0 : GrowthRate;\n  const flow_MushroomGrowth = isMushPhase ? Math.max(0, GrowthRate * currentParams['Mushroom Multiplier']) : 0;\n  const flow_NCons = Math.max(0, NormGrowthRate * currentParams['N Rate']);\n  const flow_TempProd = Math.max(0, NormGrowthRate * currentParams['Temp Production Rate']);\n  const flow_TempVent = Math.max(0, (currentTemp - currentParams['External Temp']) * currentParams['Temp Transfer Rate'] * VolumeNormalisation);\n  dydt[0] = flow_CO2Prod - flow_CO2Vent;\n  dydt[1] = -flow_Breakdown;\n  dydt[2] = flow_MushroomGrowth;\n  dydt[3] = flow_Colonisation;\n  dydt[4] = -flow_NCons;\n  dydt[5] = flow_Breakdown - flow_CCons;\n  dydt[6] = -flow_Colonisation;\n  dydt[7] = flow_TempProd - flow_TempVent;\n  const epsilon = 1e-9;\n  if (y[0] <= epsilon && dydt[0] < 0) dydt[0] = 0;\n  if (y[1] <= epsilon && dydt[1] < 0) dydt[1] = 0;\n  if (y[2] <= epsilon && dydt[2] < 0) dydt[2] = 0;\n  if (y[3] <= epsilon && dydt[3] < 0) dydt[3] = 0;\n  if (y[4] <= epsilon && dydt[4] < 0) dydt[4] = 0;\n  if (y[5] <= epsilon && dydt[5] < 0) dydt[5] = 0;\n  if (y[6] <= epsilon && dydt[6] < 0) dydt[6] = 0;\n}\nfunction getInitialState(p, initialMyceliumValue) {\n  const initialDrySubstrateWeight = Number(p['Initial Dry Substrate Weight']);\n  const cnRatio = Number(p['Initial C:N Ratio']);\n  const complexSimpleRatio = Number(p['Initial Complex:Simple Ratio']);\n  if (isNaN(initialDrySubstrateWeight) || initialDrySubstrateWeight <= 0 || isNaN(cnRatio) || cnRatio <= 0 || isNaN(complexSimpleRatio) || complexSimpleRatio < 0 || complexSimpleRatio > 1) {\n    console.error(\"Invalid parameters for getInitialState:\", p);\n    return [400, 200, 0, 0.01, 10, 50, 0.99, 25];\n  }\n  const cnRatioPlusOne = cnRatio + 1;\n  const Init_N = initialDrySubstrateWeight / cnRatioPlusOne;\n  const Init_C = initialDrySubstrateWeight - Init_N;\n  const initialSpace = Math.max(0, 1 - initialMyceliumValue);\n  return [Number(p['External CO2']), Init_C * complexSimpleRatio, 0, initialMyceliumValue, Init_N, Init_C * (1 - complexSimpleRatio), initialSpace, Number(p['External Temp'])];\n}\nfunction runSimulation(inputParams, defaultParamSet) {\n  var _currentParams$Initia, _currentParams$Initia2;\n  if (!defaultParamSet) {\n    console.error(\"runSimulation called without defaultParamSet!\");\n    return [];\n  }\n  const currentParams = {\n    ...defaultParamSet,\n    ...inputParams,\n    'Initial C:N Ratio': FIXED_CN_RATIO\n  };\n  const finalInitialWeight = Number(currentParams['Initial Dry Substrate Weight']);\n  const finalCNRatio = Number(currentParams['Initial C:N Ratio']);\n  const finalComplexSimpleRatio = Number(currentParams['Initial Complex:Simple Ratio']);\n  const finalExternalCO2 = Number(currentParams['External CO2']);\n  const finalExternalTemp = Number(currentParams['External Temp']);\n  const initialMyceliumValue = currentParams['IsMush'] === 0 ? (_currentParams$Initia = currentParams['Initial Mycelium']) !== null && _currentParams$Initia !== void 0 ? _currentParams$Initia : defaultParamsMycelium['Initial Mycelium'] : (_currentParams$Initia2 = currentParams['Initial Mycelium']) !== null && _currentParams$Initia2 !== void 0 ? _currentParams$Initia2 : defaultParamsMushroom['Initial Mycelium'];\n  const initialStateParams = {\n    'Initial Dry Substrate Weight': finalInitialWeight,\n    'Initial C:N Ratio': finalCNRatio,\n    'Initial Complex:Simple Ratio': finalComplexSimpleRatio,\n    'External CO2': finalExternalCO2,\n    'External Temp': finalExternalTemp\n  };\n  const y0 = getInitialState(initialStateParams, initialMyceliumValue);\n  const t0 = currentParams.timeStart;\n  const dt = currentParams.timeStep;\n  const timeLength = Math.max(0, Number(currentParams.timeLength));\n  const positiveDt = Math.max(dt, 1e-6);\n  const numSteps = timeLength > 0 && positiveDt > 0 ? Math.floor(timeLength / positiveDt) : 0;\n  const derivativeFuncForSolver = (dydt, y, t) => {\n    try {\n      derivatives(dydt, y, t, currentParams);\n    } catch (e) {\n      console.error(\"Error inside derivatives function:\", e);\n      dydt.fill(0);\n    }\n  };\n  const integrator = odeRK4(y0, derivativeFuncForSolver, t0, positiveDt);\n  const results = [{\n    time: integrator.t,\n    state: [...integrator.y]\n  }];\n  const simType = currentParams['IsMush'] === 0 ? 'Mycelium' : 'Mushroom';\n  // console.log(`Starting ${simType} simulation: Time=${timeLength} days, Steps=${numSteps}, dt=${positiveDt}`);\n  if (numSteps <= 0) {\n    console.warn(`${simType} Sim: timeLength or timeStep results in 0 steps. Simulation not run.`);\n    return [];\n  }\n  for (let i = 0; i < numSteps; i++) {\n    try {\n      integrator.step();\n      if (integrator.y.some(val => !Number.isFinite(val))) {\n        console.error(`${simType} Sim: Non-finite value detected at t=${integrator.t.toFixed(2)}. State:`, integrator.y); /* break; */\n      }\n      results.push({\n        time: integrator.t,\n        state: [...integrator.y]\n      });\n    } catch (solverError) {\n      console.error(`${simType} Sim: RK4 solver error at t=${integrator.t.toFixed(2)}:`, solverError);\n      break;\n    }\n  }\n  // console.log(`${simType} simulation finished after ${results.length - 1} steps.`);\n  return results.map(p => ({\n    time: p.time,\n    CO2: p.state[0],\n    ComplexC: p.state[1],\n    MushroomYield: p.state[2],\n    Mycelium: p.state[3],\n    N: p.state[4],\n    SimpleC: p.state[5],\n    Space: p.state[6],\n    Temp: p.state[7]\n  }));\n}\n// --- (End of Simulation Functions) ---\n\n// --- Helper Functions ---\nfunction formatDate_DDMMYYYY(dateString) {\n  if (!dateString || dateString === 'N/A' || !/^\\d{4}-\\d{2}-\\d{2}$/.test(dateString)) {\n    return 'N/A';\n  }\n  try {\n    const [year, month, day] = dateString.split('-');\n    return `${day}-${month}-${year}`;\n  } catch (e) {\n    console.error(\"Error formatting date:\", e);\n    return 'N/A';\n  }\n}\nfunction calculateAndFormatEndDate(startDateStr, durationDays) {\n  if (!startDateStr || startDateStr === 'N/A' || !/^\\d{4}-\\d{2}-\\d{2}$/.test(startDateStr) || isNaN(durationDays) || durationDays < 0) {\n    return 'N/A';\n  }\n  try {\n    const startDateObj = new Date(startDateStr);\n    const endDateObj = new Date(startDateObj.getTime());\n    endDateObj.setDate(endDateObj.getDate() + durationDays);\n    const endYear = endDateObj.getFullYear();\n    const endMonth = String(endDateObj.getMonth() + 1).padStart(2, '0');\n    const endDay = String(endDateObj.getDate()).padStart(2, '0');\n    const endDateStrYYYYMMDD = `${endYear}-${endMonth}-${endDay}`;\n    return formatDate_DDMMYYYY(endDateStrYYYYMMDD);\n  } catch (dateError) {\n    console.error(\"Error calculating end date:\", dateError);\n    return 'N/A';\n  }\n}\n\n// --- React Component Definition ---\nconst GrowthSimulation = () => {\n  _s();\n  const navigate = useNavigate();\n  const chartRef = useRef(null); // Ref to access the chart instance\n\n  // --- State Variables ---\n  const [simulationResultsMushroom, setSimulationResultsMushroom] = useState(null);\n  const [simulationResultsMycelium, setSimulationResultsMycelium] = useState(null);\n  const [isLoading, setIsLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [batchName, setBatchName] = useState('');\n  const [startDate, setStartDate] = useState('');\n  const [endDate, setEndDate] = useState('N/A');\n  const [finalSimulatedYield, setFinalSimulatedYield] = useState(null);\n  const [activeChartTab, setActiveChartTab] = useState('yield');\n  const [animationImageSrc, setAnimationImageSrc] = useState(null);\n\n  // --- Local Storage Keys ---\n  const LOCAL_STORAGE_KEYS = {\n    TEMPERATURE: 'sim_temperature',\n    PH: 'sim_ph',\n    SUBSTRATE: 'sim_substrate',\n    SIMULATION_DAYS: 'sim_duration',\n    BATCH_NAME: 'sim_batch_name',\n    START_DATE: 'sim_start_date'\n  };\n\n  // --- Effect Hook to Run Simulations on Mount ---\n  useEffect(() => {\n    let isMounted = true;\n    setIsLoading(true);\n    setError(null);\n    setFinalSimulatedYield(null);\n    setSimulationResultsMushroom(null);\n    setSimulationResultsMycelium(null);\n    setEndDate('N/A');\n    setAnimationImageSrc(null);\n    const runSimulationsAsync = async () => {\n      await new Promise(resolve => setTimeout(resolve, 50));\n      if (!isMounted) return;\n      let savedTempStr, savedPhStr, savedSubstrateJson, savedDaysStr, savedBatchName, savedStartDateStr;\n      try {\n        // Load parameters\n        savedTempStr = localStorage.getItem(LOCAL_STORAGE_KEYS.TEMPERATURE);\n        savedPhStr = localStorage.getItem(LOCAL_STORAGE_KEYS.PH);\n        savedSubstrateJson = localStorage.getItem(LOCAL_STORAGE_KEYS.SUBSTRATE);\n        savedDaysStr = localStorage.getItem(LOCAL_STORAGE_KEYS.SIMULATION_DAYS);\n        savedBatchName = localStorage.getItem(LOCAL_STORAGE_KEYS.BATCH_NAME) || 'N/A';\n        savedStartDateStr = localStorage.getItem(LOCAL_STORAGE_KEYS.START_DATE) || 'N/A';\n        if (isMounted) {\n          setBatchName(savedBatchName);\n          setStartDate(savedStartDateStr);\n        }\n\n        // Validate required parameters\n        const missingParams = [];\n        if (savedTempStr === null) missingParams.push('Temperature');\n        if (savedPhStr === null) missingParams.push('pH');\n        if (savedSubstrateJson === null) missingParams.push('Substrate');\n        if (savedDaysStr === null) missingParams.push('Duration');\n        if (missingParams.length > 0) {\n          throw new Error(`Missing required simulation parameters: ${missingParams.join(', ')}. Please set them in Condition Settings.`);\n        }\n\n        // Parse and validate numerical parameters\n        const temp = parseFloat(savedTempStr);\n        const phValue = parseFloat(savedPhStr);\n        const days = parseInt(savedDaysStr, 10);\n        let initialWeight = 0;\n        try {\n          const substrateData = JSON.parse(savedSubstrateJson);\n          if (typeof substrateData !== 'object' || substrateData === null) throw new Error(\"Invalid substrate JSON format.\");\n          initialWeight = Object.values(substrateData).reduce((sum, val) => sum + (Number(val) || 0), 0);\n          if (initialWeight <= 0) console.warn(\"Initial substrate weight calculated is zero or negative.\");\n        } catch (parseError) {\n          throw new Error(`Invalid substrate data: ${parseError.message}`);\n        }\n        if (isNaN(temp) || isNaN(phValue) || isNaN(initialWeight) || isNaN(days) || days < 0) {\n          throw new Error(\"Invalid numerical parameters.\");\n        }\n        const simulationDuration = days;\n\n        // Calculate End Date\n        const calculatedEndDate = calculateAndFormatEndDate(savedStartDateStr, simulationDuration);\n        if (isMounted) {\n          setEndDate(calculatedEndDate);\n        }\n\n        // Prepare inputs\n        const simulationInputs = {\n          'External Temp': temp,\n          'pH': phValue,\n          'Initial Dry Substrate Weight': initialWeight,\n          'timeLength': simulationDuration\n        };\n\n        // Run Simulations\n        // console.log(\"Running Mushroom Simulation...\");\n        const resultsMushroom = runSimulation(simulationInputs, defaultParamsMushroom);\n        // console.log(\"Running Mycelium Simulation...\");\n        const resultsMycelium = runSimulation(simulationInputs, defaultParamsMycelium);\n\n        // Update State\n        if (isMounted) {\n          setSimulationResultsMushroom(resultsMushroom);\n          setSimulationResultsMycelium(resultsMycelium);\n          if (resultsMushroom && resultsMushroom.length > 0) {\n            const lastMushroomResult = resultsMushroom[resultsMushroom.length - 1];\n            if (lastMushroomResult && Number.isFinite(lastMushroomResult.MushroomYield)) {\n              setFinalSimulatedYield(lastMushroomResult.MushroomYield);\n            } else {\n              console.warn(\"Final mushroom yield is not finite.\");\n              setFinalSimulatedYield(null);\n            }\n          } else {\n            console.warn(\"Mushroom simulation had no results.\");\n            setFinalSimulatedYield(null);\n          }\n          // console.log(\"Simulations complete.\");\n        }\n      } catch (err) {\n        console.error(\"Error during simulation setup/run:\", err);\n        if (isMounted) setError(err.message || \"An unexpected error occurred.\");\n      } finally {\n        if (isMounted) setIsLoading(false);\n      }\n    };\n    runSimulationsAsync();\n    return () => {\n      isMounted = false; /* console.log(\"GrowthSimulation unmounted.\"); */\n    };\n  }, []);\n\n  // --- Event Handlers ---\n  const handleBackClick = () => navigate('/condition-setting');\n\n  /**\r\n   * Handles clicks on the chart points. Shows specific images for specific days.\r\n   * @param {object} event - The click event object from Chart.js.\r\n   */\n  const handleChartClick = event => {\n    const chart = chartRef.current;\n    if (!chart) {\n      console.warn(\"Chart instance not found.\");\n      return;\n    }\n    const elements = getElementAtEvent(chart, event);\n    if (elements.length > 0) {\n      const {\n        datasetIndex,\n        index\n      } = elements[0];\n      const dataset = chart.config.data.datasets[datasetIndex];\n      const dataPoint = dataset === null || dataset === void 0 ? void 0 : dataset.data[index];\n\n      // Proceed only if on the yield tab and a valid data point was clicked\n      if (dataPoint && activeChartTab === 'yield') {\n        const clickedTime = dataPoint.x;\n        const timeTolerance = 0.11; // Tolerance for matching time (since step is 0.2)\n\n        // Find the time of the last data point in the dataset\n        const lastDataPointIndex = dataset.data.length - 1;\n        const lastDayTime = lastDataPointIndex >= 0 ? dataset.data[lastDataPointIndex].x : -1; // Get x value of last point\n\n        // Check against target times with tolerance\n        if (Math.abs(clickedTime - 0) < timeTolerance) {\n          console.log(\"Clicked Day 0. Displaying Asset 1.\");\n          setAnimationImageSrc(asset1Src);\n        } else if (Math.abs(clickedTime - 10) < timeTolerance) {\n          console.log(\"Clicked near Day 10. Displaying Day 1 image.\");\n          setAnimationImageSrc(day1Src); // Show day1.png\n        } else if (lastDayTime >= 0 && Math.abs(clickedTime - lastDayTime) < timeTolerance) {\n          console.log(\"Clicked near Last Day. Displaying Day 5 image.\");\n          setAnimationImageSrc(day5Src); // Show day5.png\n        } else {\n          // Clicked on a different point on the yield chart\n          console.log(`Clicked time ${clickedTime.toFixed(2)}. Clearing image.`);\n          setAnimationImageSrc(null);\n        }\n      } else {\n        // Clicked on a different tab or invalid point\n        // console.log(\"Clicked non-yield chart or invalid point. Clearing image.\");\n        setAnimationImageSrc(null);\n      }\n    } else {\n      // Clicked on chart background (optional: clear image)\n      // setAnimationImageSrc(null);\n    }\n  };\n\n  // --- Chart Configuration Function ---\n  const getChartConfig = () => {\n    const currentResultsSource = activeChartTab === 'mycelium' ? simulationResultsMycelium : simulationResultsMushroom;\n    const yieldColor = '#2E7D32';\n    const tempColor = '#C62828';\n    const myceliumColor = '#1976D2';\n    const textColor = '#333';\n    const gridColor = 'rgba(0, 0, 0, 0.08)';\n    const font = {\n      family: 'Lexend',\n      weight: '300'\n    };\n    const options = {\n      responsive: true,\n      maintainAspectRatio: false,\n      plugins: {\n        legend: {\n          display: true,\n          labels: {\n            color: textColor,\n            font: font\n          }\n        },\n        tooltip: {\n          enabled: true,\n          bodyFont: font,\n          titleFont: font\n        },\n        title: {\n          display: true,\n          text: '',\n          color: textColor,\n          font: {\n            ...font,\n            size: 16,\n            weight: '500'\n          }\n        }\n      },\n      scales: {\n        x: {\n          type: 'linear',\n          title: {\n            display: true,\n            text: 'Time (Days)',\n            color: textColor,\n            font: font\n          },\n          ticks: {\n            color: textColor,\n            font: font,\n            precision: 0\n          },\n          // <<< Whole numbers\n          grid: {\n            color: gridColor\n          },\n          min: 0,\n          max: undefined\n        },\n        yYield: {\n          type: 'linear',\n          position: 'left',\n          title: {\n            display: true,\n            text: 'Mushroom Yield (g)',\n            color: yieldColor,\n            font: font\n          },\n          ticks: {\n            color: yieldColor,\n            font: font\n          },\n          grid: {\n            drawOnChartArea: true,\n            color: gridColor\n          },\n          beginAtZero: true,\n          display: false\n        },\n        yTemp: {\n          type: 'linear',\n          position: 'left',\n          title: {\n            display: true,\n            text: 'Temperature (°C)',\n            color: tempColor,\n            font: font\n          },\n          ticks: {\n            color: tempColor,\n            font: font\n          },\n          grid: {\n            drawOnChartArea: false\n          },\n          display: false\n        },\n        yMycelium: {\n          type: 'linear',\n          position: 'left',\n          title: {\n            display: true,\n            text: 'Mycelium Density',\n            color: myceliumColor,\n            font: font\n          },\n          ticks: {\n            color: myceliumColor,\n            font: font,\n            callback: value => value.toFixed(2)\n          },\n          grid: {\n            drawOnChartArea: true,\n            color: gridColor\n          },\n          beginAtZero: true,\n          suggestedMax: 1,\n          display: false\n        }\n      },\n      interaction: {\n        mode: 'nearest',\n        axis: 'x',\n        intersect: false\n      }\n    };\n    options.scales.yYield.display = false;\n    options.scales.yTemp.display = false;\n    options.scales.yMycelium.display = false;\n    if (!currentResultsSource || currentResultsSource.length === 0) {\n      return {\n        data: {\n          datasets: []\n        },\n        options: options\n      };\n    }\n    let datasets = [];\n    let chartData = [...currentResultsSource];\n    let dataSourceName = '';\n    switch (activeChartTab) {\n      case 'yield':\n        dataSourceName = 'Mushroom Sim';\n        options.plugins.title.text = `Yield Over Time (${dataSourceName})`;\n        options.scales.yYield.display = true;\n        datasets = [{\n          label: 'Mushroom Yield (g)',\n          data: chartData.map(p => ({\n            x: p.time,\n            y: Number.isFinite(p.MushroomYield) ? p.MushroomYield : null\n          })),\n          borderColor: yieldColor,\n          backgroundColor: 'rgba(46, 125, 50, 0.1)',\n          yAxisID: 'yYield'\n        }];\n        options.scales.x.max = chartData.length > 0 ? chartData[chartData.length - 1].time : undefined;\n        break;\n      case 'temp':\n        dataSourceName = 'Mushroom Sim';\n        options.plugins.title.text = `Temperature Over Time (${dataSourceName})`;\n        options.scales.yTemp.display = true;\n        datasets = [{\n          label: 'Temperature (°C)',\n          data: chartData.map(p => ({\n            x: p.time,\n            y: Number.isFinite(p.Temp) ? p.Temp : null\n          })),\n          borderColor: tempColor,\n          backgroundColor: 'rgba(198, 40, 40, 0.1)',\n          yAxisID: 'yTemp'\n        }];\n        options.scales.x.max = chartData.length > 0 ? chartData[chartData.length - 1].time : undefined;\n        break;\n      case 'mycelium':\n        dataSourceName = 'Mycelium Sim';\n        options.plugins.title.text = `Mycelium Growth (${dataSourceName})`;\n        options.scales.yMycelium.display = true;\n        let cutoffIndex = chartData.findIndex(p => p.Mycelium >= 0.9);\n        let finalTime = chartData.length > 0 ? chartData[chartData.length - 1].time : 0;\n        let cutoffReason = \"Simulation End\";\n        if (cutoffIndex !== -1) {\n          chartData = chartData.slice(0, cutoffIndex + 1);\n          finalTime = chartData[chartData.length - 1].time;\n          cutoffReason = \"Mycelium >= 0.9\";\n        } else {\n          const day30Index = chartData.findIndex(p => p.time >= 30);\n          if (day30Index !== -1) {\n            chartData = chartData.slice(0, day30Index + 1);\n            finalTime = chartData[chartData.length - 1].time;\n            cutoffReason = \"Day 30 Limit\";\n          }\n        }\n        options.scales.x.max = finalTime;\n        if (cutoffReason !== \"Simulation End\") {\n          options.plugins.title.text += ` (Stopped at ${cutoffReason})`;\n        }\n        datasets = [{\n          label: 'Mycelium Density',\n          data: chartData.map(p => ({\n            x: p.time,\n            y: Number.isFinite(p.Mycelium) ? p.Mycelium : null\n          })),\n          borderColor: myceliumColor,\n          backgroundColor: 'rgba(25, 118, 210, 0.1)',\n          yAxisID: 'yMycelium'\n        }];\n        break;\n      default:\n        datasets = [];\n    }\n    const finalDatasets = datasets && datasets.length > 0 ? datasets.map(ds => {\n      var _ds$data, _ds$data2;\n      return {\n        ...ds,\n        tension: 0.1,\n        pointRadius: ((_ds$data = ds.data) === null || _ds$data === void 0 ? void 0 : _ds$data.length) > 150 ? 0.5 : ((_ds$data2 = ds.data) === null || _ds$data2 === void 0 ? void 0 : _ds$data2.length) > 50 ? 1 : 2,\n        pointHoverRadius: 4,\n        borderWidth: 1.5,\n        spanGaps: true\n      };\n    }).filter(ds => ds.data && ds.data.length > 0) : [];\n    if (finalDatasets.length === 0 && currentResultsSource && currentResultsSource.length > 0) {\n      console.log(`No valid data points to display for tab: ${activeChartTab}`);\n    }\n    return {\n      data: {\n        datasets: finalDatasets\n      },\n      options: options\n    };\n  };\n  // --- End getChartConfig function ---\n\n  // --- Render Logic ---\n  const chartConfig = getChartConfig();\n  const simulationDataReady = simulationResultsMushroom || simulationResultsMycelium;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"growth-simulation\",\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"simulation-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"logobox\",\n        children: [\" \", /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleBackClick,\n          className: \"back-button\",\n          title: \"Back to Settings\",\n          children: \"\\u2190\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 457,\n          columnNumber: 43\n        }, this), \" \", /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"logo\",\n          children: [\" \", /*#__PURE__*/_jsxDEV(\"img\", {\n            src: logoSrc,\n            alt: \"City Sprouts Logo\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 457,\n            columnNumber: 165\n          }, this), \" \"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 457,\n          columnNumber: 142\n        }, this), \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 457,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"batch-info\",\n        children: [\" \", /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"batch-name\",\n          children: [\"Batch: \", batchName]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 458,\n          columnNumber: 46\n        }, this), \" \", /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"start-date\",\n          children: [\"Start: \", formatDate_DDMMYYYY(startDate)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 458,\n          columnNumber: 101\n        }, this), \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 458,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 456,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n      className: \"main-content-grid\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"animation-area content-card\",\n        children: animationImageSrc ? /*#__PURE__*/_jsxDEV(\"img\", {\n          src: animationImageSrc,\n          alt: \"Simulation state representation\",\n          style: {\n            maxWidth: '100%',\n            maxHeight: '100%',\n            objectFit: 'contain',\n            display: 'block',\n            margin: 'auto'\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 465,\n          columnNumber: 44\n        }, this) : /*#__PURE__*/_jsxDEV(\"span\", {\n          children: \"Animation / Visualization Area\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 465,\n          columnNumber: 224\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 464,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chart-results-column\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"tabs-container\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => {\n              setActiveChartTab('yield');\n              setAnimationImageSrc(null);\n            },\n            className: `tab-button ${activeChartTab === 'yield' ? 'tab-button-active' : ''}`,\n            children: \" Yield \"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 472,\n            columnNumber: 26\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => {\n              setActiveChartTab('temp');\n              setAnimationImageSrc(null);\n            },\n            className: `tab-button ${activeChartTab === 'temp' ? 'tab-button-active' : ''}`,\n            children: \" Temperature \"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 473,\n            columnNumber: 26\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => {\n              setActiveChartTab('mycelium');\n              setAnimationImageSrc(null);\n            },\n            className: `tab-button ${activeChartTab === 'mycelium' ? 'tab-button-active' : ''}`,\n            children: \" Mycelium \"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 474,\n            columnNumber: 26\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 471,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"chart-area content-card\",\n          children: [isLoading && /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"loading-message\",\n            children: \"Running simulations...\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 479,\n            columnNumber: 39\n          }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"error-message\",\n            children: [\"Error: \", error]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 480,\n            columnNumber: 35\n          }, this), !isLoading && !error && simulationDataReady && (chartConfig.data.datasets.length > 0 ? /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"chart-container\",\n            children: [\" \", /*#__PURE__*/_jsxDEV(Line, {\n              ref: chartRef,\n              options: chartConfig.options,\n              data: chartConfig.data,\n              onClick: handleChartClick\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 481,\n              columnNumber: 150\n            }, this), \" \"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 481,\n            columnNumber: 116\n          }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"no-data-message\",\n            children: [\"No simulation data to display for the '\", activeChartTab, \"' chart.\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 481,\n            columnNumber: 268\n          }, this)), !isLoading && !error && !simulationDataReady && /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"no-data-message\",\n            children: \"Simulation results not available.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 482,\n            columnNumber: 74\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 478,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"results-section content-card\",\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            className: \"results-heading\",\n            children: [\" Simulation Results \", /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"info-icon\",\n              title: \"Projected yield is based on the Mushroom phase simulation. End date calculated from start date and duration.\",\n              children: \"i\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 487,\n              columnNumber: 77\n            }, this), \" \"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 487,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"results-items\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"result-item\",\n              children: [\" \", /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"result-label\",\n                children: \"Projected Yield:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 489,\n                columnNumber: 59\n              }, this), \" \", /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"result-value\",\n                children: [\" \", isLoading ? '...' : error ? 'Error' : finalSimulatedYield !== null && Number.isFinite(finalSimulatedYield) ? `${finalSimulatedYield.toFixed(1)}g` : 'N/A', \" \"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 489,\n                columnNumber: 114\n              }, this), \" \"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 489,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"result-item\",\n              children: [\" \", /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"result-label\",\n                children: \"Projected End Date:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 490,\n                columnNumber: 59\n              }, this), \" \", /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"result-value\",\n                children: [\" \", isLoading ? '...' : error ? 'Error' : endDate, \" \"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 490,\n                columnNumber: 117\n              }, this), \" \"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 490,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 488,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 486,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 469,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 462,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 454,\n    columnNumber: 9\n  }, this);\n};\n_s(GrowthSimulation, \"jbcigRMmDW+PUHcTlYTkCDroljQ=\", false, function () {\n  return [useNavigate];\n});\n_c = GrowthSimulation;\nexport default GrowthSimulation;\nvar _c;\n$RefreshReg$(_c, \"GrowthSimulation\");","map":{"version":3,"names":["React","useState","useEffect","useRef","useNavigate","Line","Chart","ChartJS","LineElement","PointElement","Tooltip","Legend","CategoryScale","LinearScale","Title","Interaction","getElementAtEvent","odeRK4","logoSrc","asset1Src","day1Src","day5Src","jsxDEV","_jsxDEV","register","defaultParamsMushroom","timeStart","timeLength","timeStep","defaultParamsMycelium","FIXED_CN_RATIO","linearInterpolate","data","x","length","i","x0","y0","x1","y1","divisor","t","derivatives","dydt","y","currentParams","currentCO2","currentComplexC","currentMushroomYield","currentMycelium","currentN","currentSimpleC","currentSpace","currentTemp","initialDrySubstrateWeight","cnRatio","cnRatioPlusOne","InitC","AvailableN","AvailableC","VolumeNormalisation","Math","sqrt","Effect_of_CO2_on_Mush_Growth","Effect_of_CO2_on_Myc_Growth","Effect_of_pH_on_Mush_Growth","Effect_of_pH_on_Myc_Growth","Effect_of_Temp_on_Mush_Growth","Effect_of_Temp_on_Myc_Growth","isMushPhase","TempEff_","TempEffect","pHEff_","pHEffect","CO2Eff_","CO2Effect","NEffect","CEffect","max","safeTempEffect","safePhEffect","safeNEffect","safeCEffect","safeCO2Effect","RawGrowthRate","GrowthOpp","GrowthRate","NormGrowthRate","flow_Breakdown","flow_CCons","flow_CO2Prod","flow_CO2Vent","flow_Colonisation","flow_MushroomGrowth","flow_NCons","flow_TempProd","flow_TempVent","epsilon","getInitialState","p","initialMyceliumValue","Number","complexSimpleRatio","isNaN","console","error","Init_N","Init_C","initialSpace","runSimulation","inputParams","defaultParamSet","_currentParams$Initia","_currentParams$Initia2","finalInitialWeight","finalCNRatio","finalComplexSimpleRatio","finalExternalCO2","finalExternalTemp","initialStateParams","t0","dt","positiveDt","numSteps","floor","derivativeFuncForSolver","e","fill","integrator","results","time","state","simType","warn","step","some","val","isFinite","toFixed","push","solverError","map","CO2","ComplexC","MushroomYield","Mycelium","N","SimpleC","Space","Temp","formatDate_DDMMYYYY","dateString","test","year","month","day","split","calculateAndFormatEndDate","startDateStr","durationDays","startDateObj","Date","endDateObj","getTime","setDate","getDate","endYear","getFullYear","endMonth","String","getMonth","padStart","endDay","endDateStrYYYYMMDD","dateError","GrowthSimulation","_s","navigate","chartRef","simulationResultsMushroom","setSimulationResultsMushroom","simulationResultsMycelium","setSimulationResultsMycelium","isLoading","setIsLoading","setError","batchName","setBatchName","startDate","setStartDate","endDate","setEndDate","finalSimulatedYield","setFinalSimulatedYield","activeChartTab","setActiveChartTab","animationImageSrc","setAnimationImageSrc","LOCAL_STORAGE_KEYS","TEMPERATURE","PH","SUBSTRATE","SIMULATION_DAYS","BATCH_NAME","START_DATE","isMounted","runSimulationsAsync","Promise","resolve","setTimeout","savedTempStr","savedPhStr","savedSubstrateJson","savedDaysStr","savedBatchName","savedStartDateStr","localStorage","getItem","missingParams","Error","join","temp","parseFloat","phValue","days","parseInt","initialWeight","substrateData","JSON","parse","Object","values","reduce","sum","parseError","message","simulationDuration","calculatedEndDate","simulationInputs","resultsMushroom","resultsMycelium","lastMushroomResult","err","handleBackClick","handleChartClick","event","chart","current","elements","datasetIndex","index","dataset","config","datasets","dataPoint","clickedTime","timeTolerance","lastDataPointIndex","lastDayTime","abs","log","getChartConfig","currentResultsSource","yieldColor","tempColor","myceliumColor","textColor","gridColor","font","family","weight","options","responsive","maintainAspectRatio","plugins","legend","display","labels","color","tooltip","enabled","bodyFont","titleFont","title","text","size","scales","type","ticks","precision","grid","min","undefined","yYield","position","drawOnChartArea","beginAtZero","yTemp","yMycelium","callback","value","suggestedMax","interaction","mode","axis","intersect","chartData","dataSourceName","label","borderColor","backgroundColor","yAxisID","cutoffIndex","findIndex","finalTime","cutoffReason","slice","day30Index","finalDatasets","ds","_ds$data","_ds$data2","tension","pointRadius","pointHoverRadius","borderWidth","spanGaps","filter","chartConfig","simulationDataReady","className","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","src","alt","style","maxWidth","maxHeight","objectFit","margin","ref","_c","$RefreshReg$"],"sources":["C:/Users/celst/sds/src/components/GrowthSimulation.jsx"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { Line } from 'react-chartjs-2';\r\nimport {\r\n    Chart as ChartJS,\r\n    LineElement,\r\n    PointElement,\r\n    Tooltip,\r\n    Legend,\r\n    CategoryScale,\r\n    LinearScale,\r\n    Title,\r\n    Interaction\r\n} from 'chart.js';\r\nimport { getElementAtEvent } from 'react-chartjs-2';\r\nimport odeRK4 from 'ode-rk4';\r\n\r\n// --- CSS and Asset Imports ---\r\n// Adjust these paths according to your project structure\r\nimport '../styles/GrowthSimulation.css';\r\nimport logoSrc from '../assets/images/cslogo.png';\r\nimport asset1Src from '../assets/images/my100.jpg'; // Image for Day 0 click\r\nimport day1Src from '../assets/images/Day1.jpg';   // <<< IMPORT Image for Day 10 click\r\nimport day5Src from '../assets/images/Day5.jpg';   // <<< IMPORT Image for Last Day click\r\n\r\n// --- Simulation Logic & ChartJS Registration ---\r\nChartJS.register(LineElement, PointElement, Tooltip, Legend, CategoryScale, LinearScale, Title);\r\n\r\n// *** Default Parameters & Simulation Functions ***\r\n// (Assume defaultParamsMushroom, defaultParamsMycelium, FIXED_CN_RATIO,\r\n// linearInterpolate, derivatives, getInitialState, runSimulation are unchanged from previous version)\r\n// *** Default Parameters for MUSHROOM Growth ***\r\nconst defaultParamsMushroom = {\r\n    timeStart: 0, timeLength: 100, timeStep: 0.2,\r\n    'C BD Rate': 1.11, 'C Coeff': 0.7, 'C Cons. Rate': 76.39, 'CO2 Coeff': 0.8,\r\n    'CO2 Production Rate': 410000, 'CO2 Removal Rate': 12.6, 'External CO2': 428.23,\r\n    'External Temp': 24, 'Growth Coeff': 5.1,\r\n    'Initial Complex:Simple Ratio': 0.8054,\r\n    'Initial Dry Substrate Weight': 410.2, // Default fallback weight\r\n    'IsMush': 1, // Mushroom phase\r\n    'Mushroom Multiplier': 5.17,\r\n    'N Coeff': 68.4, 'N Rate': 13.03,\r\n    'pH': 6.91, // Default fallback pH\r\n    'pH Coeff': 1.4, 'Temp Coeff': 1.3, 'Temp Production Rate': 405,\r\n    'Temp Transfer Rate': 1.5,\r\n    'Effect of CO2 on Mush Growth Data': [[500, 0.9], [800, 1], [1000, 0.8], [1200, 0.25], [1400, 0]],\r\n    'Effect of CO2 on Myc Growth Data': [[15000, 1], [20000, 0.9], [25000, 0.25], [30000, 0]],\r\n    'Effect of pH on Mush Growth Data': [[5.5, 0], [6, 0.25], [6.7, 1], [7, 0.6], [7.5, 0]],\r\n    'Effect of pH on Myc Growth Data': [[5.8, 0], [6, 0.25], [6.7, 1], [7, 0.6], [7.5, 0]],\r\n    'Effect of Temp on Mush Growth Data': [[10, 0], [15, 5.37], [20, 6.36], [25, 8.63], [30, 6.37], [40, 0]],\r\n    'Effect of Temp on Myc Growth Data': [[10, 0], [15, 5.37], [20, 6.36], [25, 8.63], [30, 6.37], [35, 5.36], [45, 0]],\r\n    'Initial Mycelium': 0.9, // Assume high colonization before fruiting\r\n};\r\n\r\n// *** Default Parameters for MYCELIUM Growth ***\r\nconst defaultParamsMycelium = {\r\n    timeStart: 0, timeLength: 100, timeStep: 0.2,\r\n    'C BD Rate': 1.11, 'C Coeff': 0.7, 'C Cons. Rate': 76.39, 'CO2 Coeff': 0.8,\r\n    'CO2 Production Rate': 410000, 'CO2 Removal Rate': 1,\r\n    'External CO2': 428.23, 'External Temp': 28,\r\n    'Growth Coeff': 5.4,\r\n    'Initial Complex:Simple Ratio': 0.867,\r\n    'Initial Dry Substrate Weight': 200, // Default fallback weight\r\n    'IsMush': 0, // Mycelium phase\r\n    'Mushroom Multiplier': 26,\r\n    'N Coeff': 68.4, 'N Rate': 1.53,\r\n    'pH': 6.91, // Default fallback pH\r\n    'pH Coeff': 1.4, 'Temp Coeff': 1.7,\r\n    'Temp Production Rate': 255,\r\n    'Temp Transfer Rate': 1.5,\r\n    'Effect of CO2 on Mush Growth Data': [[500, 0.9], [800, 1], [1000, 0.8], [1200, 0.25], [1400, 0]],\r\n    'Effect of CO2 on Myc Growth Data': [[15000, 1], [20000, 0.9], [25000, 0.25], [30000, 0]],\r\n    'Effect of pH on Mush Growth Data': [[5.5, 0], [6, 0.25], [6.7, 1], [7, 0.6], [7.5, 0]],\r\n    'Effect of pH on Myc Growth Data': [[5.8, 0], [6, 0.25], [6.7, 1], [7, 0.6], [7.5, 0]],\r\n    'Effect of Temp on Mush Growth Data': [[10, 0], [15, 5.37], [20, 6.36], [25, 8.63], [30, 6.37], [40, 0]],\r\n    'Effect of Temp on Myc Growth Data': [[10, 0], [15, 5.37], [20, 6.36], [25, 8.63], [30, 6.37], [35, 5.36], [45, 0]],\r\n    'Initial Mycelium': 0.004, // From Model(1).json\r\n};\r\n\r\n// FIXED C:N Ratio as previously requested\r\nconst FIXED_CN_RATIO = 0.96;\r\n\r\n// --- Simulation Functions ---\r\nfunction linearInterpolate(data, x) {\r\n    if (!data || data.length === 0) return 0;\r\n    if (x <= data[0][0]) return data[0][1];\r\n    if (x >= data[data.length - 1][0]) return data[data.length - 1][1];\r\n    let i = 0;\r\n    while (i < data.length - 1 && x > data[i + 1][0]) i++;\r\n    const x0 = data[i][0], y0 = data[i][1];\r\n    const x1 = data[i + 1][0], y1 = data[i + 1][1];\r\n    const divisor = (x1 - x0);\r\n    if (divisor === 0) return y0;\r\n    const t = (x - x0) / divisor;\r\n    return y0 + t * (y1 - y0);\r\n}\r\n\r\nfunction derivatives(dydt, y, t, currentParams) {\r\n    const [ currentCO2, currentComplexC, currentMushroomYield, currentMycelium, currentN, currentSimpleC, currentSpace, currentTemp ] = y;\r\n    const initialDrySubstrateWeight = currentParams['Initial Dry Substrate Weight'] || 1;\r\n    const cnRatio = currentParams['Initial C:N Ratio'];\r\n    const cnRatioPlusOne = cnRatio + 1;\r\n    const InitC = initialDrySubstrateWeight - (initialDrySubstrateWeight / cnRatioPlusOne);\r\n    const AvailableN = initialDrySubstrateWeight > 0 ? currentN / initialDrySubstrateWeight : 0;\r\n    const AvailableC = initialDrySubstrateWeight > 0 ? currentSimpleC / initialDrySubstrateWeight : 0;\r\n    const VolumeNormalisation = initialDrySubstrateWeight > 0 ? Math.sqrt(100 / initialDrySubstrateWeight) : Math.sqrt(100);\r\n    const Effect_of_CO2_on_Mush_Growth = linearInterpolate(currentParams['Effect of CO2 on Mush Growth Data'], currentCO2);\r\n    const Effect_of_CO2_on_Myc_Growth = linearInterpolate(currentParams['Effect of CO2 on Myc Growth Data'], currentCO2);\r\n    const Effect_of_pH_on_Mush_Growth = linearInterpolate(currentParams['Effect of pH on Mush Growth Data'], currentParams['pH']);\r\n    const Effect_of_pH_on_Myc_Growth = linearInterpolate(currentParams['Effect of pH on Myc Growth Data'], currentParams['pH']);\r\n    const Effect_of_Temp_on_Mush_Growth = linearInterpolate(currentParams['Effect of Temp on Mush Growth Data'], currentTemp);\r\n    const Effect_of_Temp_on_Myc_Growth = linearInterpolate(currentParams['Effect of Temp on Myc Growth Data'], currentTemp);\r\n    const isMushPhase = currentParams['IsMush'] === 1;\r\n    const TempEff_ = isMushPhase ? Effect_of_Temp_on_Mush_Growth : Effect_of_Temp_on_Myc_Growth;\r\n    const TempEffect = (currentParams['Temp Coeff'] * TempEff_) / 10;\r\n    const pHEff_ = isMushPhase ? Effect_of_pH_on_Mush_Growth : Effect_of_pH_on_Myc_Growth;\r\n    const pHEffect = pHEff_ * currentParams['pH Coeff'];\r\n    const CO2Eff_ = isMushPhase ? Effect_of_CO2_on_Mush_Growth : Effect_of_CO2_on_Myc_Growth;\r\n    const CO2Effect = currentParams['CO2 Coeff'] * CO2Eff_;\r\n    const NEffect = currentParams['N Coeff'] * AvailableN;\r\n    const CEffect = Math.sqrt(Math.max(0, currentParams['C Coeff'] * AvailableC));\r\n    const safeTempEffect = Math.max(0, TempEffect);\r\n    const safePhEffect = Math.max(0, pHEffect);\r\n    const safeNEffect = Math.max(0, NEffect);\r\n    const safeCEffect = Math.max(0, CEffect);\r\n    const safeCO2Effect = Math.max(0, CO2Effect);\r\n    const RawGrowthRate = safeTempEffect * safePhEffect * safeNEffect * safeCEffect * safeCO2Effect;\r\n    const GrowthOpp = currentSpace * currentMycelium;\r\n    let GrowthRate = isMushPhase ? (RawGrowthRate * currentParams['Growth Coeff']) : (RawGrowthRate * GrowthOpp * currentParams['Growth Coeff']);\r\n    GrowthRate = Math.max(0, GrowthRate);\r\n    let NormGrowthRate = isMushPhase ? (GrowthRate / 100) : GrowthRate;\r\n    NormGrowthRate = Math.max(0, NormGrowthRate);\r\n    const flow_Breakdown = Math.max(0, currentMycelium * currentParams['C BD Rate'] * currentComplexC * RawGrowthRate * VolumeNormalisation);\r\n    const flow_CCons = Math.max(0, NormGrowthRate * currentParams['C Cons. Rate']);\r\n    const flow_CO2Prod = Math.max(0, NormGrowthRate * currentParams['CO2 Production Rate']);\r\n    const flow_CO2Vent = Math.max(0, currentParams['CO2 Removal Rate'] * (currentCO2 - currentParams['External CO2']) * VolumeNormalisation);\r\n    const flow_Colonisation = isMushPhase ? 0 : GrowthRate;\r\n    const flow_MushroomGrowth = isMushPhase ? Math.max(0, GrowthRate * currentParams['Mushroom Multiplier']) : 0;\r\n    const flow_NCons = Math.max(0, NormGrowthRate * currentParams['N Rate']);\r\n    const flow_TempProd = Math.max(0, NormGrowthRate * currentParams['Temp Production Rate']);\r\n    const flow_TempVent = Math.max(0, (currentTemp - currentParams['External Temp']) * currentParams['Temp Transfer Rate'] * VolumeNormalisation);\r\n    dydt[0] = flow_CO2Prod - flow_CO2Vent;\r\n    dydt[1] = -flow_Breakdown;\r\n    dydt[2] = flow_MushroomGrowth;\r\n    dydt[3] = flow_Colonisation;\r\n    dydt[4] = -flow_NCons;\r\n    dydt[5] = flow_Breakdown - flow_CCons;\r\n    dydt[6] = -flow_Colonisation;\r\n    dydt[7] = flow_TempProd - flow_TempVent;\r\n    const epsilon = 1e-9;\r\n    if (y[0] <= epsilon && dydt[0] < 0) dydt[0] = 0;\r\n    if (y[1] <= epsilon && dydt[1] < 0) dydt[1] = 0;\r\n    if (y[2] <= epsilon && dydt[2] < 0) dydt[2] = 0;\r\n    if (y[3] <= epsilon && dydt[3] < 0) dydt[3] = 0;\r\n    if (y[4] <= epsilon && dydt[4] < 0) dydt[4] = 0;\r\n    if (y[5] <= epsilon && dydt[5] < 0) dydt[5] = 0;\r\n    if (y[6] <= epsilon && dydt[6] < 0) dydt[6] = 0;\r\n}\r\n\r\nfunction getInitialState(p, initialMyceliumValue) {\r\n    const initialDrySubstrateWeight = Number(p['Initial Dry Substrate Weight']);\r\n    const cnRatio = Number(p['Initial C:N Ratio']);\r\n    const complexSimpleRatio = Number(p['Initial Complex:Simple Ratio']);\r\n    if (isNaN(initialDrySubstrateWeight) || initialDrySubstrateWeight <= 0 || isNaN(cnRatio) || cnRatio <= 0 || isNaN(complexSimpleRatio) || complexSimpleRatio < 0 || complexSimpleRatio > 1) {\r\n        console.error(\"Invalid parameters for getInitialState:\", p);\r\n        return [400, 200, 0, 0.01, 10, 50, 0.99, 25];\r\n    }\r\n    const cnRatioPlusOne = cnRatio + 1;\r\n    const Init_N = initialDrySubstrateWeight / cnRatioPlusOne;\r\n    const Init_C = initialDrySubstrateWeight - Init_N;\r\n    const initialSpace = Math.max(0, 1 - initialMyceliumValue);\r\n    return [ Number(p['External CO2']), Init_C * complexSimpleRatio, 0, initialMyceliumValue, Init_N, Init_C * (1 - complexSimpleRatio), initialSpace, Number(p['External Temp']) ];\r\n}\r\n\r\nfunction runSimulation(inputParams, defaultParamSet) {\r\n    if (!defaultParamSet) { console.error(\"runSimulation called without defaultParamSet!\"); return []; }\r\n    const currentParams = { ...defaultParamSet, ...inputParams, 'Initial C:N Ratio': FIXED_CN_RATIO, };\r\n    const finalInitialWeight = Number(currentParams['Initial Dry Substrate Weight']);\r\n    const finalCNRatio = Number(currentParams['Initial C:N Ratio']);\r\n    const finalComplexSimpleRatio = Number(currentParams['Initial Complex:Simple Ratio']);\r\n    const finalExternalCO2 = Number(currentParams['External CO2']);\r\n    const finalExternalTemp = Number(currentParams['External Temp']);\r\n    const initialMyceliumValue = currentParams['IsMush'] === 0 ? (currentParams['Initial Mycelium'] ?? defaultParamsMycelium['Initial Mycelium']) : (currentParams['Initial Mycelium'] ?? defaultParamsMushroom['Initial Mycelium']);\r\n    const initialStateParams = { 'Initial Dry Substrate Weight': finalInitialWeight, 'Initial C:N Ratio': finalCNRatio, 'Initial Complex:Simple Ratio': finalComplexSimpleRatio, 'External CO2': finalExternalCO2, 'External Temp': finalExternalTemp, };\r\n    const y0 = getInitialState(initialStateParams, initialMyceliumValue);\r\n    const t0 = currentParams.timeStart;\r\n    const dt = currentParams.timeStep;\r\n    const timeLength = Math.max(0, Number(currentParams.timeLength));\r\n    const positiveDt = Math.max(dt, 1e-6);\r\n    const numSteps = timeLength > 0 && positiveDt > 0 ? Math.floor(timeLength / positiveDt) : 0;\r\n    const derivativeFuncForSolver = (dydt, y, t) => { try { derivatives(dydt, y, t, currentParams); } catch (e) { console.error(\"Error inside derivatives function:\", e); dydt.fill(0); } };\r\n    const integrator = odeRK4(y0, derivativeFuncForSolver, t0, positiveDt);\r\n    const results = [{ time: integrator.t, state: [...integrator.y] }];\r\n    const simType = currentParams['IsMush'] === 0 ? 'Mycelium' : 'Mushroom';\r\n    // console.log(`Starting ${simType} simulation: Time=${timeLength} days, Steps=${numSteps}, dt=${positiveDt}`);\r\n    if (numSteps <= 0) { console.warn(`${simType} Sim: timeLength or timeStep results in 0 steps. Simulation not run.`); return []; }\r\n    for (let i = 0; i < numSteps; i++) {\r\n        try {\r\n            integrator.step();\r\n            if (integrator.y.some(val => !Number.isFinite(val))) { console.error(`${simType} Sim: Non-finite value detected at t=${integrator.t.toFixed(2)}. State:`, integrator.y); /* break; */ }\r\n            results.push({ time: integrator.t, state: [...integrator.y] });\r\n        } catch (solverError) { console.error(`${simType} Sim: RK4 solver error at t=${integrator.t.toFixed(2)}:`, solverError); break; }\r\n    }\r\n    // console.log(`${simType} simulation finished after ${results.length - 1} steps.`);\r\n    return results.map(p => ({ time: p.time, CO2: p.state[0], ComplexC: p.state[1], MushroomYield: p.state[2], Mycelium: p.state[3], N: p.state[4], SimpleC: p.state[5], Space: p.state[6], Temp: p.state[7] }));\r\n}\r\n// --- (End of Simulation Functions) ---\r\n\r\n\r\n// --- Helper Functions ---\r\nfunction formatDate_DDMMYYYY(dateString) {\r\n    if (!dateString || dateString === 'N/A' || !/^\\d{4}-\\d{2}-\\d{2}$/.test(dateString)) { return 'N/A'; }\r\n    try { const [year, month, day] = dateString.split('-'); return `${day}-${month}-${year}`; }\r\n    catch (e) { console.error(\"Error formatting date:\", e); return 'N/A'; }\r\n}\r\n\r\nfunction calculateAndFormatEndDate(startDateStr, durationDays) {\r\n    if (!startDateStr || startDateStr === 'N/A' || !/^\\d{4}-\\d{2}-\\d{2}$/.test(startDateStr) || isNaN(durationDays) || durationDays < 0) { return 'N/A'; }\r\n    try {\r\n        const startDateObj = new Date(startDateStr);\r\n        const endDateObj = new Date(startDateObj.getTime());\r\n        endDateObj.setDate(endDateObj.getDate() + durationDays);\r\n        const endYear = endDateObj.getFullYear();\r\n        const endMonth = String(endDateObj.getMonth() + 1).padStart(2, '0');\r\n        const endDay = String(endDateObj.getDate()).padStart(2, '0');\r\n        const endDateStrYYYYMMDD = `${endYear}-${endMonth}-${endDay}`;\r\n        return formatDate_DDMMYYYY(endDateStrYYYYMMDD);\r\n    } catch (dateError) { console.error(\"Error calculating end date:\", dateError); return 'N/A'; }\r\n}\r\n\r\n\r\n// --- React Component Definition ---\r\nconst GrowthSimulation = () => {\r\n    const navigate = useNavigate();\r\n    const chartRef = useRef(null); // Ref to access the chart instance\r\n\r\n    // --- State Variables ---\r\n    const [simulationResultsMushroom, setSimulationResultsMushroom] = useState(null);\r\n    const [simulationResultsMycelium, setSimulationResultsMycelium] = useState(null);\r\n    const [isLoading, setIsLoading] = useState(true);\r\n    const [error, setError] = useState(null);\r\n    const [batchName, setBatchName] = useState('');\r\n    const [startDate, setStartDate] = useState('');\r\n    const [endDate, setEndDate] = useState('N/A');\r\n    const [finalSimulatedYield, setFinalSimulatedYield] = useState(null);\r\n    const [activeChartTab, setActiveChartTab] = useState('yield');\r\n    const [animationImageSrc, setAnimationImageSrc] = useState(null);\r\n\r\n    // --- Local Storage Keys ---\r\n    const LOCAL_STORAGE_KEYS = {\r\n        TEMPERATURE: 'sim_temperature', PH: 'sim_ph', SUBSTRATE: 'sim_substrate',\r\n        SIMULATION_DAYS: 'sim_duration', BATCH_NAME: 'sim_batch_name', START_DATE: 'sim_start_date',\r\n    };\r\n\r\n    // --- Effect Hook to Run Simulations on Mount ---\r\n    useEffect(() => {\r\n        let isMounted = true;\r\n        setIsLoading(true); setError(null); setFinalSimulatedYield(null);\r\n        setSimulationResultsMushroom(null); setSimulationResultsMycelium(null);\r\n        setEndDate('N/A'); setAnimationImageSrc(null);\r\n\r\n        const runSimulationsAsync = async () => {\r\n            await new Promise(resolve => setTimeout(resolve, 50));\r\n            if (!isMounted) return;\r\n\r\n            let savedTempStr, savedPhStr, savedSubstrateJson, savedDaysStr, savedBatchName, savedStartDateStr;\r\n            try {\r\n                // Load parameters\r\n                savedTempStr = localStorage.getItem(LOCAL_STORAGE_KEYS.TEMPERATURE);\r\n                savedPhStr = localStorage.getItem(LOCAL_STORAGE_KEYS.PH);\r\n                savedSubstrateJson = localStorage.getItem(LOCAL_STORAGE_KEYS.SUBSTRATE);\r\n                savedDaysStr = localStorage.getItem(LOCAL_STORAGE_KEYS.SIMULATION_DAYS);\r\n                savedBatchName = localStorage.getItem(LOCAL_STORAGE_KEYS.BATCH_NAME) || 'N/A';\r\n                savedStartDateStr = localStorage.getItem(LOCAL_STORAGE_KEYS.START_DATE) || 'N/A';\r\n\r\n                if (isMounted) { setBatchName(savedBatchName); setStartDate(savedStartDateStr); }\r\n\r\n                // Validate required parameters\r\n                const missingParams = [];\r\n                if (savedTempStr === null) missingParams.push('Temperature');\r\n                if (savedPhStr === null) missingParams.push('pH');\r\n                if (savedSubstrateJson === null) missingParams.push('Substrate');\r\n                if (savedDaysStr === null) missingParams.push('Duration');\r\n                if (missingParams.length > 0) { throw new Error(`Missing required simulation parameters: ${missingParams.join(', ')}. Please set them in Condition Settings.`); }\r\n\r\n                // Parse and validate numerical parameters\r\n                const temp = parseFloat(savedTempStr);\r\n                const phValue = parseFloat(savedPhStr);\r\n                const days = parseInt(savedDaysStr, 10);\r\n                let initialWeight = 0;\r\n                try {\r\n                    const substrateData = JSON.parse(savedSubstrateJson);\r\n                    if (typeof substrateData !== 'object' || substrateData === null) throw new Error(\"Invalid substrate JSON format.\");\r\n                    initialWeight = Object.values(substrateData).reduce((sum, val) => sum + (Number(val) || 0), 0);\r\n                    if (initialWeight <= 0) console.warn(\"Initial substrate weight calculated is zero or negative.\");\r\n                } catch (parseError) { throw new Error(`Invalid substrate data: ${parseError.message}`); }\r\n                if (isNaN(temp) || isNaN(phValue) || isNaN(initialWeight) || isNaN(days) || days < 0) { throw new Error(\"Invalid numerical parameters.\"); }\r\n\r\n                const simulationDuration = days;\r\n\r\n                // Calculate End Date\r\n                const calculatedEndDate = calculateAndFormatEndDate(savedStartDateStr, simulationDuration);\r\n                if (isMounted) { setEndDate(calculatedEndDate); }\r\n\r\n                // Prepare inputs\r\n                const simulationInputs = { 'External Temp': temp, 'pH': phValue, 'Initial Dry Substrate Weight': initialWeight, 'timeLength': simulationDuration, };\r\n\r\n                // Run Simulations\r\n                // console.log(\"Running Mushroom Simulation...\");\r\n                const resultsMushroom = runSimulation(simulationInputs, defaultParamsMushroom);\r\n                // console.log(\"Running Mycelium Simulation...\");\r\n                const resultsMycelium = runSimulation(simulationInputs, defaultParamsMycelium);\r\n\r\n                // Update State\r\n                if (isMounted) {\r\n                    setSimulationResultsMushroom(resultsMushroom);\r\n                    setSimulationResultsMycelium(resultsMycelium);\r\n                    if (resultsMushroom && resultsMushroom.length > 0) {\r\n                        const lastMushroomResult = resultsMushroom[resultsMushroom.length - 1];\r\n                        if (lastMushroomResult && Number.isFinite(lastMushroomResult.MushroomYield)) { setFinalSimulatedYield(lastMushroomResult.MushroomYield); }\r\n                        else { console.warn(\"Final mushroom yield is not finite.\"); setFinalSimulatedYield(null); }\r\n                    } else { console.warn(\"Mushroom simulation had no results.\"); setFinalSimulatedYield(null); }\r\n                    // console.log(\"Simulations complete.\");\r\n                }\r\n            } catch (err) {\r\n                console.error(\"Error during simulation setup/run:\", err);\r\n                if (isMounted) setError(err.message || \"An unexpected error occurred.\");\r\n            } finally {\r\n                if (isMounted) setIsLoading(false);\r\n            }\r\n        };\r\n        runSimulationsAsync();\r\n        return () => { isMounted = false; /* console.log(\"GrowthSimulation unmounted.\"); */ };\r\n    }, []);\r\n\r\n    // --- Event Handlers ---\r\n    const handleBackClick = () => navigate('/condition-setting');\r\n\r\n    /**\r\n     * Handles clicks on the chart points. Shows specific images for specific days.\r\n     * @param {object} event - The click event object from Chart.js.\r\n     */\r\n    const handleChartClick = (event) => {\r\n        const chart = chartRef.current;\r\n        if (!chart) { console.warn(\"Chart instance not found.\"); return; }\r\n\r\n        const elements = getElementAtEvent(chart, event);\r\n        if (elements.length > 0) {\r\n            const { datasetIndex, index } = elements[0];\r\n            const dataset = chart.config.data.datasets[datasetIndex];\r\n            const dataPoint = dataset?.data[index];\r\n\r\n            // Proceed only if on the yield tab and a valid data point was clicked\r\n            if (dataPoint && activeChartTab === 'yield') {\r\n                const clickedTime = dataPoint.x;\r\n                const timeTolerance = 0.11; // Tolerance for matching time (since step is 0.2)\r\n\r\n                // Find the time of the last data point in the dataset\r\n                const lastDataPointIndex = dataset.data.length - 1;\r\n                const lastDayTime = lastDataPointIndex >= 0 ? dataset.data[lastDataPointIndex].x : -1; // Get x value of last point\r\n\r\n                // Check against target times with tolerance\r\n                if (Math.abs(clickedTime - 0) < timeTolerance) {\r\n                    console.log(\"Clicked Day 0. Displaying Asset 1.\");\r\n                    setAnimationImageSrc(asset1Src);\r\n                } else if (Math.abs(clickedTime - 10) < timeTolerance) {\r\n                    console.log(\"Clicked near Day 10. Displaying Day 1 image.\");\r\n                    setAnimationImageSrc(day1Src); // Show day1.png\r\n                } else if (lastDayTime >= 0 && Math.abs(clickedTime - lastDayTime) < timeTolerance) {\r\n                    console.log(\"Clicked near Last Day. Displaying Day 5 image.\");\r\n                    setAnimationImageSrc(day5Src); // Show day5.png\r\n                } else {\r\n                    // Clicked on a different point on the yield chart\r\n                    console.log(`Clicked time ${clickedTime.toFixed(2)}. Clearing image.`);\r\n                    setAnimationImageSrc(null);\r\n                }\r\n            } else {\r\n                // Clicked on a different tab or invalid point\r\n                // console.log(\"Clicked non-yield chart or invalid point. Clearing image.\");\r\n                setAnimationImageSrc(null);\r\n            }\r\n        } else {\r\n            // Clicked on chart background (optional: clear image)\r\n            // setAnimationImageSrc(null);\r\n        }\r\n    };\r\n\r\n    // --- Chart Configuration Function ---\r\n    const getChartConfig = () => {\r\n        const currentResultsSource = activeChartTab === 'mycelium' ? simulationResultsMycelium : simulationResultsMushroom;\r\n        const yieldColor = '#2E7D32'; const tempColor = '#C62828'; const myceliumColor = '#1976D2';\r\n        const textColor = '#333'; const gridColor = 'rgba(0, 0, 0, 0.08)';\r\n        const font = { family: 'Lexend', weight: '300' };\r\n\r\n        const options = {\r\n            responsive: true, maintainAspectRatio: false,\r\n            plugins: {\r\n                legend: { display: true, labels: { color: textColor, font: font } },\r\n                tooltip: { enabled: true, bodyFont: font, titleFont: font },\r\n                title: { display: true, text: '', color: textColor, font: { ...font, size: 16, weight: '500'} }\r\n            },\r\n            scales: {\r\n                x: {\r\n                    type: 'linear', title: { display: true, text: 'Time (Days)', color: textColor, font: font },\r\n                    ticks: { color: textColor, font: font, precision: 0 }, // <<< Whole numbers\r\n                    grid: { color: gridColor }, min: 0, max: undefined\r\n                },\r\n                yYield: { type: 'linear', position: 'left', title: { display: true, text: 'Mushroom Yield (g)', color: yieldColor, font: font }, ticks: { color: yieldColor, font: font }, grid: { drawOnChartArea: true, color: gridColor }, beginAtZero: true, display: false },\r\n                yTemp: { type: 'linear', position: 'left', title: { display: true, text: 'Temperature (°C)', color: tempColor, font: font }, ticks: { color: tempColor, font: font }, grid: { drawOnChartArea: false }, display: false },\r\n                yMycelium: { type: 'linear', position: 'left', title: { display: true, text: 'Mycelium Density', color: myceliumColor, font: font }, ticks: { color: myceliumColor, font: font, callback: (value) => value.toFixed(2) }, grid: { drawOnChartArea: true, color: gridColor }, beginAtZero: true, suggestedMax: 1, display: false }\r\n            },\r\n            interaction: { mode: 'nearest', axis: 'x', intersect: false },\r\n        };\r\n\r\n        options.scales.yYield.display = false; options.scales.yTemp.display = false; options.scales.yMycelium.display = false;\r\n\r\n        if (!currentResultsSource || currentResultsSource.length === 0) { return { data: { datasets: [] }, options: options }; }\r\n\r\n        let datasets = []; let chartData = [...currentResultsSource]; let dataSourceName = '';\r\n        switch (activeChartTab) {\r\n            case 'yield':\r\n                dataSourceName = 'Mushroom Sim'; options.plugins.title.text = `Yield Over Time (${dataSourceName})`; options.scales.yYield.display = true;\r\n                datasets = [{ label: 'Mushroom Yield (g)', data: chartData.map(p => ({ x: p.time, y: Number.isFinite(p.MushroomYield) ? p.MushroomYield : null })), borderColor: yieldColor, backgroundColor: 'rgba(46, 125, 50, 0.1)', yAxisID: 'yYield', }];\r\n                options.scales.x.max = chartData.length > 0 ? chartData[chartData.length - 1].time : undefined;\r\n                break;\r\n            case 'temp':\r\n                dataSourceName = 'Mushroom Sim'; options.plugins.title.text = `Temperature Over Time (${dataSourceName})`; options.scales.yTemp.display = true;\r\n                datasets = [{ label: 'Temperature (°C)', data: chartData.map(p => ({ x: p.time, y: Number.isFinite(p.Temp) ? p.Temp : null })), borderColor: tempColor, backgroundColor: 'rgba(198, 40, 40, 0.1)', yAxisID: 'yTemp', }];\r\n                options.scales.x.max = chartData.length > 0 ? chartData[chartData.length - 1].time : undefined;\r\n                break;\r\n            case 'mycelium':\r\n                dataSourceName = 'Mycelium Sim'; options.plugins.title.text = `Mycelium Growth (${dataSourceName})`; options.scales.yMycelium.display = true;\r\n                let cutoffIndex = chartData.findIndex(p => p.Mycelium >= 0.9); let finalTime = chartData.length > 0 ? chartData[chartData.length - 1].time : 0; let cutoffReason = \"Simulation End\";\r\n                if (cutoffIndex !== -1) { chartData = chartData.slice(0, cutoffIndex + 1); finalTime = chartData[chartData.length - 1].time; cutoffReason = \"Mycelium >= 0.9\"; }\r\n                else { const day30Index = chartData.findIndex(p => p.time >= 30); if (day30Index !== -1) { chartData = chartData.slice(0, day30Index + 1); finalTime = chartData[chartData.length - 1].time; cutoffReason = \"Day 30 Limit\"; } }\r\n                options.scales.x.max = finalTime; if (cutoffReason !== \"Simulation End\") { options.plugins.title.text += ` (Stopped at ${cutoffReason})`; }\r\n                datasets = [{ label: 'Mycelium Density', data: chartData.map(p => ({ x: p.time, y: Number.isFinite(p.Mycelium) ? p.Mycelium : null })), borderColor: myceliumColor, backgroundColor: 'rgba(25, 118, 210, 0.1)', yAxisID: 'yMycelium', }];\r\n                break;\r\n            default: datasets = [];\r\n        }\r\n\r\n        const finalDatasets = datasets && datasets.length > 0 ? datasets.map(ds => ({ ...ds, tension: 0.1, pointRadius: ds.data?.length > 150 ? 0.5 : (ds.data?.length > 50 ? 1 : 2), pointHoverRadius: 4, borderWidth: 1.5, spanGaps: true })).filter(ds => ds.data && ds.data.length > 0) : [];\r\n        if (finalDatasets.length === 0 && currentResultsSource && currentResultsSource.length > 0) { console.log(`No valid data points to display for tab: ${activeChartTab}`); }\r\n        return { data: { datasets: finalDatasets }, options: options };\r\n    };\r\n    // --- End getChartConfig function ---\r\n\r\n\r\n    // --- Render Logic ---\r\n    const chartConfig = getChartConfig();\r\n    const simulationDataReady = simulationResultsMushroom || simulationResultsMycelium;\r\n\r\n    return (\r\n        <div className=\"growth-simulation\">\r\n            {/* Header */}\r\n            <header className=\"simulation-header\">\r\n                <div className=\"logobox\"> <button onClick={handleBackClick} className=\"back-button\" title=\"Back to Settings\">&larr;</button> <div className=\"logo\"> <img src={logoSrc} alt=\"City Sprouts Logo\" /> </div> </div>\r\n                <div className=\"batch-info\"> <span className=\"batch-name\">Batch: {batchName}</span> <span className=\"start-date\">Start: {formatDate_DDMMYYYY(startDate)}</span> </div>\r\n            </header>\r\n\r\n            {/* Main Content */}\r\n            <main className=\"main-content-grid\">\r\n                {/* Animation Area */}\r\n                <div className=\"animation-area content-card\">\r\n                    {animationImageSrc ? ( <img src={animationImageSrc} alt=\"Simulation state representation\" style={{ maxWidth: '100%', maxHeight: '100%', objectFit: 'contain', display: 'block', margin: 'auto' }} /> ) : ( <span>Animation / Visualization Area</span> )}\r\n                </div>\r\n\r\n                {/* Chart/Results Column */}\r\n                <div className=\"chart-results-column\">\r\n                    {/* Tabs */}\r\n                    <div className=\"tabs-container\">\r\n                         <button onClick={() => { setActiveChartTab('yield'); setAnimationImageSrc(null); }} className={`tab-button ${activeChartTab === 'yield' ? 'tab-button-active' : ''}`}> Yield </button>\r\n                         <button onClick={() => { setActiveChartTab('temp'); setAnimationImageSrc(null); }} className={`tab-button ${activeChartTab === 'temp' ? 'tab-button-active' : ''}`}> Temperature </button>\r\n                         <button onClick={() => { setActiveChartTab('mycelium'); setAnimationImageSrc(null); }} className={`tab-button ${activeChartTab === 'mycelium' ? 'tab-button-active' : ''}`}> Mycelium </button>\r\n                    </div>\r\n\r\n                    {/* Chart Area */}\r\n                    <div className=\"chart-area content-card\">\r\n                        {isLoading && <p className=\"loading-message\">Running simulations...</p>}\r\n                        {error && <p className=\"error-message\">Error: {error}</p>}\r\n                        {!isLoading && !error && simulationDataReady && ( chartConfig.data.datasets.length > 0 ? ( <div className=\"chart-container\"> <Line ref={chartRef} options={chartConfig.options} data={chartConfig.data} onClick={handleChartClick} /> </div> ) : ( <p className=\"no-data-message\">No simulation data to display for the '{activeChartTab}' chart.</p> ) )}\r\n                        {!isLoading && !error && !simulationDataReady && <p className=\"no-data-message\">Simulation results not available.</p>}\r\n                    </div>\r\n\r\n                    {/* Results Section */}\r\n                    <div className=\"results-section content-card\">\r\n                        <h3 className=\"results-heading\"> Simulation Results <span className=\"info-icon\" title=\"Projected yield is based on the Mushroom phase simulation. End date calculated from start date and duration.\">i</span> </h3>\r\n                        <div className=\"results-items\">\r\n                            <div className=\"result-item\"> <span className=\"result-label\">Projected Yield:</span> <span className=\"result-value\"> {isLoading ? '...' : error ? 'Error' : (finalSimulatedYield !== null && Number.isFinite(finalSimulatedYield)) ? `${finalSimulatedYield.toFixed(1)}g` : 'N/A'} </span> </div>\r\n                            <div className=\"result-item\"> <span className=\"result-label\">Projected End Date:</span> <span className=\"result-value\"> {isLoading ? '...' : error ? 'Error' : endDate} </span> </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </main>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default GrowthSimulation;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,EAAEC,MAAM,QAAQ,OAAO;AAC1D,SAASC,WAAW,QAAQ,kBAAkB;AAC9C,SAASC,IAAI,QAAQ,iBAAiB;AACtC,SACIC,KAAK,IAAIC,OAAO,EAChBC,WAAW,EACXC,YAAY,EACZC,OAAO,EACPC,MAAM,EACNC,aAAa,EACbC,WAAW,EACXC,KAAK,EACLC,WAAW,QACR,UAAU;AACjB,SAASC,iBAAiB,QAAQ,iBAAiB;AACnD,OAAOC,MAAM,MAAM,SAAS;;AAE5B;AACA;AACA,OAAO,gCAAgC;AACvC,OAAOC,OAAO,MAAM,6BAA6B;AACjD,OAAOC,SAAS,MAAM,4BAA4B,CAAC,CAAC;AACpD,OAAOC,OAAO,MAAM,2BAA2B,CAAC,CAAG;AACnD,OAAOC,OAAO,MAAM,2BAA2B,CAAC,CAAG;;AAEnD;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACAhB,OAAO,CAACiB,QAAQ,CAAChB,WAAW,EAAEC,YAAY,EAAEC,OAAO,EAAEC,MAAM,EAAEC,aAAa,EAAEC,WAAW,EAAEC,KAAK,CAAC;;AAE/F;AACA;AACA;AACA;AACA,MAAMW,qBAAqB,GAAG;EAC1BC,SAAS,EAAE,CAAC;EAAEC,UAAU,EAAE,GAAG;EAAEC,QAAQ,EAAE,GAAG;EAC5C,WAAW,EAAE,IAAI;EAAE,SAAS,EAAE,GAAG;EAAE,cAAc,EAAE,KAAK;EAAE,WAAW,EAAE,GAAG;EAC1E,qBAAqB,EAAE,MAAM;EAAE,kBAAkB,EAAE,IAAI;EAAE,cAAc,EAAE,MAAM;EAC/E,eAAe,EAAE,EAAE;EAAE,cAAc,EAAE,GAAG;EACxC,8BAA8B,EAAE,MAAM;EACtC,8BAA8B,EAAE,KAAK;EAAE;EACvC,QAAQ,EAAE,CAAC;EAAE;EACb,qBAAqB,EAAE,IAAI;EAC3B,SAAS,EAAE,IAAI;EAAE,QAAQ,EAAE,KAAK;EAChC,IAAI,EAAE,IAAI;EAAE;EACZ,UAAU,EAAE,GAAG;EAAE,YAAY,EAAE,GAAG;EAAE,sBAAsB,EAAE,GAAG;EAC/D,oBAAoB,EAAE,GAAG;EACzB,mCAAmC,EAAE,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,EAAE,CAAC,GAAG,EAAE,CAAC,CAAC,EAAE,CAAC,IAAI,EAAE,GAAG,CAAC,EAAE,CAAC,IAAI,EAAE,IAAI,CAAC,EAAE,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC;EACjG,kCAAkC,EAAE,CAAC,CAAC,KAAK,EAAE,CAAC,CAAC,EAAE,CAAC,KAAK,EAAE,GAAG,CAAC,EAAE,CAAC,KAAK,EAAE,IAAI,CAAC,EAAE,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC;EACzF,kCAAkC,EAAE,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,IAAI,CAAC,EAAE,CAAC,GAAG,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,GAAG,CAAC,EAAE,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC;EACvF,iCAAiC,EAAE,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,IAAI,CAAC,EAAE,CAAC,GAAG,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,GAAG,CAAC,EAAE,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC;EACtF,oCAAoC,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,IAAI,CAAC,EAAE,CAAC,EAAE,EAAE,IAAI,CAAC,EAAE,CAAC,EAAE,EAAE,IAAI,CAAC,EAAE,CAAC,EAAE,EAAE,IAAI,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;EACxG,mCAAmC,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,IAAI,CAAC,EAAE,CAAC,EAAE,EAAE,IAAI,CAAC,EAAE,CAAC,EAAE,EAAE,IAAI,CAAC,EAAE,CAAC,EAAE,EAAE,IAAI,CAAC,EAAE,CAAC,EAAE,EAAE,IAAI,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;EACnH,kBAAkB,EAAE,GAAG,CAAE;AAC7B,CAAC;;AAED;AACA,MAAMC,qBAAqB,GAAG;EAC1BH,SAAS,EAAE,CAAC;EAAEC,UAAU,EAAE,GAAG;EAAEC,QAAQ,EAAE,GAAG;EAC5C,WAAW,EAAE,IAAI;EAAE,SAAS,EAAE,GAAG;EAAE,cAAc,EAAE,KAAK;EAAE,WAAW,EAAE,GAAG;EAC1E,qBAAqB,EAAE,MAAM;EAAE,kBAAkB,EAAE,CAAC;EACpD,cAAc,EAAE,MAAM;EAAE,eAAe,EAAE,EAAE;EAC3C,cAAc,EAAE,GAAG;EACnB,8BAA8B,EAAE,KAAK;EACrC,8BAA8B,EAAE,GAAG;EAAE;EACrC,QAAQ,EAAE,CAAC;EAAE;EACb,qBAAqB,EAAE,EAAE;EACzB,SAAS,EAAE,IAAI;EAAE,QAAQ,EAAE,IAAI;EAC/B,IAAI,EAAE,IAAI;EAAE;EACZ,UAAU,EAAE,GAAG;EAAE,YAAY,EAAE,GAAG;EAClC,sBAAsB,EAAE,GAAG;EAC3B,oBAAoB,EAAE,GAAG;EACzB,mCAAmC,EAAE,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,EAAE,CAAC,GAAG,EAAE,CAAC,CAAC,EAAE,CAAC,IAAI,EAAE,GAAG,CAAC,EAAE,CAAC,IAAI,EAAE,IAAI,CAAC,EAAE,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC;EACjG,kCAAkC,EAAE,CAAC,CAAC,KAAK,EAAE,CAAC,CAAC,EAAE,CAAC,KAAK,EAAE,GAAG,CAAC,EAAE,CAAC,KAAK,EAAE,IAAI,CAAC,EAAE,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC;EACzF,kCAAkC,EAAE,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,IAAI,CAAC,EAAE,CAAC,GAAG,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,GAAG,CAAC,EAAE,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC;EACvF,iCAAiC,EAAE,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,IAAI,CAAC,EAAE,CAAC,GAAG,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,GAAG,CAAC,EAAE,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC;EACtF,oCAAoC,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,IAAI,CAAC,EAAE,CAAC,EAAE,EAAE,IAAI,CAAC,EAAE,CAAC,EAAE,EAAE,IAAI,CAAC,EAAE,CAAC,EAAE,EAAE,IAAI,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;EACxG,mCAAmC,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,IAAI,CAAC,EAAE,CAAC,EAAE,EAAE,IAAI,CAAC,EAAE,CAAC,EAAE,EAAE,IAAI,CAAC,EAAE,CAAC,EAAE,EAAE,IAAI,CAAC,EAAE,CAAC,EAAE,EAAE,IAAI,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;EACnH,kBAAkB,EAAE,KAAK,CAAE;AAC/B,CAAC;;AAED;AACA,MAAME,cAAc,GAAG,IAAI;;AAE3B;AACA,SAASC,iBAAiBA,CAACC,IAAI,EAAEC,CAAC,EAAE;EAChC,IAAI,CAACD,IAAI,IAAIA,IAAI,CAACE,MAAM,KAAK,CAAC,EAAE,OAAO,CAAC;EACxC,IAAID,CAAC,IAAID,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,OAAOA,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;EACtC,IAAIC,CAAC,IAAID,IAAI,CAACA,IAAI,CAACE,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,OAAOF,IAAI,CAACA,IAAI,CAACE,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;EAClE,IAAIC,CAAC,GAAG,CAAC;EACT,OAAOA,CAAC,GAAGH,IAAI,CAACE,MAAM,GAAG,CAAC,IAAID,CAAC,GAAGD,IAAI,CAACG,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,EAAEA,CAAC,EAAE;EACrD,MAAMC,EAAE,GAAGJ,IAAI,CAACG,CAAC,CAAC,CAAC,CAAC,CAAC;IAAEE,EAAE,GAAGL,IAAI,CAACG,CAAC,CAAC,CAAC,CAAC,CAAC;EACtC,MAAMG,EAAE,GAAGN,IAAI,CAACG,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;IAAEI,EAAE,GAAGP,IAAI,CAACG,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;EAC9C,MAAMK,OAAO,GAAIF,EAAE,GAAGF,EAAG;EACzB,IAAII,OAAO,KAAK,CAAC,EAAE,OAAOH,EAAE;EAC5B,MAAMI,CAAC,GAAG,CAACR,CAAC,GAAGG,EAAE,IAAII,OAAO;EAC5B,OAAOH,EAAE,GAAGI,CAAC,IAAIF,EAAE,GAAGF,EAAE,CAAC;AAC7B;AAEA,SAASK,WAAWA,CAACC,IAAI,EAAEC,CAAC,EAAEH,CAAC,EAAEI,aAAa,EAAE;EAC5C,MAAM,CAAEC,UAAU,EAAEC,eAAe,EAAEC,oBAAoB,EAAEC,eAAe,EAAEC,QAAQ,EAAEC,cAAc,EAAEC,YAAY,EAAEC,WAAW,CAAE,GAAGT,CAAC;EACrI,MAAMU,yBAAyB,GAAGT,aAAa,CAAC,8BAA8B,CAAC,IAAI,CAAC;EACpF,MAAMU,OAAO,GAAGV,aAAa,CAAC,mBAAmB,CAAC;EAClD,MAAMW,cAAc,GAAGD,OAAO,GAAG,CAAC;EAClC,MAAME,KAAK,GAAGH,yBAAyB,GAAIA,yBAAyB,GAAGE,cAAe;EACtF,MAAME,UAAU,GAAGJ,yBAAyB,GAAG,CAAC,GAAGJ,QAAQ,GAAGI,yBAAyB,GAAG,CAAC;EAC3F,MAAMK,UAAU,GAAGL,yBAAyB,GAAG,CAAC,GAAGH,cAAc,GAAGG,yBAAyB,GAAG,CAAC;EACjG,MAAMM,mBAAmB,GAAGN,yBAAyB,GAAG,CAAC,GAAGO,IAAI,CAACC,IAAI,CAAC,GAAG,GAAGR,yBAAyB,CAAC,GAAGO,IAAI,CAACC,IAAI,CAAC,GAAG,CAAC;EACvH,MAAMC,4BAA4B,GAAGhC,iBAAiB,CAACc,aAAa,CAAC,mCAAmC,CAAC,EAAEC,UAAU,CAAC;EACtH,MAAMkB,2BAA2B,GAAGjC,iBAAiB,CAACc,aAAa,CAAC,kCAAkC,CAAC,EAAEC,UAAU,CAAC;EACpH,MAAMmB,2BAA2B,GAAGlC,iBAAiB,CAACc,aAAa,CAAC,kCAAkC,CAAC,EAAEA,aAAa,CAAC,IAAI,CAAC,CAAC;EAC7H,MAAMqB,0BAA0B,GAAGnC,iBAAiB,CAACc,aAAa,CAAC,iCAAiC,CAAC,EAAEA,aAAa,CAAC,IAAI,CAAC,CAAC;EAC3H,MAAMsB,6BAA6B,GAAGpC,iBAAiB,CAACc,aAAa,CAAC,oCAAoC,CAAC,EAAEQ,WAAW,CAAC;EACzH,MAAMe,4BAA4B,GAAGrC,iBAAiB,CAACc,aAAa,CAAC,mCAAmC,CAAC,EAAEQ,WAAW,CAAC;EACvH,MAAMgB,WAAW,GAAGxB,aAAa,CAAC,QAAQ,CAAC,KAAK,CAAC;EACjD,MAAMyB,QAAQ,GAAGD,WAAW,GAAGF,6BAA6B,GAAGC,4BAA4B;EAC3F,MAAMG,UAAU,GAAI1B,aAAa,CAAC,YAAY,CAAC,GAAGyB,QAAQ,GAAI,EAAE;EAChE,MAAME,MAAM,GAAGH,WAAW,GAAGJ,2BAA2B,GAAGC,0BAA0B;EACrF,MAAMO,QAAQ,GAAGD,MAAM,GAAG3B,aAAa,CAAC,UAAU,CAAC;EACnD,MAAM6B,OAAO,GAAGL,WAAW,GAAGN,4BAA4B,GAAGC,2BAA2B;EACxF,MAAMW,SAAS,GAAG9B,aAAa,CAAC,WAAW,CAAC,GAAG6B,OAAO;EACtD,MAAME,OAAO,GAAG/B,aAAa,CAAC,SAAS,CAAC,GAAGa,UAAU;EACrD,MAAMmB,OAAO,GAAGhB,IAAI,CAACC,IAAI,CAACD,IAAI,CAACiB,GAAG,CAAC,CAAC,EAAEjC,aAAa,CAAC,SAAS,CAAC,GAAGc,UAAU,CAAC,CAAC;EAC7E,MAAMoB,cAAc,GAAGlB,IAAI,CAACiB,GAAG,CAAC,CAAC,EAAEP,UAAU,CAAC;EAC9C,MAAMS,YAAY,GAAGnB,IAAI,CAACiB,GAAG,CAAC,CAAC,EAAEL,QAAQ,CAAC;EAC1C,MAAMQ,WAAW,GAAGpB,IAAI,CAACiB,GAAG,CAAC,CAAC,EAAEF,OAAO,CAAC;EACxC,MAAMM,WAAW,GAAGrB,IAAI,CAACiB,GAAG,CAAC,CAAC,EAAED,OAAO,CAAC;EACxC,MAAMM,aAAa,GAAGtB,IAAI,CAACiB,GAAG,CAAC,CAAC,EAAEH,SAAS,CAAC;EAC5C,MAAMS,aAAa,GAAGL,cAAc,GAAGC,YAAY,GAAGC,WAAW,GAAGC,WAAW,GAAGC,aAAa;EAC/F,MAAME,SAAS,GAAGjC,YAAY,GAAGH,eAAe;EAChD,IAAIqC,UAAU,GAAGjB,WAAW,GAAIe,aAAa,GAAGvC,aAAa,CAAC,cAAc,CAAC,GAAKuC,aAAa,GAAGC,SAAS,GAAGxC,aAAa,CAAC,cAAc,CAAE;EAC5IyC,UAAU,GAAGzB,IAAI,CAACiB,GAAG,CAAC,CAAC,EAAEQ,UAAU,CAAC;EACpC,IAAIC,cAAc,GAAGlB,WAAW,GAAIiB,UAAU,GAAG,GAAG,GAAIA,UAAU;EAClEC,cAAc,GAAG1B,IAAI,CAACiB,GAAG,CAAC,CAAC,EAAES,cAAc,CAAC;EAC5C,MAAMC,cAAc,GAAG3B,IAAI,CAACiB,GAAG,CAAC,CAAC,EAAE7B,eAAe,GAAGJ,aAAa,CAAC,WAAW,CAAC,GAAGE,eAAe,GAAGqC,aAAa,GAAGxB,mBAAmB,CAAC;EACxI,MAAM6B,UAAU,GAAG5B,IAAI,CAACiB,GAAG,CAAC,CAAC,EAAES,cAAc,GAAG1C,aAAa,CAAC,cAAc,CAAC,CAAC;EAC9E,MAAM6C,YAAY,GAAG7B,IAAI,CAACiB,GAAG,CAAC,CAAC,EAAES,cAAc,GAAG1C,aAAa,CAAC,qBAAqB,CAAC,CAAC;EACvF,MAAM8C,YAAY,GAAG9B,IAAI,CAACiB,GAAG,CAAC,CAAC,EAAEjC,aAAa,CAAC,kBAAkB,CAAC,IAAIC,UAAU,GAAGD,aAAa,CAAC,cAAc,CAAC,CAAC,GAAGe,mBAAmB,CAAC;EACxI,MAAMgC,iBAAiB,GAAGvB,WAAW,GAAG,CAAC,GAAGiB,UAAU;EACtD,MAAMO,mBAAmB,GAAGxB,WAAW,GAAGR,IAAI,CAACiB,GAAG,CAAC,CAAC,EAAEQ,UAAU,GAAGzC,aAAa,CAAC,qBAAqB,CAAC,CAAC,GAAG,CAAC;EAC5G,MAAMiD,UAAU,GAAGjC,IAAI,CAACiB,GAAG,CAAC,CAAC,EAAES,cAAc,GAAG1C,aAAa,CAAC,QAAQ,CAAC,CAAC;EACxE,MAAMkD,aAAa,GAAGlC,IAAI,CAACiB,GAAG,CAAC,CAAC,EAAES,cAAc,GAAG1C,aAAa,CAAC,sBAAsB,CAAC,CAAC;EACzF,MAAMmD,aAAa,GAAGnC,IAAI,CAACiB,GAAG,CAAC,CAAC,EAAE,CAACzB,WAAW,GAAGR,aAAa,CAAC,eAAe,CAAC,IAAIA,aAAa,CAAC,oBAAoB,CAAC,GAAGe,mBAAmB,CAAC;EAC7IjB,IAAI,CAAC,CAAC,CAAC,GAAG+C,YAAY,GAAGC,YAAY;EACrChD,IAAI,CAAC,CAAC,CAAC,GAAG,CAAC6C,cAAc;EACzB7C,IAAI,CAAC,CAAC,CAAC,GAAGkD,mBAAmB;EAC7BlD,IAAI,CAAC,CAAC,CAAC,GAAGiD,iBAAiB;EAC3BjD,IAAI,CAAC,CAAC,CAAC,GAAG,CAACmD,UAAU;EACrBnD,IAAI,CAAC,CAAC,CAAC,GAAG6C,cAAc,GAAGC,UAAU;EACrC9C,IAAI,CAAC,CAAC,CAAC,GAAG,CAACiD,iBAAiB;EAC5BjD,IAAI,CAAC,CAAC,CAAC,GAAGoD,aAAa,GAAGC,aAAa;EACvC,MAAMC,OAAO,GAAG,IAAI;EACpB,IAAIrD,CAAC,CAAC,CAAC,CAAC,IAAIqD,OAAO,IAAItD,IAAI,CAAC,CAAC,CAAC,GAAG,CAAC,EAAEA,IAAI,CAAC,CAAC,CAAC,GAAG,CAAC;EAC/C,IAAIC,CAAC,CAAC,CAAC,CAAC,IAAIqD,OAAO,IAAItD,IAAI,CAAC,CAAC,CAAC,GAAG,CAAC,EAAEA,IAAI,CAAC,CAAC,CAAC,GAAG,CAAC;EAC/C,IAAIC,CAAC,CAAC,CAAC,CAAC,IAAIqD,OAAO,IAAItD,IAAI,CAAC,CAAC,CAAC,GAAG,CAAC,EAAEA,IAAI,CAAC,CAAC,CAAC,GAAG,CAAC;EAC/C,IAAIC,CAAC,CAAC,CAAC,CAAC,IAAIqD,OAAO,IAAItD,IAAI,CAAC,CAAC,CAAC,GAAG,CAAC,EAAEA,IAAI,CAAC,CAAC,CAAC,GAAG,CAAC;EAC/C,IAAIC,CAAC,CAAC,CAAC,CAAC,IAAIqD,OAAO,IAAItD,IAAI,CAAC,CAAC,CAAC,GAAG,CAAC,EAAEA,IAAI,CAAC,CAAC,CAAC,GAAG,CAAC;EAC/C,IAAIC,CAAC,CAAC,CAAC,CAAC,IAAIqD,OAAO,IAAItD,IAAI,CAAC,CAAC,CAAC,GAAG,CAAC,EAAEA,IAAI,CAAC,CAAC,CAAC,GAAG,CAAC;EAC/C,IAAIC,CAAC,CAAC,CAAC,CAAC,IAAIqD,OAAO,IAAItD,IAAI,CAAC,CAAC,CAAC,GAAG,CAAC,EAAEA,IAAI,CAAC,CAAC,CAAC,GAAG,CAAC;AACnD;AAEA,SAASuD,eAAeA,CAACC,CAAC,EAAEC,oBAAoB,EAAE;EAC9C,MAAM9C,yBAAyB,GAAG+C,MAAM,CAACF,CAAC,CAAC,8BAA8B,CAAC,CAAC;EAC3E,MAAM5C,OAAO,GAAG8C,MAAM,CAACF,CAAC,CAAC,mBAAmB,CAAC,CAAC;EAC9C,MAAMG,kBAAkB,GAAGD,MAAM,CAACF,CAAC,CAAC,8BAA8B,CAAC,CAAC;EACpE,IAAII,KAAK,CAACjD,yBAAyB,CAAC,IAAIA,yBAAyB,IAAI,CAAC,IAAIiD,KAAK,CAAChD,OAAO,CAAC,IAAIA,OAAO,IAAI,CAAC,IAAIgD,KAAK,CAACD,kBAAkB,CAAC,IAAIA,kBAAkB,GAAG,CAAC,IAAIA,kBAAkB,GAAG,CAAC,EAAE;IACvLE,OAAO,CAACC,KAAK,CAAC,yCAAyC,EAAEN,CAAC,CAAC;IAC3D,OAAO,CAAC,GAAG,EAAE,GAAG,EAAE,CAAC,EAAE,IAAI,EAAE,EAAE,EAAE,EAAE,EAAE,IAAI,EAAE,EAAE,CAAC;EAChD;EACA,MAAM3C,cAAc,GAAGD,OAAO,GAAG,CAAC;EAClC,MAAMmD,MAAM,GAAGpD,yBAAyB,GAAGE,cAAc;EACzD,MAAMmD,MAAM,GAAGrD,yBAAyB,GAAGoD,MAAM;EACjD,MAAME,YAAY,GAAG/C,IAAI,CAACiB,GAAG,CAAC,CAAC,EAAE,CAAC,GAAGsB,oBAAoB,CAAC;EAC1D,OAAO,CAAEC,MAAM,CAACF,CAAC,CAAC,cAAc,CAAC,CAAC,EAAEQ,MAAM,GAAGL,kBAAkB,EAAE,CAAC,EAAEF,oBAAoB,EAAEM,MAAM,EAAEC,MAAM,IAAI,CAAC,GAAGL,kBAAkB,CAAC,EAAEM,YAAY,EAAEP,MAAM,CAACF,CAAC,CAAC,eAAe,CAAC,CAAC,CAAE;AACnL;AAEA,SAASU,aAAaA,CAACC,WAAW,EAAEC,eAAe,EAAE;EAAA,IAAAC,qBAAA,EAAAC,sBAAA;EACjD,IAAI,CAACF,eAAe,EAAE;IAAEP,OAAO,CAACC,KAAK,CAAC,+CAA+C,CAAC;IAAE,OAAO,EAAE;EAAE;EACnG,MAAM5D,aAAa,GAAG;IAAE,GAAGkE,eAAe;IAAE,GAAGD,WAAW;IAAE,mBAAmB,EAAEhF;EAAgB,CAAC;EAClG,MAAMoF,kBAAkB,GAAGb,MAAM,CAACxD,aAAa,CAAC,8BAA8B,CAAC,CAAC;EAChF,MAAMsE,YAAY,GAAGd,MAAM,CAACxD,aAAa,CAAC,mBAAmB,CAAC,CAAC;EAC/D,MAAMuE,uBAAuB,GAAGf,MAAM,CAACxD,aAAa,CAAC,8BAA8B,CAAC,CAAC;EACrF,MAAMwE,gBAAgB,GAAGhB,MAAM,CAACxD,aAAa,CAAC,cAAc,CAAC,CAAC;EAC9D,MAAMyE,iBAAiB,GAAGjB,MAAM,CAACxD,aAAa,CAAC,eAAe,CAAC,CAAC;EAChE,MAAMuD,oBAAoB,GAAGvD,aAAa,CAAC,QAAQ,CAAC,KAAK,CAAC,IAAAmE,qBAAA,GAAInE,aAAa,CAAC,kBAAkB,CAAC,cAAAmE,qBAAA,cAAAA,qBAAA,GAAInF,qBAAqB,CAAC,kBAAkB,CAAC,IAAAoF,sBAAA,GAAKpE,aAAa,CAAC,kBAAkB,CAAC,cAAAoE,sBAAA,cAAAA,sBAAA,GAAIxF,qBAAqB,CAAC,kBAAkB,CAAE;EAChO,MAAM8F,kBAAkB,GAAG;IAAE,8BAA8B,EAAEL,kBAAkB;IAAE,mBAAmB,EAAEC,YAAY;IAAE,8BAA8B,EAAEC,uBAAuB;IAAE,cAAc,EAAEC,gBAAgB;IAAE,eAAe,EAAEC;EAAmB,CAAC;EACpP,MAAMjF,EAAE,GAAG6D,eAAe,CAACqB,kBAAkB,EAAEnB,oBAAoB,CAAC;EACpE,MAAMoB,EAAE,GAAG3E,aAAa,CAACnB,SAAS;EAClC,MAAM+F,EAAE,GAAG5E,aAAa,CAACjB,QAAQ;EACjC,MAAMD,UAAU,GAAGkC,IAAI,CAACiB,GAAG,CAAC,CAAC,EAAEuB,MAAM,CAACxD,aAAa,CAAClB,UAAU,CAAC,CAAC;EAChE,MAAM+F,UAAU,GAAG7D,IAAI,CAACiB,GAAG,CAAC2C,EAAE,EAAE,IAAI,CAAC;EACrC,MAAME,QAAQ,GAAGhG,UAAU,GAAG,CAAC,IAAI+F,UAAU,GAAG,CAAC,GAAG7D,IAAI,CAAC+D,KAAK,CAACjG,UAAU,GAAG+F,UAAU,CAAC,GAAG,CAAC;EAC3F,MAAMG,uBAAuB,GAAGA,CAAClF,IAAI,EAAEC,CAAC,EAAEH,CAAC,KAAK;IAAE,IAAI;MAAEC,WAAW,CAACC,IAAI,EAAEC,CAAC,EAAEH,CAAC,EAAEI,aAAa,CAAC;IAAE,CAAC,CAAC,OAAOiF,CAAC,EAAE;MAAEtB,OAAO,CAACC,KAAK,CAAC,oCAAoC,EAAEqB,CAAC,CAAC;MAAEnF,IAAI,CAACoF,IAAI,CAAC,CAAC,CAAC;IAAE;EAAE,CAAC;EACvL,MAAMC,UAAU,GAAG/G,MAAM,CAACoB,EAAE,EAAEwF,uBAAuB,EAAEL,EAAE,EAAEE,UAAU,CAAC;EACtE,MAAMO,OAAO,GAAG,CAAC;IAAEC,IAAI,EAAEF,UAAU,CAACvF,CAAC;IAAE0F,KAAK,EAAE,CAAC,GAAGH,UAAU,CAACpF,CAAC;EAAE,CAAC,CAAC;EAClE,MAAMwF,OAAO,GAAGvF,aAAa,CAAC,QAAQ,CAAC,KAAK,CAAC,GAAG,UAAU,GAAG,UAAU;EACvE;EACA,IAAI8E,QAAQ,IAAI,CAAC,EAAE;IAAEnB,OAAO,CAAC6B,IAAI,CAAC,GAAGD,OAAO,sEAAsE,CAAC;IAAE,OAAO,EAAE;EAAE;EAChI,KAAK,IAAIjG,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGwF,QAAQ,EAAExF,CAAC,EAAE,EAAE;IAC/B,IAAI;MACA6F,UAAU,CAACM,IAAI,CAAC,CAAC;MACjB,IAAIN,UAAU,CAACpF,CAAC,CAAC2F,IAAI,CAACC,GAAG,IAAI,CAACnC,MAAM,CAACoC,QAAQ,CAACD,GAAG,CAAC,CAAC,EAAE;QAAEhC,OAAO,CAACC,KAAK,CAAC,GAAG2B,OAAO,wCAAwCJ,UAAU,CAACvF,CAAC,CAACiG,OAAO,CAAC,CAAC,CAAC,UAAU,EAAEV,UAAU,CAACpF,CAAC,CAAC,CAAC,CAAC;MAAa;MACtLqF,OAAO,CAACU,IAAI,CAAC;QAAET,IAAI,EAAEF,UAAU,CAACvF,CAAC;QAAE0F,KAAK,EAAE,CAAC,GAAGH,UAAU,CAACpF,CAAC;MAAE,CAAC,CAAC;IAClE,CAAC,CAAC,OAAOgG,WAAW,EAAE;MAAEpC,OAAO,CAACC,KAAK,CAAC,GAAG2B,OAAO,+BAA+BJ,UAAU,CAACvF,CAAC,CAACiG,OAAO,CAAC,CAAC,CAAC,GAAG,EAAEE,WAAW,CAAC;MAAE;IAAO;EACpI;EACA;EACA,OAAOX,OAAO,CAACY,GAAG,CAAC1C,CAAC,KAAK;IAAE+B,IAAI,EAAE/B,CAAC,CAAC+B,IAAI;IAAEY,GAAG,EAAE3C,CAAC,CAACgC,KAAK,CAAC,CAAC,CAAC;IAAEY,QAAQ,EAAE5C,CAAC,CAACgC,KAAK,CAAC,CAAC,CAAC;IAAEa,aAAa,EAAE7C,CAAC,CAACgC,KAAK,CAAC,CAAC,CAAC;IAAEc,QAAQ,EAAE9C,CAAC,CAACgC,KAAK,CAAC,CAAC,CAAC;IAAEe,CAAC,EAAE/C,CAAC,CAACgC,KAAK,CAAC,CAAC,CAAC;IAAEgB,OAAO,EAAEhD,CAAC,CAACgC,KAAK,CAAC,CAAC,CAAC;IAAEiB,KAAK,EAAEjD,CAAC,CAACgC,KAAK,CAAC,CAAC,CAAC;IAAEkB,IAAI,EAAElD,CAAC,CAACgC,KAAK,CAAC,CAAC;EAAE,CAAC,CAAC,CAAC;AAChN;AACA;;AAGA;AACA,SAASmB,mBAAmBA,CAACC,UAAU,EAAE;EACrC,IAAI,CAACA,UAAU,IAAIA,UAAU,KAAK,KAAK,IAAI,CAAC,qBAAqB,CAACC,IAAI,CAACD,UAAU,CAAC,EAAE;IAAE,OAAO,KAAK;EAAE;EACpG,IAAI;IAAE,MAAM,CAACE,IAAI,EAAEC,KAAK,EAAEC,GAAG,CAAC,GAAGJ,UAAU,CAACK,KAAK,CAAC,GAAG,CAAC;IAAE,OAAO,GAAGD,GAAG,IAAID,KAAK,IAAID,IAAI,EAAE;EAAE,CAAC,CAC3F,OAAO3B,CAAC,EAAE;IAAEtB,OAAO,CAACC,KAAK,CAAC,wBAAwB,EAAEqB,CAAC,CAAC;IAAE,OAAO,KAAK;EAAE;AAC1E;AAEA,SAAS+B,yBAAyBA,CAACC,YAAY,EAAEC,YAAY,EAAE;EAC3D,IAAI,CAACD,YAAY,IAAIA,YAAY,KAAK,KAAK,IAAI,CAAC,qBAAqB,CAACN,IAAI,CAACM,YAAY,CAAC,IAAIvD,KAAK,CAACwD,YAAY,CAAC,IAAIA,YAAY,GAAG,CAAC,EAAE;IAAE,OAAO,KAAK;EAAE;EACrJ,IAAI;IACA,MAAMC,YAAY,GAAG,IAAIC,IAAI,CAACH,YAAY,CAAC;IAC3C,MAAMI,UAAU,GAAG,IAAID,IAAI,CAACD,YAAY,CAACG,OAAO,CAAC,CAAC,CAAC;IACnDD,UAAU,CAACE,OAAO,CAACF,UAAU,CAACG,OAAO,CAAC,CAAC,GAAGN,YAAY,CAAC;IACvD,MAAMO,OAAO,GAAGJ,UAAU,CAACK,WAAW,CAAC,CAAC;IACxC,MAAMC,QAAQ,GAAGC,MAAM,CAACP,UAAU,CAACQ,QAAQ,CAAC,CAAC,GAAG,CAAC,CAAC,CAACC,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC;IACnE,MAAMC,MAAM,GAAGH,MAAM,CAACP,UAAU,CAACG,OAAO,CAAC,CAAC,CAAC,CAACM,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC;IAC5D,MAAME,kBAAkB,GAAG,GAAGP,OAAO,IAAIE,QAAQ,IAAII,MAAM,EAAE;IAC7D,OAAOtB,mBAAmB,CAACuB,kBAAkB,CAAC;EAClD,CAAC,CAAC,OAAOC,SAAS,EAAE;IAAEtE,OAAO,CAACC,KAAK,CAAC,6BAA6B,EAAEqE,SAAS,CAAC;IAAE,OAAO,KAAK;EAAE;AACjG;;AAGA;AACA,MAAMC,gBAAgB,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC3B,MAAMC,QAAQ,GAAG7K,WAAW,CAAC,CAAC;EAC9B,MAAM8K,QAAQ,GAAG/K,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC;;EAE/B;EACA,MAAM,CAACgL,yBAAyB,EAAEC,4BAA4B,CAAC,GAAGnL,QAAQ,CAAC,IAAI,CAAC;EAChF,MAAM,CAACoL,yBAAyB,EAAEC,4BAA4B,CAAC,GAAGrL,QAAQ,CAAC,IAAI,CAAC;EAChF,MAAM,CAACsL,SAAS,EAAEC,YAAY,CAAC,GAAGvL,QAAQ,CAAC,IAAI,CAAC;EAChD,MAAM,CAACwG,KAAK,EAAEgF,QAAQ,CAAC,GAAGxL,QAAQ,CAAC,IAAI,CAAC;EACxC,MAAM,CAACyL,SAAS,EAAEC,YAAY,CAAC,GAAG1L,QAAQ,CAAC,EAAE,CAAC;EAC9C,MAAM,CAAC2L,SAAS,EAAEC,YAAY,CAAC,GAAG5L,QAAQ,CAAC,EAAE,CAAC;EAC9C,MAAM,CAAC6L,OAAO,EAAEC,UAAU,CAAC,GAAG9L,QAAQ,CAAC,KAAK,CAAC;EAC7C,MAAM,CAAC+L,mBAAmB,EAAEC,sBAAsB,CAAC,GAAGhM,QAAQ,CAAC,IAAI,CAAC;EACpE,MAAM,CAACiM,cAAc,EAAEC,iBAAiB,CAAC,GAAGlM,QAAQ,CAAC,OAAO,CAAC;EAC7D,MAAM,CAACmM,iBAAiB,EAAEC,oBAAoB,CAAC,GAAGpM,QAAQ,CAAC,IAAI,CAAC;;EAEhE;EACA,MAAMqM,kBAAkB,GAAG;IACvBC,WAAW,EAAE,iBAAiB;IAAEC,EAAE,EAAE,QAAQ;IAAEC,SAAS,EAAE,eAAe;IACxEC,eAAe,EAAE,cAAc;IAAEC,UAAU,EAAE,gBAAgB;IAAEC,UAAU,EAAE;EAC/E,CAAC;;EAED;EACA1M,SAAS,CAAC,MAAM;IACZ,IAAI2M,SAAS,GAAG,IAAI;IACpBrB,YAAY,CAAC,IAAI,CAAC;IAAEC,QAAQ,CAAC,IAAI,CAAC;IAAEQ,sBAAsB,CAAC,IAAI,CAAC;IAChEb,4BAA4B,CAAC,IAAI,CAAC;IAAEE,4BAA4B,CAAC,IAAI,CAAC;IACtES,UAAU,CAAC,KAAK,CAAC;IAAEM,oBAAoB,CAAC,IAAI,CAAC;IAE7C,MAAMS,mBAAmB,GAAG,MAAAA,CAAA,KAAY;MACpC,MAAM,IAAIC,OAAO,CAACC,OAAO,IAAIC,UAAU,CAACD,OAAO,EAAE,EAAE,CAAC,CAAC;MACrD,IAAI,CAACH,SAAS,EAAE;MAEhB,IAAIK,YAAY,EAAEC,UAAU,EAAEC,kBAAkB,EAAEC,YAAY,EAAEC,cAAc,EAAEC,iBAAiB;MACjG,IAAI;QACA;QACAL,YAAY,GAAGM,YAAY,CAACC,OAAO,CAACnB,kBAAkB,CAACC,WAAW,CAAC;QACnEY,UAAU,GAAGK,YAAY,CAACC,OAAO,CAACnB,kBAAkB,CAACE,EAAE,CAAC;QACxDY,kBAAkB,GAAGI,YAAY,CAACC,OAAO,CAACnB,kBAAkB,CAACG,SAAS,CAAC;QACvEY,YAAY,GAAGG,YAAY,CAACC,OAAO,CAACnB,kBAAkB,CAACI,eAAe,CAAC;QACvEY,cAAc,GAAGE,YAAY,CAACC,OAAO,CAACnB,kBAAkB,CAACK,UAAU,CAAC,IAAI,KAAK;QAC7EY,iBAAiB,GAAGC,YAAY,CAACC,OAAO,CAACnB,kBAAkB,CAACM,UAAU,CAAC,IAAI,KAAK;QAEhF,IAAIC,SAAS,EAAE;UAAElB,YAAY,CAAC2B,cAAc,CAAC;UAAEzB,YAAY,CAAC0B,iBAAiB,CAAC;QAAE;;QAEhF;QACA,MAAMG,aAAa,GAAG,EAAE;QACxB,IAAIR,YAAY,KAAK,IAAI,EAAEQ,aAAa,CAAC/E,IAAI,CAAC,aAAa,CAAC;QAC5D,IAAIwE,UAAU,KAAK,IAAI,EAAEO,aAAa,CAAC/E,IAAI,CAAC,IAAI,CAAC;QACjD,IAAIyE,kBAAkB,KAAK,IAAI,EAAEM,aAAa,CAAC/E,IAAI,CAAC,WAAW,CAAC;QAChE,IAAI0E,YAAY,KAAK,IAAI,EAAEK,aAAa,CAAC/E,IAAI,CAAC,UAAU,CAAC;QACzD,IAAI+E,aAAa,CAACxL,MAAM,GAAG,CAAC,EAAE;UAAE,MAAM,IAAIyL,KAAK,CAAC,2CAA2CD,aAAa,CAACE,IAAI,CAAC,IAAI,CAAC,0CAA0C,CAAC;QAAE;;QAEhK;QACA,MAAMC,IAAI,GAAGC,UAAU,CAACZ,YAAY,CAAC;QACrC,MAAMa,OAAO,GAAGD,UAAU,CAACX,UAAU,CAAC;QACtC,MAAMa,IAAI,GAAGC,QAAQ,CAACZ,YAAY,EAAE,EAAE,CAAC;QACvC,IAAIa,aAAa,GAAG,CAAC;QACrB,IAAI;UACA,MAAMC,aAAa,GAAGC,IAAI,CAACC,KAAK,CAACjB,kBAAkB,CAAC;UACpD,IAAI,OAAOe,aAAa,KAAK,QAAQ,IAAIA,aAAa,KAAK,IAAI,EAAE,MAAM,IAAIR,KAAK,CAAC,gCAAgC,CAAC;UAClHO,aAAa,GAAGI,MAAM,CAACC,MAAM,CAACJ,aAAa,CAAC,CAACK,MAAM,CAAC,CAACC,GAAG,EAAEjG,GAAG,KAAKiG,GAAG,IAAIpI,MAAM,CAACmC,GAAG,CAAC,IAAI,CAAC,CAAC,EAAE,CAAC,CAAC;UAC9F,IAAI0F,aAAa,IAAI,CAAC,EAAE1H,OAAO,CAAC6B,IAAI,CAAC,0DAA0D,CAAC;QACpG,CAAC,CAAC,OAAOqG,UAAU,EAAE;UAAE,MAAM,IAAIf,KAAK,CAAC,2BAA2Be,UAAU,CAACC,OAAO,EAAE,CAAC;QAAE;QACzF,IAAIpI,KAAK,CAACsH,IAAI,CAAC,IAAItH,KAAK,CAACwH,OAAO,CAAC,IAAIxH,KAAK,CAAC2H,aAAa,CAAC,IAAI3H,KAAK,CAACyH,IAAI,CAAC,IAAIA,IAAI,GAAG,CAAC,EAAE;UAAE,MAAM,IAAIL,KAAK,CAAC,+BAA+B,CAAC;QAAE;QAE1I,MAAMiB,kBAAkB,GAAGZ,IAAI;;QAE/B;QACA,MAAMa,iBAAiB,GAAGhF,yBAAyB,CAAC0D,iBAAiB,EAAEqB,kBAAkB,CAAC;QAC1F,IAAI/B,SAAS,EAAE;UAAEd,UAAU,CAAC8C,iBAAiB,CAAC;QAAE;;QAEhD;QACA,MAAMC,gBAAgB,GAAG;UAAE,eAAe,EAAEjB,IAAI;UAAE,IAAI,EAAEE,OAAO;UAAE,8BAA8B,EAAEG,aAAa;UAAE,YAAY,EAAEU;QAAoB,CAAC;;QAEnJ;QACA;QACA,MAAMG,eAAe,GAAGlI,aAAa,CAACiI,gBAAgB,EAAErN,qBAAqB,CAAC;QAC9E;QACA,MAAMuN,eAAe,GAAGnI,aAAa,CAACiI,gBAAgB,EAAEjN,qBAAqB,CAAC;;QAE9E;QACA,IAAIgL,SAAS,EAAE;UACXzB,4BAA4B,CAAC2D,eAAe,CAAC;UAC7CzD,4BAA4B,CAAC0D,eAAe,CAAC;UAC7C,IAAID,eAAe,IAAIA,eAAe,CAAC7M,MAAM,GAAG,CAAC,EAAE;YAC/C,MAAM+M,kBAAkB,GAAGF,eAAe,CAACA,eAAe,CAAC7M,MAAM,GAAG,CAAC,CAAC;YACtE,IAAI+M,kBAAkB,IAAI5I,MAAM,CAACoC,QAAQ,CAACwG,kBAAkB,CAACjG,aAAa,CAAC,EAAE;cAAEiD,sBAAsB,CAACgD,kBAAkB,CAACjG,aAAa,CAAC;YAAE,CAAC,MACrI;cAAExC,OAAO,CAAC6B,IAAI,CAAC,qCAAqC,CAAC;cAAE4D,sBAAsB,CAAC,IAAI,CAAC;YAAE;UAC9F,CAAC,MAAM;YAAEzF,OAAO,CAAC6B,IAAI,CAAC,qCAAqC,CAAC;YAAE4D,sBAAsB,CAAC,IAAI,CAAC;UAAE;UAC5F;QACJ;MACJ,CAAC,CAAC,OAAOiD,GAAG,EAAE;QACV1I,OAAO,CAACC,KAAK,CAAC,oCAAoC,EAAEyI,GAAG,CAAC;QACxD,IAAIrC,SAAS,EAAEpB,QAAQ,CAACyD,GAAG,CAACP,OAAO,IAAI,+BAA+B,CAAC;MAC3E,CAAC,SAAS;QACN,IAAI9B,SAAS,EAAErB,YAAY,CAAC,KAAK,CAAC;MACtC;IACJ,CAAC;IACDsB,mBAAmB,CAAC,CAAC;IACrB,OAAO,MAAM;MAAED,SAAS,GAAG,KAAK,CAAC,CAAC;IAAkD,CAAC;EACzF,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA,MAAMsC,eAAe,GAAGA,CAAA,KAAMlE,QAAQ,CAAC,oBAAoB,CAAC;;EAE5D;AACJ;AACA;AACA;EACI,MAAMmE,gBAAgB,GAAIC,KAAK,IAAK;IAChC,MAAMC,KAAK,GAAGpE,QAAQ,CAACqE,OAAO;IAC9B,IAAI,CAACD,KAAK,EAAE;MAAE9I,OAAO,CAAC6B,IAAI,CAAC,2BAA2B,CAAC;MAAE;IAAQ;IAEjE,MAAMmH,QAAQ,GAAGxO,iBAAiB,CAACsO,KAAK,EAAED,KAAK,CAAC;IAChD,IAAIG,QAAQ,CAACtN,MAAM,GAAG,CAAC,EAAE;MACrB,MAAM;QAAEuN,YAAY;QAAEC;MAAM,CAAC,GAAGF,QAAQ,CAAC,CAAC,CAAC;MAC3C,MAAMG,OAAO,GAAGL,KAAK,CAACM,MAAM,CAAC5N,IAAI,CAAC6N,QAAQ,CAACJ,YAAY,CAAC;MACxD,MAAMK,SAAS,GAAGH,OAAO,aAAPA,OAAO,uBAAPA,OAAO,CAAE3N,IAAI,CAAC0N,KAAK,CAAC;;MAEtC;MACA,IAAII,SAAS,IAAI5D,cAAc,KAAK,OAAO,EAAE;QACzC,MAAM6D,WAAW,GAAGD,SAAS,CAAC7N,CAAC;QAC/B,MAAM+N,aAAa,GAAG,IAAI,CAAC,CAAC;;QAE5B;QACA,MAAMC,kBAAkB,GAAGN,OAAO,CAAC3N,IAAI,CAACE,MAAM,GAAG,CAAC;QAClD,MAAMgO,WAAW,GAAGD,kBAAkB,IAAI,CAAC,GAAGN,OAAO,CAAC3N,IAAI,CAACiO,kBAAkB,CAAC,CAAChO,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;;QAEvF;QACA,IAAI4B,IAAI,CAACsM,GAAG,CAACJ,WAAW,GAAG,CAAC,CAAC,GAAGC,aAAa,EAAE;UAC3CxJ,OAAO,CAAC4J,GAAG,CAAC,oCAAoC,CAAC;UACjD/D,oBAAoB,CAAClL,SAAS,CAAC;QACnC,CAAC,MAAM,IAAI0C,IAAI,CAACsM,GAAG,CAACJ,WAAW,GAAG,EAAE,CAAC,GAAGC,aAAa,EAAE;UACnDxJ,OAAO,CAAC4J,GAAG,CAAC,8CAA8C,CAAC;UAC3D/D,oBAAoB,CAACjL,OAAO,CAAC,CAAC,CAAC;QACnC,CAAC,MAAM,IAAI8O,WAAW,IAAI,CAAC,IAAIrM,IAAI,CAACsM,GAAG,CAACJ,WAAW,GAAGG,WAAW,CAAC,GAAGF,aAAa,EAAE;UAChFxJ,OAAO,CAAC4J,GAAG,CAAC,gDAAgD,CAAC;UAC7D/D,oBAAoB,CAAChL,OAAO,CAAC,CAAC,CAAC;QACnC,CAAC,MAAM;UACH;UACAmF,OAAO,CAAC4J,GAAG,CAAC,gBAAgBL,WAAW,CAACrH,OAAO,CAAC,CAAC,CAAC,mBAAmB,CAAC;UACtE2D,oBAAoB,CAAC,IAAI,CAAC;QAC9B;MACJ,CAAC,MAAM;QACH;QACA;QACAA,oBAAoB,CAAC,IAAI,CAAC;MAC9B;IACJ,CAAC,MAAM;MACH;MACA;IAAA;EAER,CAAC;;EAED;EACA,MAAMgE,cAAc,GAAGA,CAAA,KAAM;IACzB,MAAMC,oBAAoB,GAAGpE,cAAc,KAAK,UAAU,GAAGb,yBAAyB,GAAGF,yBAAyB;IAClH,MAAMoF,UAAU,GAAG,SAAS;IAAE,MAAMC,SAAS,GAAG,SAAS;IAAE,MAAMC,aAAa,GAAG,SAAS;IAC1F,MAAMC,SAAS,GAAG,MAAM;IAAE,MAAMC,SAAS,GAAG,qBAAqB;IACjE,MAAMC,IAAI,GAAG;MAAEC,MAAM,EAAE,QAAQ;MAAEC,MAAM,EAAE;IAAM,CAAC;IAEhD,MAAMC,OAAO,GAAG;MACZC,UAAU,EAAE,IAAI;MAAEC,mBAAmB,EAAE,KAAK;MAC5CC,OAAO,EAAE;QACLC,MAAM,EAAE;UAAEC,OAAO,EAAE,IAAI;UAAEC,MAAM,EAAE;YAAEC,KAAK,EAAEZ,SAAS;YAAEE,IAAI,EAAEA;UAAK;QAAE,CAAC;QACnEW,OAAO,EAAE;UAAEC,OAAO,EAAE,IAAI;UAAEC,QAAQ,EAAEb,IAAI;UAAEc,SAAS,EAAEd;QAAK,CAAC;QAC3De,KAAK,EAAE;UAAEP,OAAO,EAAE,IAAI;UAAEQ,IAAI,EAAE,EAAE;UAAEN,KAAK,EAAEZ,SAAS;UAAEE,IAAI,EAAE;YAAE,GAAGA,IAAI;YAAEiB,IAAI,EAAE,EAAE;YAAEf,MAAM,EAAE;UAAK;QAAE;MAClG,CAAC;MACDgB,MAAM,EAAE;QACJ7P,CAAC,EAAE;UACC8P,IAAI,EAAE,QAAQ;UAAEJ,KAAK,EAAE;YAAEP,OAAO,EAAE,IAAI;YAAEQ,IAAI,EAAE,aAAa;YAAEN,KAAK,EAAEZ,SAAS;YAAEE,IAAI,EAAEA;UAAK,CAAC;UAC3FoB,KAAK,EAAE;YAAEV,KAAK,EAAEZ,SAAS;YAAEE,IAAI,EAAEA,IAAI;YAAEqB,SAAS,EAAE;UAAE,CAAC;UAAE;UACvDC,IAAI,EAAE;YAAEZ,KAAK,EAAEX;UAAU,CAAC;UAAEwB,GAAG,EAAE,CAAC;UAAErN,GAAG,EAAEsN;QAC7C,CAAC;QACDC,MAAM,EAAE;UAAEN,IAAI,EAAE,QAAQ;UAAEO,QAAQ,EAAE,MAAM;UAAEX,KAAK,EAAE;YAAEP,OAAO,EAAE,IAAI;YAAEQ,IAAI,EAAE,oBAAoB;YAAEN,KAAK,EAAEf,UAAU;YAAEK,IAAI,EAAEA;UAAK,CAAC;UAAEoB,KAAK,EAAE;YAAEV,KAAK,EAAEf,UAAU;YAAEK,IAAI,EAAEA;UAAK,CAAC;UAAEsB,IAAI,EAAE;YAAEK,eAAe,EAAE,IAAI;YAAEjB,KAAK,EAAEX;UAAU,CAAC;UAAE6B,WAAW,EAAE,IAAI;UAAEpB,OAAO,EAAE;QAAM,CAAC;QACjQqB,KAAK,EAAE;UAAEV,IAAI,EAAE,QAAQ;UAAEO,QAAQ,EAAE,MAAM;UAAEX,KAAK,EAAE;YAAEP,OAAO,EAAE,IAAI;YAAEQ,IAAI,EAAE,kBAAkB;YAAEN,KAAK,EAAEd,SAAS;YAAEI,IAAI,EAAEA;UAAK,CAAC;UAAEoB,KAAK,EAAE;YAAEV,KAAK,EAAEd,SAAS;YAAEI,IAAI,EAAEA;UAAK,CAAC;UAAEsB,IAAI,EAAE;YAAEK,eAAe,EAAE;UAAM,CAAC;UAAEnB,OAAO,EAAE;QAAM,CAAC;QACxNsB,SAAS,EAAE;UAAEX,IAAI,EAAE,QAAQ;UAAEO,QAAQ,EAAE,MAAM;UAAEX,KAAK,EAAE;YAAEP,OAAO,EAAE,IAAI;YAAEQ,IAAI,EAAE,kBAAkB;YAAEN,KAAK,EAAEb,aAAa;YAAEG,IAAI,EAAEA;UAAK,CAAC;UAAEoB,KAAK,EAAE;YAAEV,KAAK,EAAEb,aAAa;YAAEG,IAAI,EAAEA,IAAI;YAAE+B,QAAQ,EAAGC,KAAK,IAAKA,KAAK,CAAClK,OAAO,CAAC,CAAC;UAAE,CAAC;UAAEwJ,IAAI,EAAE;YAAEK,eAAe,EAAE,IAAI;YAAEjB,KAAK,EAAEX;UAAU,CAAC;UAAE6B,WAAW,EAAE,IAAI;UAAEK,YAAY,EAAE,CAAC;UAAEzB,OAAO,EAAE;QAAM;MACnU,CAAC;MACD0B,WAAW,EAAE;QAAEC,IAAI,EAAE,SAAS;QAAEC,IAAI,EAAE,GAAG;QAAEC,SAAS,EAAE;MAAM;IAChE,CAAC;IAEDlC,OAAO,CAACe,MAAM,CAACO,MAAM,CAACjB,OAAO,GAAG,KAAK;IAAEL,OAAO,CAACe,MAAM,CAACW,KAAK,CAACrB,OAAO,GAAG,KAAK;IAAEL,OAAO,CAACe,MAAM,CAACY,SAAS,CAACtB,OAAO,GAAG,KAAK;IAErH,IAAI,CAACd,oBAAoB,IAAIA,oBAAoB,CAACpO,MAAM,KAAK,CAAC,EAAE;MAAE,OAAO;QAAEF,IAAI,EAAE;UAAE6N,QAAQ,EAAE;QAAG,CAAC;QAAEkB,OAAO,EAAEA;MAAQ,CAAC;IAAE;IAEvH,IAAIlB,QAAQ,GAAG,EAAE;IAAE,IAAIqD,SAAS,GAAG,CAAC,GAAG5C,oBAAoB,CAAC;IAAE,IAAI6C,cAAc,GAAG,EAAE;IACrF,QAAQjH,cAAc;MAClB,KAAK,OAAO;QACRiH,cAAc,GAAG,cAAc;QAAEpC,OAAO,CAACG,OAAO,CAACS,KAAK,CAACC,IAAI,GAAG,oBAAoBuB,cAAc,GAAG;QAAEpC,OAAO,CAACe,MAAM,CAACO,MAAM,CAACjB,OAAO,GAAG,IAAI;QACzIvB,QAAQ,GAAG,CAAC;UAAEuD,KAAK,EAAE,oBAAoB;UAAEpR,IAAI,EAAEkR,SAAS,CAACrK,GAAG,CAAC1C,CAAC,KAAK;YAAElE,CAAC,EAAEkE,CAAC,CAAC+B,IAAI;YAAEtF,CAAC,EAAEyD,MAAM,CAACoC,QAAQ,CAACtC,CAAC,CAAC6C,aAAa,CAAC,GAAG7C,CAAC,CAAC6C,aAAa,GAAG;UAAK,CAAC,CAAC,CAAC;UAAEqK,WAAW,EAAE9C,UAAU;UAAE+C,eAAe,EAAE,wBAAwB;UAAEC,OAAO,EAAE;QAAU,CAAC,CAAC;QAC7OxC,OAAO,CAACe,MAAM,CAAC7P,CAAC,CAAC6C,GAAG,GAAGoO,SAAS,CAAChR,MAAM,GAAG,CAAC,GAAGgR,SAAS,CAACA,SAAS,CAAChR,MAAM,GAAG,CAAC,CAAC,CAACgG,IAAI,GAAGkK,SAAS;QAC9F;MACJ,KAAK,MAAM;QACPe,cAAc,GAAG,cAAc;QAAEpC,OAAO,CAACG,OAAO,CAACS,KAAK,CAACC,IAAI,GAAG,0BAA0BuB,cAAc,GAAG;QAAEpC,OAAO,CAACe,MAAM,CAACW,KAAK,CAACrB,OAAO,GAAG,IAAI;QAC9IvB,QAAQ,GAAG,CAAC;UAAEuD,KAAK,EAAE,kBAAkB;UAAEpR,IAAI,EAAEkR,SAAS,CAACrK,GAAG,CAAC1C,CAAC,KAAK;YAAElE,CAAC,EAAEkE,CAAC,CAAC+B,IAAI;YAAEtF,CAAC,EAAEyD,MAAM,CAACoC,QAAQ,CAACtC,CAAC,CAACkD,IAAI,CAAC,GAAGlD,CAAC,CAACkD,IAAI,GAAG;UAAK,CAAC,CAAC,CAAC;UAAEgK,WAAW,EAAE7C,SAAS;UAAE8C,eAAe,EAAE,wBAAwB;UAAEC,OAAO,EAAE;QAAS,CAAC,CAAC;QACvNxC,OAAO,CAACe,MAAM,CAAC7P,CAAC,CAAC6C,GAAG,GAAGoO,SAAS,CAAChR,MAAM,GAAG,CAAC,GAAGgR,SAAS,CAACA,SAAS,CAAChR,MAAM,GAAG,CAAC,CAAC,CAACgG,IAAI,GAAGkK,SAAS;QAC9F;MACJ,KAAK,UAAU;QACXe,cAAc,GAAG,cAAc;QAAEpC,OAAO,CAACG,OAAO,CAACS,KAAK,CAACC,IAAI,GAAG,oBAAoBuB,cAAc,GAAG;QAAEpC,OAAO,CAACe,MAAM,CAACY,SAAS,CAACtB,OAAO,GAAG,IAAI;QAC5I,IAAIoC,WAAW,GAAGN,SAAS,CAACO,SAAS,CAACtN,CAAC,IAAIA,CAAC,CAAC8C,QAAQ,IAAI,GAAG,CAAC;QAAE,IAAIyK,SAAS,GAAGR,SAAS,CAAChR,MAAM,GAAG,CAAC,GAAGgR,SAAS,CAACA,SAAS,CAAChR,MAAM,GAAG,CAAC,CAAC,CAACgG,IAAI,GAAG,CAAC;QAAE,IAAIyL,YAAY,GAAG,gBAAgB;QACnL,IAAIH,WAAW,KAAK,CAAC,CAAC,EAAE;UAAEN,SAAS,GAAGA,SAAS,CAACU,KAAK,CAAC,CAAC,EAAEJ,WAAW,GAAG,CAAC,CAAC;UAAEE,SAAS,GAAGR,SAAS,CAACA,SAAS,CAAChR,MAAM,GAAG,CAAC,CAAC,CAACgG,IAAI;UAAEyL,YAAY,GAAG,iBAAiB;QAAE,CAAC,MAC3J;UAAE,MAAME,UAAU,GAAGX,SAAS,CAACO,SAAS,CAACtN,CAAC,IAAIA,CAAC,CAAC+B,IAAI,IAAI,EAAE,CAAC;UAAE,IAAI2L,UAAU,KAAK,CAAC,CAAC,EAAE;YAAEX,SAAS,GAAGA,SAAS,CAACU,KAAK,CAAC,CAAC,EAAEC,UAAU,GAAG,CAAC,CAAC;YAAEH,SAAS,GAAGR,SAAS,CAACA,SAAS,CAAChR,MAAM,GAAG,CAAC,CAAC,CAACgG,IAAI;YAAEyL,YAAY,GAAG,cAAc;UAAE;QAAE;QAC9N5C,OAAO,CAACe,MAAM,CAAC7P,CAAC,CAAC6C,GAAG,GAAG4O,SAAS;QAAE,IAAIC,YAAY,KAAK,gBAAgB,EAAE;UAAE5C,OAAO,CAACG,OAAO,CAACS,KAAK,CAACC,IAAI,IAAI,gBAAgB+B,YAAY,GAAG;QAAE;QAC1I9D,QAAQ,GAAG,CAAC;UAAEuD,KAAK,EAAE,kBAAkB;UAAEpR,IAAI,EAAEkR,SAAS,CAACrK,GAAG,CAAC1C,CAAC,KAAK;YAAElE,CAAC,EAAEkE,CAAC,CAAC+B,IAAI;YAAEtF,CAAC,EAAEyD,MAAM,CAACoC,QAAQ,CAACtC,CAAC,CAAC8C,QAAQ,CAAC,GAAG9C,CAAC,CAAC8C,QAAQ,GAAG;UAAK,CAAC,CAAC,CAAC;UAAEoK,WAAW,EAAE5C,aAAa;UAAE6C,eAAe,EAAE,yBAAyB;UAAEC,OAAO,EAAE;QAAa,CAAC,CAAC;QACxO;MACJ;QAAS1D,QAAQ,GAAG,EAAE;IAC1B;IAEA,MAAMiE,aAAa,GAAGjE,QAAQ,IAAIA,QAAQ,CAAC3N,MAAM,GAAG,CAAC,GAAG2N,QAAQ,CAAChH,GAAG,CAACkL,EAAE;MAAA,IAAAC,QAAA,EAAAC,SAAA;MAAA,OAAK;QAAE,GAAGF,EAAE;QAAEG,OAAO,EAAE,GAAG;QAAEC,WAAW,EAAE,EAAAH,QAAA,GAAAD,EAAE,CAAC/R,IAAI,cAAAgS,QAAA,uBAAPA,QAAA,CAAS9R,MAAM,IAAG,GAAG,GAAG,GAAG,GAAI,EAAA+R,SAAA,GAAAF,EAAE,CAAC/R,IAAI,cAAAiS,SAAA,uBAAPA,SAAA,CAAS/R,MAAM,IAAG,EAAE,GAAG,CAAC,GAAG,CAAE;QAAEkS,gBAAgB,EAAE,CAAC;QAAEC,WAAW,EAAE,GAAG;QAAEC,QAAQ,EAAE;MAAK,CAAC;IAAA,CAAC,CAAC,CAACC,MAAM,CAACR,EAAE,IAAIA,EAAE,CAAC/R,IAAI,IAAI+R,EAAE,CAAC/R,IAAI,CAACE,MAAM,GAAG,CAAC,CAAC,GAAG,EAAE;IACxR,IAAI4R,aAAa,CAAC5R,MAAM,KAAK,CAAC,IAAIoO,oBAAoB,IAAIA,oBAAoB,CAACpO,MAAM,GAAG,CAAC,EAAE;MAAEsE,OAAO,CAAC4J,GAAG,CAAC,4CAA4ClE,cAAc,EAAE,CAAC;IAAE;IACxK,OAAO;MAAElK,IAAI,EAAE;QAAE6N,QAAQ,EAAEiE;MAAc,CAAC;MAAE/C,OAAO,EAAEA;IAAQ,CAAC;EAClE,CAAC;EACD;;EAGA;EACA,MAAMyD,WAAW,GAAGnE,cAAc,CAAC,CAAC;EACpC,MAAMoE,mBAAmB,GAAGtJ,yBAAyB,IAAIE,yBAAyB;EAElF,oBACI9J,OAAA;IAAKmT,SAAS,EAAC,mBAAmB;IAAAC,QAAA,gBAE9BpT,OAAA;MAAQmT,SAAS,EAAC,mBAAmB;MAAAC,QAAA,gBACjCpT,OAAA;QAAKmT,SAAS,EAAC,SAAS;QAAAC,QAAA,GAAC,GAAC,eAAApT,OAAA;UAAQqT,OAAO,EAAEzF,eAAgB;UAACuF,SAAS,EAAC,aAAa;UAAC/C,KAAK,EAAC,kBAAkB;UAAAgD,QAAA,EAAC;QAAM;UAAAE,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC,KAAC,eAAAzT,OAAA;UAAKmT,SAAS,EAAC,MAAM;UAAAC,QAAA,GAAC,GAAC,eAAApT,OAAA;YAAK0T,GAAG,EAAE/T,OAAQ;YAACgU,GAAG,EAAC;UAAmB;YAAAL,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAE,CAAC,KAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAK,CAAC,KAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAK,CAAC,eAC/MzT,OAAA;QAAKmT,SAAS,EAAC,YAAY;QAAAC,QAAA,GAAC,GAAC,eAAApT,OAAA;UAAMmT,SAAS,EAAC,YAAY;UAAAC,QAAA,GAAC,SAAO,EAACjJ,SAAS;QAAA;UAAAmJ,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAO,CAAC,KAAC,eAAAzT,OAAA;UAAMmT,SAAS,EAAC,YAAY;UAAAC,QAAA,GAAC,SAAO,EAACrL,mBAAmB,CAACsC,SAAS,CAAC;QAAA;UAAAiJ,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAO,CAAC,KAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAK,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAClK,CAAC,eAGTzT,OAAA;MAAMmT,SAAS,EAAC,mBAAmB;MAAAC,QAAA,gBAE/BpT,OAAA;QAAKmT,SAAS,EAAC,6BAA6B;QAAAC,QAAA,EACvCvI,iBAAiB,gBAAK7K,OAAA;UAAK0T,GAAG,EAAE7I,iBAAkB;UAAC8I,GAAG,EAAC,iCAAiC;UAACC,KAAK,EAAE;YAAEC,QAAQ,EAAE,MAAM;YAAEC,SAAS,EAAE,MAAM;YAAEC,SAAS,EAAE,SAAS;YAAElE,OAAO,EAAE,OAAO;YAAEmE,MAAM,EAAE;UAAO;QAAE;UAAAV,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE,CAAC,gBAAOzT,OAAA;UAAAoT,QAAA,EAAM;QAA8B;UAAAE,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAM;MAAG;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACvP,CAAC,eAGNzT,OAAA;QAAKmT,SAAS,EAAC,sBAAsB;QAAAC,QAAA,gBAEjCpT,OAAA;UAAKmT,SAAS,EAAC,gBAAgB;UAAAC,QAAA,gBAC1BpT,OAAA;YAAQqT,OAAO,EAAEA,CAAA,KAAM;cAAEzI,iBAAiB,CAAC,OAAO,CAAC;cAAEE,oBAAoB,CAAC,IAAI,CAAC;YAAE,CAAE;YAACqI,SAAS,EAAE,cAAcxI,cAAc,KAAK,OAAO,GAAG,mBAAmB,GAAG,EAAE,EAAG;YAAAyI,QAAA,EAAC;UAAO;YAAAE,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ,CAAC,eACtLzT,OAAA;YAAQqT,OAAO,EAAEA,CAAA,KAAM;cAAEzI,iBAAiB,CAAC,MAAM,CAAC;cAAEE,oBAAoB,CAAC,IAAI,CAAC;YAAE,CAAE;YAACqI,SAAS,EAAE,cAAcxI,cAAc,KAAK,MAAM,GAAG,mBAAmB,GAAG,EAAE,EAAG;YAAAyI,QAAA,EAAC;UAAa;YAAAE,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ,CAAC,eAC1LzT,OAAA;YAAQqT,OAAO,EAAEA,CAAA,KAAM;cAAEzI,iBAAiB,CAAC,UAAU,CAAC;cAAEE,oBAAoB,CAAC,IAAI,CAAC;YAAE,CAAE;YAACqI,SAAS,EAAE,cAAcxI,cAAc,KAAK,UAAU,GAAG,mBAAmB,GAAG,EAAE,EAAG;YAAAyI,QAAA,EAAC;UAAU;YAAAE,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAC/L,CAAC,eAGNzT,OAAA;UAAKmT,SAAS,EAAC,yBAAyB;UAAAC,QAAA,GACnCpJ,SAAS,iBAAIhK,OAAA;YAAGmT,SAAS,EAAC,iBAAiB;YAAAC,QAAA,EAAC;UAAsB;YAAAE,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAG,CAAC,EACtEvO,KAAK,iBAAIlF,OAAA;YAAGmT,SAAS,EAAC,eAAe;YAAAC,QAAA,GAAC,SAAO,EAAClO,KAAK;UAAA;YAAAoO,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAI,CAAC,EACxD,CAACzJ,SAAS,IAAI,CAAC9E,KAAK,IAAIgO,mBAAmB,KAAMD,WAAW,CAACxS,IAAI,CAAC6N,QAAQ,CAAC3N,MAAM,GAAG,CAAC,gBAAKX,OAAA;YAAKmT,SAAS,EAAC,iBAAiB;YAAAC,QAAA,GAAC,GAAC,eAAApT,OAAA,CAAClB,IAAI;cAACmV,GAAG,EAAEtK,QAAS;cAAC6F,OAAO,EAAEyD,WAAW,CAACzD,OAAQ;cAAC/O,IAAI,EAAEwS,WAAW,CAACxS,IAAK;cAAC4S,OAAO,EAAExF;YAAiB;cAAAyF,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAE,CAAC,KAAC;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAK,CAAC,gBAAOzT,OAAA;YAAGmT,SAAS,EAAC,iBAAiB;YAAAC,QAAA,GAAC,yCAAuC,EAACzI,cAAc,EAAC,UAAQ;UAAA;YAAA2I,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAG,CAAG,CAAE,EACxV,CAACzJ,SAAS,IAAI,CAAC9E,KAAK,IAAI,CAACgO,mBAAmB,iBAAIlT,OAAA;YAAGmT,SAAS,EAAC,iBAAiB;YAAAC,QAAA,EAAC;UAAiC;YAAAE,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAG,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACpH,CAAC,eAGNzT,OAAA;UAAKmT,SAAS,EAAC,8BAA8B;UAAAC,QAAA,gBACzCpT,OAAA;YAAImT,SAAS,EAAC,iBAAiB;YAAAC,QAAA,GAAC,sBAAoB,eAAApT,OAAA;cAAMmT,SAAS,EAAC,WAAW;cAAC/C,KAAK,EAAC,8GAA8G;cAAAgD,QAAA,EAAC;YAAC;cAAAE,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAM,CAAC,KAAC;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAI,CAAC,eACnNzT,OAAA;YAAKmT,SAAS,EAAC,eAAe;YAAAC,QAAA,gBAC1BpT,OAAA;cAAKmT,SAAS,EAAC,aAAa;cAAAC,QAAA,GAAC,GAAC,eAAApT,OAAA;gBAAMmT,SAAS,EAAC,cAAc;gBAAAC,QAAA,EAAC;cAAgB;gBAAAE,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAM,CAAC,KAAC,eAAAzT,OAAA;gBAAMmT,SAAS,EAAC,cAAc;gBAAAC,QAAA,GAAC,GAAC,EAACpJ,SAAS,GAAG,KAAK,GAAG9E,KAAK,GAAG,OAAO,GAAIuF,mBAAmB,KAAK,IAAI,IAAI3F,MAAM,CAACoC,QAAQ,CAACuD,mBAAmB,CAAC,GAAI,GAAGA,mBAAmB,CAACtD,OAAO,CAAC,CAAC,CAAC,GAAG,GAAG,KAAK,EAAC,GAAC;cAAA;gBAAAmM,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAM,CAAC,KAAC;YAAA;cAAAH,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAK,CAAC,eACjSzT,OAAA;cAAKmT,SAAS,EAAC,aAAa;cAAAC,QAAA,GAAC,GAAC,eAAApT,OAAA;gBAAMmT,SAAS,EAAC,cAAc;gBAAAC,QAAA,EAAC;cAAmB;gBAAAE,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAM,CAAC,KAAC,eAAAzT,OAAA;gBAAMmT,SAAS,EAAC,cAAc;gBAAAC,QAAA,GAAC,GAAC,EAACpJ,SAAS,GAAG,KAAK,GAAG9E,KAAK,GAAG,OAAO,GAAGqF,OAAO,EAAC,GAAC;cAAA;gBAAA+I,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAM,CAAC,KAAC;YAAA;cAAAH,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAK,CAAC;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACrL,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACL,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACL,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACJ,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACN,CAAC;AAEd,CAAC;AAAChK,EAAA,CAxQID,gBAAgB;EAAA,QACD3K,WAAW;AAAA;AAAAqV,EAAA,GAD1B1K,gBAAgB;AA0QtB,eAAeA,gBAAgB;AAAC,IAAA0K,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}