{"ast":null,"code":"var _jsxFileName = \"D:\\\\sds\\\\src\\\\components\\\\ConditionSetting.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { Pie } from 'react-chartjs-2';\nimport { Chart as ChartJS, ArcElement, Tooltip, Legend } from 'chart.js';\nimport { useNavigate } from 'react-router-dom';\nimport '../styles/ConditionSetting.css'; // Import the CSS file\nimport logoSrc from '../assets/images/cslogo.png'; // Ensure path is correct\n\n// Register required chart components\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nChartJS.register(ArcElement, Tooltip, Legend);\n\n// Define keys for localStorage for better management\nconst LOCAL_STORAGE_KEYS = {\n  TEMPERATURE: 'conditionSetting_temperature',\n  PH: 'conditionSetting_ph',\n  SUBSTRATE: 'conditionSetting_substrate',\n  SIMULATION_DAYS: 'conditionSetting_simulationDays',\n  BATCH_NAME: 'sim_batch_name',\n  START_DATE: 'sim_start_date'\n};\n\n// Default values\nconst DEFAULTS = {\n  TEMPERATURE: 25,\n  PH: 7.0,\n  SUBSTRATE: {\n    riceBran: 50,\n    corn: 50,\n    sugarcane: 50,\n    sawdust: 50\n  },\n  SIMULATION_DAYS: 40,\n  BATCH_NAME: '',\n  START_DATE: ''\n};\nconst ConditionSetting = () => {\n  _s();\n  const navigate = useNavigate();\n\n  // --- State Variables ---\n  // Initialize state using a function that checks localStorage first\n  const [temperature, setTemperature] = useState(() => {\n    const saved = localStorage.getItem(LOCAL_STORAGE_KEYS.TEMPERATURE);\n    // Ensure saved value is treated as a number, fallback to default\n    return saved !== null ? parseInt(saved, 10) : DEFAULTS.TEMPERATURE;\n  });\n  const [ph, setPh] = useState(() => {\n    const saved = localStorage.getItem(LOCAL_STORAGE_KEYS.PH);\n    // Ensure saved value is treated as a float, fallback to default\n    return saved !== null ? parseFloat(saved) : DEFAULTS.PH;\n  });\n  const [substrate, setSubstrate] = useState(() => {\n    const saved = localStorage.getItem(LOCAL_STORAGE_KEYS.SUBSTRATE);\n    if (saved) {\n      try {\n        // Attempt to parse the saved JSON string\n        const parsed = JSON.parse(saved);\n        // Basic check if it looks like our substrate object\n        if (typeof parsed === 'object' && parsed !== null && 'riceBran' in parsed) {\n          return parsed;\n        }\n      } catch (e) {\n        console.error(\"Failed to parse substrate from localStorage\", e);\n      }\n    }\n    // Fallback to default if nothing valid is found\n    return DEFAULTS.SUBSTRATE;\n  });\n  const [simulationDays, setSimulationDays] = useState(() => {\n    const saved = localStorage.getItem(LOCAL_STORAGE_KEYS.SIMULATION_DAYS);\n    return saved !== null ? parseInt(saved, 10) : DEFAULTS.SIMULATION_DAYS;\n  });\n  const [batchName, setBatchName] = useState(() => {\n    const saved = localStorage.getItem(LOCAL_STORAGE_KEYS.BATCH_NAME);\n    return saved !== null ? saved : DEFAULTS.BATCH_NAME;\n  });\n  const [startDate, setStartDate] = useState(() => {\n    const saved = localStorage.getItem(LOCAL_STORAGE_KEYS.START_DATE);\n    return saved !== null ? saved : DEFAULTS.START_DATE;\n  });\n\n  // Derived state (total substrate) - no need to store this separately in localStorage\n  const [totalSubstrate, setTotalSubstrate] = useState(0); // Initialized at 0, will be calculated\n\n  // --- Labels ---\n  const substrateLabels = {\n    riceBran: 'Rice Bran',\n    corn: 'Corn Cob',\n    sugarcane: 'Sugarcane',\n    sawdust: 'Sawdust'\n  };\n\n  // --- Effects ---\n  // Effect to calculate total substrate whenever substrate state changes\n  useEffect(() => {\n    const total = Object.values(substrate).reduce((sum, weight) => sum + (Number(weight) || 0), 0);\n    setTotalSubstrate(total);\n  }, [substrate]);\n\n  // --- Effects to save state to localStorage ---\n  useEffect(() => {\n    // Save temperature (only if it's a valid number, not empty string)\n    if (temperature !== '' && !isNaN(temperature)) {\n      localStorage.setItem(LOCAL_STORAGE_KEYS.TEMPERATURE, temperature.toString());\n    }\n  }, [temperature]);\n  useEffect(() => {\n    // Save pH (only if it's a valid number, not empty string)\n    if (ph !== '' && !isNaN(ph)) {\n      localStorage.setItem(LOCAL_STORAGE_KEYS.PH, ph.toString());\n    }\n  }, [ph]);\n  useEffect(() => {\n    // Save substrate object\n    localStorage.setItem(LOCAL_STORAGE_KEYS.SUBSTRATE, JSON.stringify(substrate));\n  }, [substrate]);\n  useEffect(() => {\n    // Save simulation days (only if it's a valid number, not empty string)\n    if (simulationDays !== '' && !isNaN(simulationDays)) {\n      localStorage.setItem(LOCAL_STORAGE_KEYS.SIMULATION_DAYS, simulationDays.toString());\n    }\n  }, [simulationDays]);\n  useEffect(() => {\n    // Save batch name\n    localStorage.setItem(LOCAL_STORAGE_KEYS.BATCH_NAME, batchName);\n  }, [batchName]);\n  useEffect(() => {\n    // Save start date\n    localStorage.setItem(LOCAL_STORAGE_KEYS.START_DATE, startDate);\n  }, [startDate]);\n\n  // --- Event Handlers ---\n  const handleStartClick = () => {\n    // Note: localStorage is already up-to-date due to useEffect hooks.\n    // This function now primarily handles navigation.\n    // We *could* still explicitly save here if we wanted different keys\n    // for the next page vs. remembering inputs on this page, but using\n    // the same keys simplifies things for now.\n    console.log('Starting simulation with:', {\n      substrate,\n      temperature,\n      ph,\n      totalSubstrate,\n      simulationDays,\n      batchName,\n      startDate\n    });\n    navigate('/growth-simulation');\n  };\n\n  // Generic handler for number inputs (like Temp, pH)\n  const handleNumberChange = (setter, min, max, value, allowFloat = false) => {\n    const numericValue = allowFloat ? parseFloat(value) : parseInt(value, 10);\n    // Allow temporary empty input\n    if (value === '') {\n      setter('');\n      return;\n    }\n    // If not a number after trying to parse, do nothing (keep previous state)\n    if (isNaN(numericValue)) {\n      return;\n    }\n    // Clamp the value within the specified min/max range\n    const clampedValue = Math.max(min, Math.min(max, numericValue));\n    setter(clampedValue);\n  };\n  const handleSubstrateChange = (key, value) => {\n    const numericValue = parseInt(value, 10);\n    // Allow temporary empty input\n    if (value === '') {\n      setSubstrate(prev => ({\n        ...prev,\n        [key]: ''\n      })); // Set to empty string temporarily\n    } else if (isNaN(numericValue) || numericValue < 0) {\n      // If invalid number or negative, revert to 0 if it was empty, else keep previous valid number\n      setSubstrate(prev => ({\n        ...prev,\n        [key]: prev[key] === '' ? 0 : prev[key] || 0\n      }));\n    } else {\n      // Set valid positive number\n      setSubstrate(prev => ({\n        ...prev,\n        [key]: numericValue\n      }));\n    }\n  };\n  const handleDaysChange = e => {\n    const value = e.target.value;\n    const min = 1;\n    const max = 365;\n    if (value === '') {\n      setSimulationDays(''); // Allow empty input temporarily\n      return;\n    }\n    const numericValue = parseInt(value, 10);\n    if (isNaN(numericValue)) {\n      return; // Ignore non-numeric input\n    }\n\n    // Clamp value between min and max\n    if (numericValue < min) {\n      setSimulationDays(min);\n    } else if (numericValue > max) {\n      setSimulationDays(max);\n    } else {\n      setSimulationDays(numericValue);\n    }\n  };\n\n  // --- Chart Configuration --- (remains the same as before)\n  const pieOptions = {\n    responsive: true,\n    maintainAspectRatio: false,\n    plugins: {\n      legend: {\n        position: 'bottom',\n        labels: {\n          color: '#6b4f4b',\n          font: {\n            size: 12,\n            family: \"'Lexend', sans-serif\"\n          },\n          boxWidth: 15,\n          padding: 15\n        }\n      },\n      tooltip: {\n        // Optional: Customize tooltips if needed\n        bodyFont: {\n          family: \"'Lexend', sans-serif\"\n        },\n        titleFont: {\n          family: \"'Lexend', sans-serif\"\n        }\n      }\n    }\n  };\n  const pieData = {\n    labels: Object.keys(substrate).map(key => substrateLabels[key]),\n    datasets: [{\n      // Ensure data values are numbers, use 0 if empty or invalid\n      data: totalSubstrate > 0 ? Object.values(substrate).map(v => Number(v) || 0) : [1],\n      // Show a placeholder slice if total is 0\n      backgroundColor: totalSubstrate > 0 ? ['#f3f2a4', '#c5e99b', '#452c0e', '#f0a008'] // Your theme colors\n      : ['#d3d3d3'],\n      // Grey placeholder color\n      borderColor: '#f5f2e9',\n      // Match card background or desired border\n      borderWidth: totalSubstrate > 0 ? 2 : 0 // No border for placeholder\n    }]\n  };\n\n  // --- JSX ---\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"condition-setting\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"logobox\",\n      children: [\" \", /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"logo\",\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          src: logoSrc,\n          alt: \"Logo\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 250,\n          columnNumber: 21\n        }, this), \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 249,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 248,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"condition-header\",\n      children: /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Set Your Growing Conditions!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 255,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 254,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n      className: \"condition-main-content\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"left-column\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"input-card\",\n          children: /*#__PURE__*/_jsxDEV(\"h3\", {\n            children: [\"Optimal Mushroom Growth Conditions\", /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"info-icon\",\n              title: \"Set temperature (20-40\\xB0C) and pH (6.0-7.0) for growth\",\n              children: \" i \"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 264,\n              columnNumber: 21\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 262,\n            columnNumber: 21\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 261,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"input-card\",\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: [\"Environmental Conditions\", /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"info-icon\",\n              title: \"Set temperature (20-40\\xB0C) and pH (6.0-7.0) for growth\",\n              children: \"(i)\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 271,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 269,\n            columnNumber: 26\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"input-group\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              htmlFor: \"temperature\",\n              children: \"Temperature (\\xB0C):\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 274,\n              columnNumber: 5\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              id: \"temperature\",\n              type: \"number\",\n              min: \"20\",\n              max: \"40\",\n              step: \"1\" // <-- Changed max from 30 to 40\n              ,\n              value: temperature // Controlled component\n              // The handler already correctly uses 20 and 40 as min/max\n              ,\n              onChange: e => handleNumberChange(setTemperature, 20, 40, e.target.value)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 275,\n              columnNumber: 5\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 273,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"input-group\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              htmlFor: \"ph\",\n              children: \"pH:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 283,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              id: \"ph\",\n              type: \"number\",\n              min: \"6.0\",\n              max: \"7.0\",\n              step: \"0.1\",\n              value: ph // Controlled component\n              // Use the updated handler, allow float\n              ,\n              onChange: e => handleNumberChange(setPh, 6.0, 7.0, e.target.value, true)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 284,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 282,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 268,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"input-card\",\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: [\"Substrate Composition\", /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"info-icon\",\n              title: \"Enter weight in grams for each component. Make sure the total is more than 200g.\",\n              children: \"(i)\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 297,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 295,\n            columnNumber: 26\n          }, this), Object.keys(substrate).map(key => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"input-group\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              htmlFor: `substrate-${key}`,\n              children: [substrateLabels[key], \" (g):\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 301,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              id: `substrate-${key}`,\n              type: \"number\",\n              min: \"0\",\n              value: substrate[key] // Controlled component\n              // Use the updated handler\n              ,\n              onChange: e => handleSubstrateChange(key, e.target.value)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 302,\n              columnNumber: 33\n            }, this)]\n          }, key, true, {\n            fileName: _jsxFileName,\n            lineNumber: 300,\n            columnNumber: 29\n          }, this)), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"total-substrate\",\n            children: [\"Total: \", totalSubstrate, \"g\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 310,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 294,\n          columnNumber: 22\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 260,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"right-column\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"chart-card\",\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: \"Your Substrate Composition\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 319,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"pie-chart-container\",\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"pie-chart\",\n              children: totalSubstrate > 0 ? /*#__PURE__*/_jsxDEV(Pie, {\n                data: pieData,\n                options: pieOptions\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 323,\n                columnNumber: 37\n              }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n                className: \"pie-chart-placeholder\",\n                children: \"Enter substrate values to see chart.\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 325,\n                columnNumber: 37\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 321,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 320,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"additional-inputs\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"input-group\",\n              children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                htmlFor: \"batchName\",\n                children: \"Batch Name:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 335,\n                columnNumber: 34\n              }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                id: \"batchName\",\n                type: \"text\",\n                value: batchName // Controlled\n                ,\n                onChange: e => setBatchName(e.target.value) // Direct setter is fine\n                ,\n                placeholder: \"e.g., Spring Batch 1\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 336,\n                columnNumber: 33\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 334,\n              columnNumber: 30\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"input-group\",\n              children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                htmlFor: \"startDate\",\n                children: \"Start Date:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 343,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                id: \"startDate\",\n                type: \"date\",\n                value: startDate // Controlled\n                ,\n                onChange: e => setStartDate(e.target.value) // Direct setter\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 344,\n                columnNumber: 33\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 342,\n              columnNumber: 30\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"input-group span-cols-2\",\n              children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                htmlFor: \"simulationDays\",\n                children: \"Cultivation Duration (Days):\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 351,\n                columnNumber: 34\n              }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                id: \"simulationDays\",\n                type: \"number\",\n                min: \"1\",\n                max: \"365\",\n                step: \"1\",\n                value: simulationDays // Controlled\n                ,\n                onChange: handleDaysChange // Use specific handler\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 352,\n                columnNumber: 33\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 350,\n              columnNumber: 30\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 333,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 318,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 317,\n        columnNumber: 18\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 258,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"footer\", {\n      className: \"footer-container\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"start1-button\",\n        onClick: handleStartClick,\n        children: \"Start Growing\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 366,\n        columnNumber: 18\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 364,\n      columnNumber: 14\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 247,\n    columnNumber: 9\n  }, this);\n};\n_s(ConditionSetting, \"XRbkHk4ZCYIhbcP5hL1tJS2cLyk=\", false, function () {\n  return [useNavigate];\n});\n_c = ConditionSetting;\nexport default ConditionSetting;\nvar _c;\n$RefreshReg$(_c, \"ConditionSetting\");","map":{"version":3,"names":["React","useState","useEffect","Pie","Chart","ChartJS","ArcElement","Tooltip","Legend","useNavigate","logoSrc","jsxDEV","_jsxDEV","register","LOCAL_STORAGE_KEYS","TEMPERATURE","PH","SUBSTRATE","SIMULATION_DAYS","BATCH_NAME","START_DATE","DEFAULTS","riceBran","corn","sugarcane","sawdust","ConditionSetting","_s","navigate","temperature","setTemperature","saved","localStorage","getItem","parseInt","ph","setPh","parseFloat","substrate","setSubstrate","parsed","JSON","parse","e","console","error","simulationDays","setSimulationDays","batchName","setBatchName","startDate","setStartDate","totalSubstrate","setTotalSubstrate","substrateLabels","total","Object","values","reduce","sum","weight","Number","isNaN","setItem","toString","stringify","handleStartClick","log","handleNumberChange","setter","min","max","value","allowFloat","numericValue","clampedValue","Math","handleSubstrateChange","key","prev","handleDaysChange","target","pieOptions","responsive","maintainAspectRatio","plugins","legend","position","labels","color","font","size","family","boxWidth","padding","tooltip","bodyFont","titleFont","pieData","keys","map","datasets","data","v","backgroundColor","borderColor","borderWidth","className","children","src","alt","fileName","_jsxFileName","lineNumber","columnNumber","title","htmlFor","id","type","step","onChange","options","placeholder","onClick","_c","$RefreshReg$"],"sources":["D:/sds/src/components/ConditionSetting.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { Pie } from 'react-chartjs-2';\r\nimport { Chart as ChartJS, ArcElement, Tooltip, Legend } from 'chart.js';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport '../styles/ConditionSetting.css'; // Import the CSS file\r\nimport logoSrc from '../assets/images/cslogo.png'; // Ensure path is correct\r\n\r\n// Register required chart components\r\nChartJS.register(ArcElement, Tooltip, Legend);\r\n\r\n// Define keys for localStorage for better management\r\nconst LOCAL_STORAGE_KEYS = {\r\n    TEMPERATURE: 'conditionSetting_temperature',\r\n    PH: 'conditionSetting_ph',\r\n    SUBSTRATE: 'conditionSetting_substrate',\r\n    SIMULATION_DAYS: 'conditionSetting_simulationDays',\r\n    BATCH_NAME: 'sim_batch_name',\r\n    START_DATE: 'sim_start_date',\r\n};\r\n\r\n// Default values\r\nconst DEFAULTS = {\r\n    TEMPERATURE: 25,\r\n    PH: 7.0,\r\n    SUBSTRATE: { riceBran: 50, corn: 50, sugarcane: 50, sawdust: 50 },\r\n    SIMULATION_DAYS: 40,\r\n    BATCH_NAME: '',\r\n    START_DATE: '',\r\n};\r\n\r\n\r\nconst ConditionSetting = () => {\r\n    const navigate = useNavigate();\r\n\r\n    // --- State Variables ---\r\n    // Initialize state using a function that checks localStorage first\r\n    const [temperature, setTemperature] = useState(() => {\r\n        const saved = localStorage.getItem(LOCAL_STORAGE_KEYS.TEMPERATURE);\r\n        // Ensure saved value is treated as a number, fallback to default\r\n        return saved !== null ? parseInt(saved, 10) : DEFAULTS.TEMPERATURE;\r\n    });\r\n\r\n    const [ph, setPh] = useState(() => {\r\n        const saved = localStorage.getItem(LOCAL_STORAGE_KEYS.PH);\r\n        // Ensure saved value is treated as a float, fallback to default\r\n        return saved !== null ? parseFloat(saved) : DEFAULTS.PH;\r\n    });\r\n\r\n    const [substrate, setSubstrate] = useState(() => {\r\n        const saved = localStorage.getItem(LOCAL_STORAGE_KEYS.SUBSTRATE);\r\n        if (saved) {\r\n            try {\r\n                // Attempt to parse the saved JSON string\r\n                const parsed = JSON.parse(saved);\r\n                // Basic check if it looks like our substrate object\r\n                if (typeof parsed === 'object' && parsed !== null && 'riceBran' in parsed) {\r\n                    return parsed;\r\n                }\r\n            } catch (e) {\r\n                console.error(\"Failed to parse substrate from localStorage\", e);\r\n            }\r\n        }\r\n        // Fallback to default if nothing valid is found\r\n        return DEFAULTS.SUBSTRATE;\r\n    });\r\n\r\n    const [simulationDays, setSimulationDays] = useState(() => {\r\n        const saved = localStorage.getItem(LOCAL_STORAGE_KEYS.SIMULATION_DAYS);\r\n        return saved !== null ? parseInt(saved, 10) : DEFAULTS.SIMULATION_DAYS;\r\n    });\r\n\r\n    const [batchName, setBatchName] = useState(() => {\r\n        const saved = localStorage.getItem(LOCAL_STORAGE_KEYS.BATCH_NAME);\r\n        return saved !== null ? saved : DEFAULTS.BATCH_NAME;\r\n    });\r\n\r\n    const [startDate, setStartDate] = useState(() => {\r\n        const saved = localStorage.getItem(LOCAL_STORAGE_KEYS.START_DATE);\r\n        return saved !== null ? saved : DEFAULTS.START_DATE;\r\n    });\r\n\r\n    // Derived state (total substrate) - no need to store this separately in localStorage\r\n    const [totalSubstrate, setTotalSubstrate] = useState(0); // Initialized at 0, will be calculated\r\n\r\n    // --- Labels ---\r\n    const substrateLabels = {\r\n        riceBran: 'Rice Bran',\r\n        corn: 'Corn Cob',\r\n        sugarcane: 'Sugarcane',\r\n        sawdust: 'Sawdust',\r\n    };\r\n\r\n    // --- Effects ---\r\n    // Effect to calculate total substrate whenever substrate state changes\r\n    useEffect(() => {\r\n        const total = Object.values(substrate).reduce((sum, weight) => sum + (Number(weight) || 0), 0);\r\n        setTotalSubstrate(total);\r\n    }, [substrate]);\r\n\r\n    // --- Effects to save state to localStorage ---\r\n    useEffect(() => {\r\n        // Save temperature (only if it's a valid number, not empty string)\r\n        if (temperature !== '' && !isNaN(temperature)) {\r\n           localStorage.setItem(LOCAL_STORAGE_KEYS.TEMPERATURE, temperature.toString());\r\n        }\r\n    }, [temperature]);\r\n\r\n    useEffect(() => {\r\n        // Save pH (only if it's a valid number, not empty string)\r\n         if (ph !== '' && !isNaN(ph)) {\r\n            localStorage.setItem(LOCAL_STORAGE_KEYS.PH, ph.toString());\r\n         }\r\n    }, [ph]);\r\n\r\n    useEffect(() => {\r\n        // Save substrate object\r\n        localStorage.setItem(LOCAL_STORAGE_KEYS.SUBSTRATE, JSON.stringify(substrate));\r\n    }, [substrate]);\r\n\r\n    useEffect(() => {\r\n         // Save simulation days (only if it's a valid number, not empty string)\r\n        if (simulationDays !== '' && !isNaN(simulationDays)) {\r\n             localStorage.setItem(LOCAL_STORAGE_KEYS.SIMULATION_DAYS, simulationDays.toString());\r\n        }\r\n    }, [simulationDays]);\r\n\r\n    useEffect(() => {\r\n        // Save batch name\r\n        localStorage.setItem(LOCAL_STORAGE_KEYS.BATCH_NAME, batchName);\r\n    }, [batchName]);\r\n\r\n    useEffect(() => {\r\n        // Save start date\r\n        localStorage.setItem(LOCAL_STORAGE_KEYS.START_DATE, startDate);\r\n    }, [startDate]);\r\n\r\n\r\n    // --- Event Handlers ---\r\n    const handleStartClick = () => {\r\n        // Note: localStorage is already up-to-date due to useEffect hooks.\r\n        // This function now primarily handles navigation.\r\n        // We *could* still explicitly save here if we wanted different keys\r\n        // for the next page vs. remembering inputs on this page, but using\r\n        // the same keys simplifies things for now.\r\n        console.log('Starting simulation with:', { substrate, temperature, ph, totalSubstrate, simulationDays, batchName, startDate });\r\n        navigate('/growth-simulation');\r\n    };\r\n\r\n\r\n    // Generic handler for number inputs (like Temp, pH)\r\n    const handleNumberChange = (setter, min, max, value, allowFloat = false) => {\r\n        const numericValue = allowFloat ? parseFloat(value) : parseInt(value, 10);\r\n        // Allow temporary empty input\r\n        if (value === '') {\r\n             setter('');\r\n             return;\r\n        }\r\n        // If not a number after trying to parse, do nothing (keep previous state)\r\n        if (isNaN(numericValue)) {\r\n             return;\r\n        }\r\n        // Clamp the value within the specified min/max range\r\n        const clampedValue = Math.max(min, Math.min(max, numericValue));\r\n        setter(clampedValue);\r\n    };\r\n\r\n    const handleSubstrateChange = (key, value) => {\r\n        const numericValue = parseInt(value, 10);\r\n         // Allow temporary empty input\r\n        if (value === '') {\r\n            setSubstrate((prev) => ({ ...prev, [key]: '' })); // Set to empty string temporarily\r\n        } else if (isNaN(numericValue) || numericValue < 0) {\r\n            // If invalid number or negative, revert to 0 if it was empty, else keep previous valid number\r\n            setSubstrate((prev) => ({ ...prev, [key]: prev[key] === '' ? 0 : (prev[key] || 0) }));\r\n        } else {\r\n             // Set valid positive number\r\n            setSubstrate((prev) => ({ ...prev, [key]: numericValue }));\r\n        }\r\n    };\r\n\r\n    const handleDaysChange = (e) => {\r\n        const value = e.target.value;\r\n        const min = 1;\r\n        const max = 365;\r\n\r\n        if (value === '') {\r\n             setSimulationDays(''); // Allow empty input temporarily\r\n             return;\r\n         }\r\n\r\n        const numericValue = parseInt(value, 10);\r\n\r\n        if (isNaN(numericValue)) {\r\n             return; // Ignore non-numeric input\r\n        }\r\n\r\n        // Clamp value between min and max\r\n        if (numericValue < min) {\r\n            setSimulationDays(min);\r\n        } else if (numericValue > max) {\r\n            setSimulationDays(max);\r\n        } else {\r\n            setSimulationDays(numericValue);\r\n        }\r\n    };\r\n\r\n    // --- Chart Configuration --- (remains the same as before)\r\n    const pieOptions = {\r\n        responsive: true,\r\n        maintainAspectRatio: false,\r\n        plugins: {\r\n            legend: {\r\n                position: 'bottom',\r\n                labels: {\r\n                    color: '#6b4f4b',\r\n                    font: { size: 12, family: \"'Lexend', sans-serif\" },\r\n                    boxWidth: 15,\r\n                    padding: 15\r\n                }\r\n            },\r\n            tooltip: { // Optional: Customize tooltips if needed\r\n                bodyFont: { family: \"'Lexend', sans-serif\" },\r\n                titleFont: { family: \"'Lexend', sans-serif\" }\r\n            }\r\n        },\r\n    };\r\n\r\n    const pieData = {\r\n        labels: Object.keys(substrate).map(key => substrateLabels[key]),\r\n        datasets: [\r\n            {\r\n                // Ensure data values are numbers, use 0 if empty or invalid\r\n                data: totalSubstrate > 0\r\n                    ? Object.values(substrate).map(v => Number(v) || 0)\r\n                    : [1], // Show a placeholder slice if total is 0\r\n                backgroundColor: totalSubstrate > 0\r\n                    ? ['#f3f2a4', '#c5e99b', '#452c0e', '#f0a008'] // Your theme colors\r\n                    : ['#d3d3d3'], // Grey placeholder color\r\n                borderColor: '#f5f2e9', // Match card background or desired border\r\n                borderWidth: totalSubstrate > 0 ? 2 : 0, // No border for placeholder\r\n            },\r\n        ],\r\n    };\r\n\r\n    // --- JSX ---\r\n    return (\r\n        <div className=\"condition-setting\">\r\n            <div className=\"logobox\"> {/* Consider adding a back button here or near logo */}\r\n                <div className=\"logo\">\r\n                    <img src={logoSrc} alt=\"Logo\" /> {/* Adjusted class usage */}\r\n                </div>\r\n            </div>\r\n\r\n            <header className=\"condition-header\">\r\n                <h1>Set Your Growing Conditions!</h1>\r\n            </header>\r\n\r\n            <main className=\"condition-main-content\">\r\n                {/* Left Column: Inputs */}\r\n                <div className=\"left-column\">\r\n                <div className=\"input-card\">\r\n                    <h3>\r\n                    Optimal Mushroom Growth Conditions\r\n                    <span className=\"info-icon\" title=\"Set temperature (20-40°C) and pH (6.0-7.0) for growth\"> i </span>\r\n                    </h3>\r\n</div>\r\n                    {/* Environmental Conditions */}\r\n                    <div className=\"input-card\">\r\n                         <h3>\r\n                            Environmental Conditions\r\n                            <span className=\"info-icon\" title=\"Set temperature (20-40°C) and pH (6.0-7.0) for growth\">(i)</span>\r\n                        </h3>\r\n                        <div className=\"input-group\">\r\n    <label htmlFor=\"temperature\">Temperature (°C):</label>\r\n    <input\r\n        id=\"temperature\" type=\"number\" min=\"20\" max=\"40\" step=\"1\" // <-- Changed max from 30 to 40\r\n        value={temperature} // Controlled component\r\n        // The handler already correctly uses 20 and 40 as min/max\r\n        onChange={(e) => handleNumberChange(setTemperature, 20, 40, e.target.value)}\r\n    />\r\n</div>\r\n                        <div className=\"input-group\">\r\n                            <label htmlFor=\"ph\">pH:</label>\r\n                            <input\r\n                                id=\"ph\" type=\"number\" min=\"6.0\" max=\"7.0\" step=\"0.1\"\r\n                                value={ph} // Controlled component\r\n                                // Use the updated handler, allow float\r\n                                onChange={(e) => handleNumberChange(setPh, 6.0, 7.0, e.target.value, true)}\r\n                            />\r\n                        </div>\r\n                    </div>\r\n\r\n                     {/* Substrate Composition */}\r\n                     <div className=\"input-card\">\r\n                         <h3>\r\n                            Substrate Composition\r\n                            <span className=\"info-icon\" title=\"Enter weight in grams for each component. Make sure the total is more than 200g.\">(i)</span>\r\n                        </h3>\r\n                        {Object.keys(substrate).map((key) => (\r\n                            <div key={key} className=\"input-group\">\r\n                                <label htmlFor={`substrate-${key}`}>{substrateLabels[key]} (g):</label>\r\n                                <input\r\n                                    id={`substrate-${key}`} type=\"number\" min=\"0\"\r\n                                    value={substrate[key]} // Controlled component\r\n                                    // Use the updated handler\r\n                                    onChange={(e) => handleSubstrateChange(key, e.target.value)}\r\n                                />\r\n                            </div>\r\n                        ))}\r\n                        <div className=\"total-substrate\">\r\n                            Total: {totalSubstrate}g\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n\r\n                 {/* Right Column: Chart & Other Details */}\r\n                 <div className=\"right-column\">\r\n                    <div className=\"chart-card\">\r\n                        <h3>Your Substrate Composition</h3>\r\n                        <div className=\"pie-chart-container\">\r\n                            <div className=\"pie-chart\">\r\n                                {totalSubstrate > 0 ? (\r\n                                    <Pie data={pieData} options={pieOptions} />\r\n                                ) : (\r\n                                    <p className=\"pie-chart-placeholder\">\r\n                                        Enter substrate values to see chart.\r\n                                    </p>\r\n                                )}\r\n                            </div>\r\n                        </div>\r\n\r\n                         {/* Additional Inputs */}\r\n                        <div className=\"additional-inputs\">\r\n                             <div className=\"input-group\">\r\n                                 <label htmlFor=\"batchName\">Batch Name:</label>\r\n                                <input\r\n                                    id=\"batchName\" type=\"text\" value={batchName} // Controlled\r\n                                    onChange={(e) => setBatchName(e.target.value)} // Direct setter is fine\r\n                                    placeholder=\"e.g., Spring Batch 1\"\r\n                                />\r\n                            </div>\r\n                             <div className=\"input-group\">\r\n                                <label htmlFor=\"startDate\">Start Date:</label>\r\n                                <input\r\n                                    id=\"startDate\" type=\"date\" value={startDate} // Controlled\r\n                                    onChange={(e) => setStartDate(e.target.value)} // Direct setter\r\n                                />\r\n                            </div>\r\n                             {/* Assuming span-cols-2 class is setup in CSS for grid layout */}\r\n                             <div className=\"input-group span-cols-2\">\r\n                                 <label htmlFor=\"simulationDays\">Cultivation Duration (Days):</label>\r\n                                <input\r\n                                    id=\"simulationDays\" type=\"number\" min=\"1\" max=\"365\" step=\"1\"\r\n                                    value={simulationDays} // Controlled\r\n                                    onChange={handleDaysChange} // Use specific handler\r\n                                />\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </main>\r\n\r\n            {/* Footer / Actions */}\r\n             <footer className=\"footer-container\">\r\n                 {/* Removed Back button from here as added near logo */}\r\n                 <button className=\"start1-button\" onClick={handleStartClick}>\r\n                    Start Growing\r\n                </button>\r\n            </footer>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ConditionSetting;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}