{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\celst\\\\sds\\\\src\\\\components\\\\GrowthSimulation.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { Line } from 'react-chartjs-2';\nimport { Chart as ChartJS, LineElement, PointElement, Tooltip, Legend, CategoryScale, LinearScale, Title } from 'chart.js';\nimport odeRK4 from 'ode-rk4';\nimport '../styles/GrowthSimulation.css'; // Ensure this path is correct\nimport logoSrc from '../assets/images/cslogo.png'; // Ensure this path is correct\n\n// --- Simulation Logic & ChartJS Registration ---\n\n// *** Default Parameters for MUSHROOM Growth ***\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst defaultParamsMushroom = {\n  timeStart: 0,\n  timeLength: 100,\n  timeStep: 0.2,\n  'C BD Rate': 1.11,\n  'C Coeff': 0.7,\n  'C Cons. Rate': 76.39,\n  'CO2 Coeff': 0.8,\n  'CO2 Production Rate': 410000,\n  'CO2 Removal Rate': 12.6,\n  'External CO2': 428.23,\n  'External Temp': 24,\n  'Growth Coeff': 5.1,\n  'Initial Complex:Simple Ratio': 0.8054,\n  'Initial Dry Substrate Weight': 410.2,\n  'IsMush': 1,\n  'Mushroom Multiplier': 5.17,\n  'N Coeff': 68.4,\n  'N Rate': 13.03,\n  'pH': 6.91,\n  'pH Coeff': 1.4,\n  'Temp Coeff': 1.3,\n  'Temp Production Rate': 405,\n  'Temp Transfer Rate': 1.5,\n  'Effect of CO2 on Mush Growth Data': [[500, 0.9], [800, 1], [1000, 0.8], [1200, 0.25], [1400, 0]],\n  'Effect of CO2 on Myc Growth Data': [[15000, 1], [20000, 0.9], [25000, 0.25], [30000, 0]],\n  'Effect of pH on Mush Growth Data': [[5.5, 0], [6, 0.25], [6.7, 1], [7, 0.6], [7.5, 0]],\n  'Effect of pH on Myc Growth Data': [[5.8, 0], [6, 0.25], [6.7, 1], [7, 0.6], [7.5, 0]],\n  'Effect of Temp on Mush Growth Data': [[10, 0], [15, 5.37], [20, 6.36], [25, 8.63], [30, 6.37], [40, 0]],\n  'Effect of Temp on Myc Growth Data': [[10, 0], [15, 5.37], [20, 6.36], [25, 8.63], [30, 6.37], [35, 5.36], [45, 0]],\n  'Initial Mycelium': 0.9\n};\n\n// *** Default Parameters for MYCELIUM Growth ***\nconst defaultParamsMycelium = {\n  timeStart: 0,\n  timeLength: 100,\n  timeStep: 0.2,\n  'C BD Rate': 1.11,\n  'C Coeff': 0.7,\n  'C Cons. Rate': 76.39,\n  'CO2 Coeff': 0.8,\n  'CO2 Production Rate': 410000,\n  'CO2 Removal Rate': 1,\n  'External CO2': 428.23,\n  'External Temp': 28,\n  'Growth Coeff': 5.4,\n  'Initial Complex:Simple Ratio': 0.867,\n  'Initial Dry Substrate Weight': 200,\n  'IsMush': 0,\n  'Mushroom Multiplier': 26,\n  'N Coeff': 68.4,\n  'N Rate': 1.53,\n  'pH': 6.91,\n  'pH Coeff': 1.4,\n  'Temp Coeff': 1.7,\n  'Temp Production Rate': 255,\n  'Temp Transfer Rate': 1.5,\n  'Effect of CO2 on Mush Growth Data': [[500, 0.9], [800, 1], [1000, 0.8], [1200, 0.25], [1400, 0]],\n  'Effect of CO2 on Myc Growth Data': [[15000, 1], [20000, 0.9], [25000, 0.25], [30000, 0]],\n  'Effect of pH on Mush Growth Data': [[5.5, 0], [6, 0.25], [6.7, 1], [7, 0.6], [7.5, 0]],\n  'Effect of pH on Myc Growth Data': [[5.8, 0], [6, 0.25], [6.7, 1], [7, 0.6], [7.5, 0]],\n  'Effect of Temp on Mush Growth Data': [[10, 0], [15, 5.37], [20, 6.36], [25, 8.63], [30, 6.37], [40, 0]],\n  'Effect of Temp on Myc Growth Data': [[10, 0], [15, 5.37], [20, 6.36], [25, 8.63], [30, 6.37], [35, 5.36], [45, 0]],\n  'Initial Mycelium': 0.004\n};\n\n// FIXED C:N Ratio\nconst FIXED_CN_RATIO = 0.96;\n\n// --- Simulation Functions ---\n\nfunction linearInterpolate(data, x) {\n  if (!data || data.length === 0) return 0;\n  if (x <= data[0][0]) return data[0][1];\n  if (x >= data[data.length - 1][0]) return data[data.length - 1][1];\n  let i = 0;\n  while (i < data.length - 1 && x > data[i + 1][0]) i++;\n  const x0 = data[i][0],\n    y0 = data[i][1],\n    x1 = data[i + 1][0],\n    y1 = data[i + 1][1];\n  const divisor = x1 - x0;\n  if (divisor === 0) return y0;\n  const t = (x - x0) / divisor;\n  return y0 + t * (y1 - y0);\n}\nfunction derivatives(dydt, y, t, currentParams) {\n  const [currentCO2, currentComplexC, currentMushroomYield, currentMycelium, currentN, currentSimpleC, currentSpace, currentTemp] = y;\n  const initialDrySubstrateWeight = currentParams['Initial Dry Substrate Weight'] || 1;\n  const cnRatio = currentParams['Initial C:N Ratio']; // Use the C:N Ratio passed in currentParams\n  const cnRatioPlusOne = cnRatio + 1;\n  // InitC depends on weight and *actual* C:N ratio used\n  const InitC = initialDrySubstrateWeight - initialDrySubstrateWeight / cnRatioPlusOne;\n  // Available N/C depend on the current state of N and SimpleC stocks\n  const AvailableN = initialDrySubstrateWeight > 0 ? currentN / initialDrySubstrateWeight : 0;\n  const AvailableC = initialDrySubstrateWeight > 0 ? currentSimpleC / initialDrySubstrateWeight : 0;\n  const NEffect = currentParams['N Coeff'] * AvailableN;\n  const CEffect = Math.sqrt(Math.max(0, currentParams['C Coeff'] * AvailableC));\n  const VolumeNormalisation = initialDrySubstrateWeight > 0 ? Math.sqrt(100 / initialDrySubstrateWeight) : Math.sqrt(100); // Avoid division by zero\n\n  // Effects based on interpolation\n  const Effect_of_CO2_on_Mush_Growth = linearInterpolate(currentParams['Effect of CO2 on Mush Growth Data'], currentCO2);\n  const Effect_of_CO2_on_Myc_Growth = linearInterpolate(currentParams['Effect of CO2 on Myc Growth Data'], currentCO2);\n  const Effect_of_pH_on_Mush_Growth = linearInterpolate(currentParams['Effect of pH on Mush Growth Data'], currentParams['pH']);\n  const Effect_of_pH_on_Myc_Growth = linearInterpolate(currentParams['Effect of pH on Myc Growth Data'], currentParams['pH']);\n  const Effect_of_Temp_on_Mush_Growth = linearInterpolate(currentParams['Effect of Temp on Mush Growth Data'], currentTemp);\n  const Effect_of_Temp_on_Myc_Growth = linearInterpolate(currentParams['Effect of Temp on Myc Growth Data'], currentTemp);\n\n  // Calculate combined effects based on IsMush flag\n  const TempEff_ = currentParams['IsMush'] === 0 ? Effect_of_Temp_on_Myc_Growth : Effect_of_Temp_on_Mush_Growth;\n  const TempEffect = currentParams['Temp Coeff'] * TempEff_ / 10;\n  const pHEff_ = currentParams['IsMush'] === 0 ? Effect_of_pH_on_Myc_Growth : Effect_of_pH_on_Mush_Growth;\n  const pHEffect = pHEff_ * currentParams['pH Coeff'];\n  const CO2Eff_ = currentParams['IsMush'] === 0 ? Effect_of_CO2_on_Myc_Growth : Effect_of_CO2_on_Mush_Growth;\n  const CO2Effect = currentParams['CO2 Coeff'] * CO2Eff_;\n\n  // Ensure effects are non-negative before combining\n  const safeTempEffect = Math.max(0, TempEffect);\n  const safePhEffect = Math.max(0, pHEffect);\n  const safeNEffect = Math.max(0, NEffect);\n  const safeCEffect = Math.max(0, CEffect); // CEffect already handles sqrt(neg) via Math.max\n  const safeCO2Effect = Math.max(0, CO2Effect);\n  const RawGrowthRate = safeTempEffect * safePhEffect * safeNEffect * safeCEffect * safeCO2Effect;\n  const GrowthOpp = currentSpace * currentMycelium; // Space and Mycelium are state variables\n\n  let GrowthRate = currentParams['IsMush'] === 1 ? RawGrowthRate * currentParams['Growth Coeff'] : RawGrowthRate * GrowthOpp * currentParams['Growth Coeff'];\n  GrowthRate = Math.max(0, GrowthRate); // Ensure non-negative growth rate\n\n  let NormGrowthRate = currentParams['IsMush'] === 1 ? GrowthRate / 100 : GrowthRate;\n\n  // Calculate Flows\n  const flow_Breakdown = Math.max(0, currentMycelium * currentParams['C BD Rate'] * currentComplexC * RawGrowthRate * VolumeNormalisation);\n  const flow_CCons = Math.max(0, NormGrowthRate * currentParams['C Cons. Rate']);\n  const flow_CO2Prod = Math.max(0, NormGrowthRate * currentParams['CO2 Production Rate']);\n  const flow_CO2Vent = Math.max(0, currentParams['CO2 Removal Rate'] * (currentCO2 - currentParams['External CO2']) * VolumeNormalisation);\n  const flow_Colonisation = currentParams['IsMush'] === 0 ? GrowthRate : 0; // Already non-negative\n  const flow_MushroomGrowth = currentParams['IsMush'] === 1 ? Math.max(0, GrowthRate * currentParams['Mushroom Multiplier']) : 0;\n  const flow_NCons = Math.max(0, NormGrowthRate * currentParams['N Rate']);\n  const flow_TempProd = Math.max(0, NormGrowthRate * currentParams['Temp Production Rate']);\n  const flow_TempVent = Math.max(0, (currentTemp - currentParams['External Temp']) * currentParams['Temp Transfer Rate'] * VolumeNormalisation);\n\n  // Assign derivatives (rate of change for stocks)\n  dydt[0] = flow_CO2Prod - flow_CO2Vent; // dCO2/dt\n  dydt[1] = -flow_Breakdown; // dComplexC/dt\n  dydt[2] = flow_MushroomGrowth; // dMushroomYield/dt\n  dydt[3] = flow_Colonisation; // dMycelium/dt\n  dydt[4] = -flow_NCons; // dN/dt\n  dydt[5] = flow_Breakdown - flow_CCons; // dSimpleC/dt\n  dydt[6] = -flow_Colonisation; // dSpace/dt\n  dydt[7] = flow_TempProd - flow_TempVent; // dTemp/dt\n\n  // Apply non-negative constraints AFTER calculating net change\n  const epsilon = 1e-9; // Small threshold\n  if (currentCO2 <= epsilon && dydt[0] < 0) dydt[0] = 0;\n  if (currentComplexC <= epsilon && dydt[1] < 0) dydt[1] = 0;\n  if (currentMushroomYield <= epsilon && dydt[2] < 0) dydt[2] = 0;\n  if (currentMycelium <= epsilon && dydt[3] < 0) dydt[3] = 0;\n  if (currentN <= epsilon && dydt[4] < 0) dydt[4] = 0;\n  if (currentSimpleC <= epsilon && dydt[5] < 0) dydt[5] = 0;\n  if (currentSpace <= epsilon && dydt[6] < 0) dydt[6] = 0;\n  // Allow temp to drop but not below a reasonable floor (e.g., -273.15 C, though unlikely needed)\n  // if (currentTemp <= some_floor && dydt[7] < 0) dydt[7] = 0;\n}\nfunction getInitialState(p, initialMyceliumValue) {\n  const initialDrySubstrateWeight = Number(p['Initial Dry Substrate Weight']);\n  const cnRatio = Number(p['Initial C:N Ratio']); // Use the C:N Ratio passed in 'p'\n  const complexSimpleRatio = Number(p['Initial Complex:Simple Ratio']);\n\n  // Basic validation\n  if (isNaN(initialDrySubstrateWeight) || initialDrySubstrateWeight <= 0 || isNaN(cnRatio) || cnRatio <= 0 || isNaN(complexSimpleRatio)) {\n    console.error(\"Invalid parameters for getInitialState:\", p);\n    return [400, 200, 0, 0.01, 10, 50, 0.99, 25]; // Default state on error\n  }\n  const cnRatioPlusOne = cnRatio + 1;\n  const Init_N = initialDrySubstrateWeight / cnRatioPlusOne;\n  const Init_C = initialDrySubstrateWeight - Init_N; // Or initialDrySubstrateWeight * (cnRatio / cnRatioPlusOne)\n  const initialSpace = Math.max(0, 1 - initialMyceliumValue); // Ensure space isn't negative\n\n  return [Number(p['External CO2']),\n  // 0: CO2\n  Init_C * complexSimpleRatio,\n  // 1: ComplexC\n  0,\n  // 2: MushroomYield\n  initialMyceliumValue,\n  // 3: Mycelium\n  Init_N,\n  // 4: N\n  Init_C * (1 - complexSimpleRatio),\n  // 5: SimpleC\n  initialSpace,\n  // 6: Space\n  Number(p['External Temp']) // 7: Temp\n  ];\n}\nfunction runSimulation(inputParams, defaultParamSet) {\n  var _currentParams$Initia, _currentParams$Initia2;\n  if (!defaultParamSet) {\n    console.error(\"runSimulation called without defaultParamSet!\");\n    return [];\n  }\n\n  // Merge parameters: defaults < inputs < forced values\n  const currentParams = {\n    ...defaultParamSet,\n    ...inputParams,\n    'Initial C:N Ratio': FIXED_CN_RATIO // Force the C:N Ratio\n  };\n\n  // Extract final values needed for initial state calculation\n  const finalInitialWeight = Number(currentParams['Initial Dry Substrate Weight']);\n  const finalCNRatio = Number(currentParams['Initial C:N Ratio']); // Use the fixed ratio\n  const finalComplexSimpleRatio = Number(currentParams['Initial Complex:Simple Ratio']);\n  const finalExternalCO2 = Number(currentParams['External CO2']);\n  const finalExternalTemp = Number(currentParams['External Temp']);\n\n  // Determine initial mycelium based on the phase defined in currentParams\n  const initialMyceliumValue = currentParams['IsMush'] === 0 ? (_currentParams$Initia = currentParams['Initial Mycelium']) !== null && _currentParams$Initia !== void 0 ? _currentParams$Initia : 0.004 // Default for Mycelium phase\n  : (_currentParams$Initia2 = currentParams['Initial Mycelium']) !== null && _currentParams$Initia2 !== void 0 ? _currentParams$Initia2 : 0.9; // Default for Mushroom phase\n\n  // Prepare parameters specifically for getInitialState\n  const initialStateParams = {\n    'Initial Dry Substrate Weight': finalInitialWeight,\n    'Initial C:N Ratio': finalCNRatio,\n    // Pass the FIXED ratio here\n    'Initial Complex:Simple Ratio': finalComplexSimpleRatio,\n    'External CO2': finalExternalCO2,\n    'External Temp': finalExternalTemp\n  };\n  const y0 = getInitialState(initialStateParams, initialMyceliumValue);\n  const t0 = currentParams.timeStart;\n  const dt = currentParams.timeStep;\n  const timeLength = Math.max(0, Number(currentParams.timeLength));\n  const positiveDt = Math.max(dt, 1e-6); // Ensure dt is positive and non-zero\n  const numSteps = timeLength > 0 && positiveDt > 0 ? Math.floor(timeLength / positiveDt) : 0;\n  const derivativeFuncForSolver = (dydt, y, t) => {\n    try {\n      derivatives(dydt, y, t, currentParams);\n    } // Pass the fully merged currentParams\n    catch (e) {\n      console.error(\"Error in derivatives:\", e);\n      dydt.fill(0);\n    }\n  };\n  const integrator = odeRK4(y0, derivativeFuncForSolver, t0, positiveDt);\n  const results = [{\n    time: integrator.t,\n    state: [...integrator.y]\n  }];\n  const simType = currentParams['IsMush'] === 0 ? 'Mycelium' : 'Mushroom';\n  console.log(`Starting ${simType} simulation for ${timeLength} days.`);\n  if (numSteps <= 0) {\n    console.warn(`${simType} Sim: timeLength or timeStep results in 0 steps.`);\n    return [];\n  }\n  for (let i = 0; i < numSteps; i++) {\n    try {\n      integrator.step();\n      if (integrator.y.some(val => !Number.isFinite(val))) {\n        console.error(`${simType} Sim: Non-finite value detected at t=${integrator.t.toFixed(2)}. State:`, integrator.y);\n        // Optional: break early if simulation becomes unstable\n        // break;\n      }\n      // Check non-negative constraint violation (example for Mycelium)\n      if (integrator.y[3] < 0) {\n        // console.warn(`${simType} Sim: Mycelium became negative at t=${integrator.t.toFixed(2)}, correcting to 0.`);\n        integrator.y[3] = 0; // Correct negative value\n      }\n      // Add similar checks and corrections for other state variables if needed\n\n      results.push({\n        time: integrator.t,\n        state: [...integrator.y]\n      });\n    } catch (solverError) {\n      console.error(`${simType} Sim: RK4 step error at t=${integrator.t.toFixed(2)}:`, solverError);\n      break; // Stop simulation on solver error\n    }\n  }\n  console.log(`${simType} simulation finished.`);\n  // Map results to named properties\n  return results.map(p => ({\n    time: p.time,\n    CO2: p.state[0],\n    ComplexC: p.state[1],\n    MushroomYield: p.state[2],\n    Mycelium: p.state[3],\n    N: p.state[4],\n    SimpleC: p.state[5],\n    Space: p.state[6],\n    Temp: p.state[7]\n  }));\n}\n// --- (End of Simulation Functions) ---\n\n// Register ChartJS components\nChartJS.register(LineElement, PointElement, Tooltip, Legend, CategoryScale, LinearScale, Title);\n\n// Helper function to format date (DD-MM-YYYY)\nfunction formatDate_DDMMYYYY(dateString) {\n  // Handles YYYY-MM-DD input\n  if (!dateString || dateString === 'N/A' || !/^\\d{4}-\\d{2}-\\d{2}$/.test(dateString)) {\n    return 'N/A';\n  }\n  try {\n    const [year, month, day] = dateString.split('-');\n    return `${day}-${month}-${year}`;\n  } catch (e) {\n    console.error(\"Error formatting date:\", e);\n    return 'N/A';\n  }\n}\n\n// Helper function to calculate end date and format it\nfunction calculateAndFormatEndDate(startDateStr, durationDays) {\n  if (!startDateStr || startDateStr === 'N/A' || !/^\\d{4}-\\d{2}-\\d{2}$/.test(startDateStr) || isNaN(durationDays) || durationDays < 0) {\n    return 'N/A'; // Invalid input\n  }\n  try {\n    const startDateObj = new Date(startDateStr);\n    // Important: Create a *new* date object to avoid modifying the original\n    const endDateObj = new Date(startDateObj.getTime());\n    endDateObj.setDate(endDateObj.getDate() + durationDays);\n\n    // Format the calculated end date back to YYYY-MM-DD for the formatter function\n    const endYear = endDateObj.getFullYear();\n    const endMonth = String(endDateObj.getMonth() + 1).padStart(2, '0'); // Month is 0-indexed\n    const endDay = String(endDateObj.getDate()).padStart(2, '0');\n    const endDateStrYYYYMMDD = `${endYear}-${endMonth}-${endDay}`;\n    return formatDate_DDMMYYYY(endDateStrYYYYMMDD); // Use existing formatter\n  } catch (dateError) {\n    console.error(\"Error calculating end date:\", dateError);\n    return 'N/A';\n  }\n}\n\n// --- React Component ---\nconst GrowthSimulation = () => {\n  _s();\n  const navigate = useNavigate();\n  const [simulationResultsMushroom, setSimulationResultsMushroom] = useState(null);\n  const [simulationResultsMycelium, setSimulationResultsMycelium] = useState(null);\n  const [isLoading, setIsLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [batchName, setBatchName] = useState('');\n  const [startDate, setStartDate] = useState(''); // Will store YYYY-MM-DD\n  const [endDate, setEndDate] = useState('N/A'); // <<< State for formatted DD-MM-YYYY end date\n  const [finalSimulatedYield, setFinalSimulatedYield] = useState(null);\n  const [activeChartTab, setActiveChartTab] = useState('yield'); // Default to yield\n\n  const LOCAL_STORAGE_KEYS = {\n    TEMPERATURE: 'sim_temperature',\n    PH: 'sim_ph',\n    SUBSTRATE: 'sim_substrate',\n    SIMULATION_DAYS: 'sim_duration',\n    BATCH_NAME: 'sim_batch_name',\n    START_DATE: 'sim_start_date' // Expects YYYY-MM-DD\n  };\n  useEffect(() => {\n    let isMounted = true;\n    setIsLoading(true);\n    setError(null);\n    setFinalSimulatedYield(null);\n    setSimulationResultsMushroom(null);\n    setSimulationResultsMycelium(null);\n    setEndDate('N/A'); // Reset end date on each run\n\n    const runSimulationsAsync = async () => {\n      await new Promise(resolve => setTimeout(resolve, 50));\n      if (!isMounted) return;\n      let savedTempStr, savedPhStr, savedSubstrateJson, savedDaysStr, savedBatchName, savedStartDateStr;\n      try {\n        savedTempStr = localStorage.getItem(LOCAL_STORAGE_KEYS.TEMPERATURE);\n        savedPhStr = localStorage.getItem(LOCAL_STORAGE_KEYS.PH);\n        savedSubstrateJson = localStorage.getItem(LOCAL_STORAGE_KEYS.SUBSTRATE);\n        savedDaysStr = localStorage.getItem(LOCAL_STORAGE_KEYS.SIMULATION_DAYS);\n        savedBatchName = localStorage.getItem(LOCAL_STORAGE_KEYS.BATCH_NAME) || 'N/A';\n        savedStartDateStr = localStorage.getItem(LOCAL_STORAGE_KEYS.START_DATE) || 'N/A'; // Expect YYYY-MM-DD\n\n        if (isMounted) {\n          setBatchName(savedBatchName);\n          setStartDate(savedStartDateStr); // Store the raw YYYY-MM-DD start date\n        }\n        const missingParams = [];\n        if (savedTempStr === null) missingParams.push('Temperature');\n        if (savedPhStr === null) missingParams.push('pH');\n        if (savedSubstrateJson === null) missingParams.push('Substrate');\n        if (savedDaysStr === null) missingParams.push('Duration');\n        // Start date is optional for simulation but needed for end date display\n        // if (savedStartDateStr === 'N/A') missingParams.push('Start Date');\n\n        if (missingParams.length > 0) {\n          throw new Error(`Missing required parameters: ${missingParams.join(', ')}. Please set in Condition Settings.`);\n        }\n        const temp = parseFloat(savedTempStr);\n        const phValue = parseFloat(savedPhStr);\n        const days = parseInt(savedDaysStr, 10);\n        let substrateData = null;\n        let initialWeight = 0;\n        try {\n          substrateData = JSON.parse(savedSubstrateJson);\n          if (typeof substrateData !== 'object' || substrateData === null) throw new Error(\"Invalid substrate format.\");\n          initialWeight = Object.values(substrateData).reduce((sum, val) => sum + (Number(val) || 0), 0);\n          if (initialWeight <= 0) console.warn(\"Initial substrate weight is zero or negative.\");\n        } catch (parseError) {\n          throw new Error(`Invalid substrate data: ${parseError.message}`);\n        }\n        if (isNaN(temp) || isNaN(phValue) || isNaN(initialWeight) || isNaN(days) || days < 0) {\n          throw new Error(\"Invalid or missing numerical parameters loaded.\");\n        }\n        const simulationDuration = days; // Use the parsed days directly\n\n        // --- Calculate End Date ---\n        const calculatedEndDate = calculateAndFormatEndDate(savedStartDateStr, simulationDuration);\n        if (isMounted) {\n          setEndDate(calculatedEndDate); // Set the formatted end date state\n        }\n        // --- End Calculate End Date ---\n\n        const simulationInputs = {\n          'External Temp': temp,\n          'pH': phValue,\n          'Initial Dry Substrate Weight': initialWeight,\n          'timeLength': simulationDuration\n        };\n        console.log(\"Running Mushroom Simulation...\");\n        const resultsMushroom = runSimulation(simulationInputs, defaultParamsMushroom);\n        console.log(\"Running Mycelium Simulation...\");\n        const resultsMycelium = runSimulation(simulationInputs, defaultParamsMycelium);\n        if (isMounted) {\n          setSimulationResultsMushroom(resultsMushroom);\n          setSimulationResultsMycelium(resultsMycelium);\n          if (resultsMushroom && resultsMushroom.length > 0) {\n            const lastMushroomResult = resultsMushroom[resultsMushroom.length - 1];\n            if (lastMushroomResult && Number.isFinite(lastMushroomResult.MushroomYield)) {\n              setFinalSimulatedYield(lastMushroomResult.MushroomYield);\n            } else {\n              setFinalSimulatedYield(null); // Set to null if not finite\n            }\n          } else {\n            setFinalSimulatedYield(null); // Set to null if no results\n          }\n          console.log(\"Both simulations complete.\");\n        }\n      } catch (err) {\n        console.error(\"Error during simulation setup or run:\", err);\n        if (isMounted) setError(err.message || \"Failed to run simulation.\");\n      } finally {\n        if (isMounted) setIsLoading(false);\n      }\n    };\n    runSimulationsAsync();\n    return () => {\n      isMounted = false;\n    };\n  }, []); // Keep dependency array empty\n\n  const handleBackClick = () => {\n    navigate('/condition-setting');\n  };\n\n  // --- getChartConfig function (no changes needed here) ---\n  const getChartConfig = () => {\n    const currentResultsSource = activeChartTab === 'mycelium' ? simulationResultsMycelium : simulationResultsMushroom; // Default to mushroom sim for yield/temp\n\n    // Default options setup\n    const yieldColor = '#2E7D32';\n    const tempColor = '#C62828';\n    const myceliumColor = '#1976D2';\n    const textColor = '#333';\n    const gridColor = 'rgba(0, 0, 0, 0.08)';\n    const font = {\n      family: 'Lexend'\n    };\n    const options = {\n      responsive: true,\n      maintainAspectRatio: false,\n      plugins: {\n        legend: {\n          display: true,\n          labels: {\n            color: textColor,\n            font: font\n          }\n        },\n        tooltip: {\n          enabled: true,\n          bodyFont: font,\n          titleFont: font\n        },\n        title: {\n          display: true,\n          text: '',\n          color: textColor,\n          font: {\n            ...font,\n            size: 16\n          }\n        }\n      },\n      scales: {\n        x: {\n          type: 'linear',\n          title: {\n            display: true,\n            text: 'Time (Days)',\n            color: textColor,\n            font: font\n          },\n          ticks: {\n            color: textColor,\n            font: font\n          },\n          grid: {\n            color: gridColor\n          },\n          min: 0,\n          max: undefined\n        },\n        yYield: {\n          type: 'linear',\n          position: 'left',\n          title: {\n            display: true,\n            text: 'Mushroom Yield (g)',\n            color: yieldColor,\n            font: font\n          },\n          ticks: {\n            color: yieldColor,\n            font: font\n          },\n          grid: {\n            drawOnChartArea: true,\n            color: gridColor\n          },\n          beginAtZero: true,\n          display: false\n        },\n        yTemp: {\n          type: 'linear',\n          position: 'left',\n          title: {\n            display: true,\n            text: 'Temperature (°C)',\n            color: tempColor,\n            font: font\n          },\n          ticks: {\n            color: tempColor,\n            font: font\n          },\n          grid: {\n            drawOnChartArea: true,\n            color: gridColor\n          },\n          display: false\n        },\n        // Display temp on left too for simplicity unless specified otherwise\n        yMycelium: {\n          type: 'linear',\n          position: 'left',\n          title: {\n            display: true,\n            text: 'Mycelium Density',\n            color: myceliumColor,\n            font: font\n          },\n          ticks: {\n            color: myceliumColor,\n            font: font\n          },\n          grid: {\n            drawOnChartArea: true,\n            color: gridColor\n          },\n          beginAtZero: true,\n          suggestedMax: 1,\n          display: false\n        } // Shared left axis if only one is shown\n      }\n    };\n\n    // Reset display flags\n    options.scales.yYield.display = false;\n    options.scales.yTemp.display = false;\n    options.scales.yMycelium.display = false;\n    if (!currentResultsSource || currentResultsSource.length === 0) {\n      console.log(`No data available for tab: ${activeChartTab}`);\n      return {\n        data: {\n          datasets: []\n        },\n        options: options\n      };\n    }\n    let datasets = [];\n    let chartData = [...currentResultsSource]; // Use a copy\n    let dataSourceName = '';\n    switch (activeChartTab) {\n      case 'yield':\n        dataSourceName = 'Mushroom Sim';\n        options.plugins.title.text = `Yield Over Time (${dataSourceName})`;\n        options.scales.yYield.display = true; // Show yield axis\n        datasets = [{\n          label: 'Mushroom Yield (g)',\n          data: chartData.map(p => ({\n            x: p.time,\n            y: Number.isFinite(p.MushroomYield) ? p.MushroomYield : null\n          })),\n          borderColor: yieldColor,\n          backgroundColor: 'rgba(46, 125, 50, 0.1)',\n          yAxisID: 'yYield'\n        }];\n        // Set X axis max based on the full duration of this dataset\n        options.scales.x.max = chartData.length > 0 ? chartData[chartData.length - 1].time : undefined;\n        break;\n      case 'temp':\n        dataSourceName = 'Mushroom Sim';\n        options.plugins.title.text = `Temperature Over Time (${dataSourceName})`;\n        options.scales.yTemp.display = true; // Show temp axis\n        datasets = [{\n          label: 'Temperature (°C)',\n          data: chartData.map(p => ({\n            x: p.time,\n            y: Number.isFinite(p.Temp) ? p.Temp : null\n          })),\n          borderColor: tempColor,\n          backgroundColor: 'rgba(198, 40, 40, 0.1)',\n          yAxisID: 'yTemp'\n        }];\n        // Set X axis max based on the full duration of this dataset\n        options.scales.x.max = chartData.length > 0 ? chartData[chartData.length - 1].time : undefined;\n        break;\n      case 'mycelium':\n        dataSourceName = 'Mycelium Sim';\n        options.plugins.title.text = `Mycelium Growth (${dataSourceName})`;\n        options.scales.yMycelium.display = true; // Show mycelium axis\n\n        // Apply cutoff logic for Mycelium chart\n        let cutoffIndex = chartData.findIndex(p => p.Mycelium >= 0.9);\n        let finalTime = chartData.length > 0 ? chartData[chartData.length - 1].time : 0;\n        let cutoffReason = \"Simulation End\";\n        if (cutoffIndex !== -1) {\n          // Found >= 0.9\n          chartData = chartData.slice(0, cutoffIndex + 1);\n          finalTime = chartData[chartData.length - 1].time;\n          cutoffReason = \"Mycelium >= 0.9\";\n          console.log(`Mycelium chart cutoff at index ${cutoffIndex}, time ${finalTime.toFixed(2)} (${cutoffReason})`);\n        } else {\n          // Threshold not met, check day 30\n          const day30Index = chartData.findIndex(p => p.time >= 30);\n          if (day30Index !== -1) {\n            // Found day >= 30\n            chartData = chartData.slice(0, day30Index + 1);\n            finalTime = chartData[chartData.length - 1].time;\n            cutoffReason = \"Day 30 Limit\";\n            console.log(`Mycelium chart cutoff at index ${day30Index}, time ${finalTime.toFixed(2)} (${cutoffReason})`);\n          } else {\n            // Less than 30 days simulated AND threshold not met\n            console.log(`Mycelium threshold 0.9 not reached and simulation ended before day 30 (t=${finalTime.toFixed(2)}). Showing all data.`);\n            // finalTime is already the end of simulation\n          }\n        }\n\n        // Set max time for X-axis based on cutoff or full duration\n        options.scales.x.max = finalTime;\n\n        // Add cutoff reason to title if applicable\n        if (cutoffReason !== \"Simulation End\") {\n          options.plugins.title.text += ` (Stopped at ${cutoffReason})`;\n        }\n        datasets = [{\n          label: 'Mycelium Density',\n          data: chartData.map(p => ({\n            x: p.time,\n            y: Number.isFinite(p.Mycelium) ? p.Mycelium : null\n          })),\n          borderColor: myceliumColor,\n          backgroundColor: 'rgba(25, 118, 210, 0.1)',\n          yAxisID: 'yMycelium'\n        }];\n        break;\n      default:\n        datasets = [];\n    }\n\n    // Final check for empty datasets or data within dataset\n    const finalDatasets = datasets && datasets.length > 0 ? datasets.map(ds => {\n      var _ds$data;\n      return {\n        ...ds,\n        tension: 0.1,\n        pointRadius: ((_ds$data = ds.data) === null || _ds$data === void 0 ? void 0 : _ds$data.length) > 100 ? 0 : 2,\n        // Reduce points for many data points\n        spanGaps: true // Connect lines over null data points\n      };\n    }).filter(ds => ds.data && ds.data.length > 0) // Filter out datasets with no actual data points\n    : [];\n    if (finalDatasets.length === 0) {\n      console.log(`No valid data points found for tab: ${activeChartTab}`);\n    }\n    return {\n      data: {\n        datasets: finalDatasets\n      },\n      options: options\n    };\n  };\n  // --- End getChartConfig function ---\n\n  const chartConfig = getChartConfig();\n  const simulationDataReady = simulationResultsMushroom || simulationResultsMycelium; // Check if *either* result set is available\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"growth-simulation\",\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"simulation-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"logobox\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleBackClick,\n          className: \"back-button\",\n          title: \"Back to Settings\",\n          children: \"\\u2190\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 584,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"logo\",\n          children: /*#__PURE__*/_jsxDEV(\"img\", {\n            src: logoSrc,\n            alt: \"City Sprouts Logo\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 585,\n            columnNumber: 43\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 585,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 583,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"batch-info\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"batch-name\",\n          children: [\"Batch: \", batchName]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 588,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"start-date\",\n          children: [\"Start Date: \", formatDate_DDMMYYYY(startDate)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 590,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 587,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 582,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n      className: \"main-content-grid\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"animation-area content-card\",\n        children: /*#__PURE__*/_jsxDEV(\"span\", {\n          children: \"Animation Area (Placeholder)\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 594,\n          columnNumber: 62\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 594,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chart-results-column\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"tabs-container\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => setActiveChartTab('yield'),\n            className: `tab-button ${activeChartTab === 'yield' ? 'tab-button-active' : ''}`,\n            children: \" Yield \"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 598,\n            columnNumber: 26\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => setActiveChartTab('temp'),\n            className: `tab-button ${activeChartTab === 'temp' ? 'tab-button-active' : ''}`,\n            children: \" Temperature \"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 599,\n            columnNumber: 26\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => setActiveChartTab('mycelium'),\n            className: `tab-button ${activeChartTab === 'mycelium' ? 'tab-button-active' : ''}`,\n            children: \" Mycelium \"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 600,\n            columnNumber: 26\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 596,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"chart-area content-card\",\n          children: [isLoading && /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"loading-message\",\n            children: \"Running simulations...\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 603,\n            columnNumber: 39\n          }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"error-message\",\n            children: [\"Error: \", error]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 604,\n            columnNumber: 35\n          }, this), !isLoading && !error && simulationDataReady && (\n          // Check if the *specific* chart config has data\n          chartConfig.data.datasets.length > 0 ? /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"chart-container\",\n            children: [\" \", /*#__PURE__*/_jsxDEV(Line, {\n              options: chartConfig.options,\n              data: chartConfig.data\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 608,\n              columnNumber: 67\n            }, this), \" \"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 608,\n            columnNumber: 33\n          }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"no-data-message\",\n            children: [\"No simulation data available for the '\", activeChartTab, \"' chart.\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 610,\n            columnNumber: 33\n          }, this)), !isLoading && !error && !simulationDataReady && /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"no-data-message\",\n            children: \"Simulation results not available.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 614,\n            columnNumber: 74\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 602,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"results-section content-card\",\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            className: \"results-heading\",\n            children: [\" Results \", /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"info-icon\",\n              title: \"Projected yield from Mushroom phase simulation.\",\n              children: \"i\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 618,\n              columnNumber: 66\n            }, this), \" \"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 618,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"results-items\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"result-item\",\n              children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"result-label\",\n                children: \"Projected Yield:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 621,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"result-value\",\n                children: isLoading ? '...' : error ? 'Error' : finalSimulatedYield !== null && Number.isFinite(finalSimulatedYield) ? `${finalSimulatedYield.toFixed(1)}g` : 'N/A'\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 622,\n                columnNumber: 33\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 620,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"result-item\",\n              children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"result-label\",\n                children: \"Projected End Date:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 627,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"result-value\",\n                children: isLoading ? '...' : error ? 'Error' : endDate\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 628,\n                columnNumber: 33\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 626,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 619,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 617,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 595,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 593,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 581,\n    columnNumber: 9\n  }, this);\n};\n_s(GrowthSimulation, \"9PJxBxKfq+eef8jPPNIzcDYzRqc=\", false, function () {\n  return [useNavigate];\n});\n_c = GrowthSimulation;\nexport default GrowthSimulation;\nvar _c;\n$RefreshReg$(_c, \"GrowthSimulation\");","map":{"version":3,"names":["React","useState","useEffect","useNavigate","Line","Chart","ChartJS","LineElement","PointElement","Tooltip","Legend","CategoryScale","LinearScale","Title","odeRK4","logoSrc","jsxDEV","_jsxDEV","defaultParamsMushroom","timeStart","timeLength","timeStep","defaultParamsMycelium","FIXED_CN_RATIO","linearInterpolate","data","x","length","i","x0","y0","x1","y1","divisor","t","derivatives","dydt","y","currentParams","currentCO2","currentComplexC","currentMushroomYield","currentMycelium","currentN","currentSimpleC","currentSpace","currentTemp","initialDrySubstrateWeight","cnRatio","cnRatioPlusOne","InitC","AvailableN","AvailableC","NEffect","CEffect","Math","sqrt","max","VolumeNormalisation","Effect_of_CO2_on_Mush_Growth","Effect_of_CO2_on_Myc_Growth","Effect_of_pH_on_Mush_Growth","Effect_of_pH_on_Myc_Growth","Effect_of_Temp_on_Mush_Growth","Effect_of_Temp_on_Myc_Growth","TempEff_","TempEffect","pHEff_","pHEffect","CO2Eff_","CO2Effect","safeTempEffect","safePhEffect","safeNEffect","safeCEffect","safeCO2Effect","RawGrowthRate","GrowthOpp","GrowthRate","NormGrowthRate","flow_Breakdown","flow_CCons","flow_CO2Prod","flow_CO2Vent","flow_Colonisation","flow_MushroomGrowth","flow_NCons","flow_TempProd","flow_TempVent","epsilon","getInitialState","p","initialMyceliumValue","Number","complexSimpleRatio","isNaN","console","error","Init_N","Init_C","initialSpace","runSimulation","inputParams","defaultParamSet","_currentParams$Initia","_currentParams$Initia2","finalInitialWeight","finalCNRatio","finalComplexSimpleRatio","finalExternalCO2","finalExternalTemp","initialStateParams","t0","dt","positiveDt","numSteps","floor","derivativeFuncForSolver","e","fill","integrator","results","time","state","simType","log","warn","step","some","val","isFinite","toFixed","push","solverError","map","CO2","ComplexC","MushroomYield","Mycelium","N","SimpleC","Space","Temp","register","formatDate_DDMMYYYY","dateString","test","year","month","day","split","calculateAndFormatEndDate","startDateStr","durationDays","startDateObj","Date","endDateObj","getTime","setDate","getDate","endYear","getFullYear","endMonth","String","getMonth","padStart","endDay","endDateStrYYYYMMDD","dateError","GrowthSimulation","_s","navigate","simulationResultsMushroom","setSimulationResultsMushroom","simulationResultsMycelium","setSimulationResultsMycelium","isLoading","setIsLoading","setError","batchName","setBatchName","startDate","setStartDate","endDate","setEndDate","finalSimulatedYield","setFinalSimulatedYield","activeChartTab","setActiveChartTab","LOCAL_STORAGE_KEYS","TEMPERATURE","PH","SUBSTRATE","SIMULATION_DAYS","BATCH_NAME","START_DATE","isMounted","runSimulationsAsync","Promise","resolve","setTimeout","savedTempStr","savedPhStr","savedSubstrateJson","savedDaysStr","savedBatchName","savedStartDateStr","localStorage","getItem","missingParams","Error","join","temp","parseFloat","phValue","days","parseInt","substrateData","initialWeight","JSON","parse","Object","values","reduce","sum","parseError","message","simulationDuration","calculatedEndDate","simulationInputs","resultsMushroom","resultsMycelium","lastMushroomResult","err","handleBackClick","getChartConfig","currentResultsSource","yieldColor","tempColor","myceliumColor","textColor","gridColor","font","family","options","responsive","maintainAspectRatio","plugins","legend","display","labels","color","tooltip","enabled","bodyFont","titleFont","title","text","size","scales","type","ticks","grid","min","undefined","yYield","position","drawOnChartArea","beginAtZero","yTemp","yMycelium","suggestedMax","datasets","chartData","dataSourceName","label","borderColor","backgroundColor","yAxisID","cutoffIndex","findIndex","finalTime","cutoffReason","slice","day30Index","finalDatasets","ds","_ds$data","tension","pointRadius","spanGaps","filter","chartConfig","simulationDataReady","className","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","src","alt","_c","$RefreshReg$"],"sources":["C:/Users/celst/sds/src/components/GrowthSimulation.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { Line } from 'react-chartjs-2';\r\nimport { Chart as ChartJS, LineElement, PointElement, Tooltip, Legend, CategoryScale, LinearScale, Title } from 'chart.js';\r\nimport odeRK4 from 'ode-rk4';\r\nimport '../styles/GrowthSimulation.css'; // Ensure this path is correct\r\nimport logoSrc from '../assets/images/cslogo.png'; // Ensure this path is correct\r\n\r\n// --- Simulation Logic & ChartJS Registration ---\r\n\r\n// *** Default Parameters for MUSHROOM Growth ***\r\nconst defaultParamsMushroom = {\r\n    timeStart: 0, timeLength: 100, timeStep: 0.2,\r\n    'C BD Rate': 1.11, 'C Coeff': 0.7, 'C Cons. Rate': 76.39, 'CO2 Coeff': 0.8,\r\n    'CO2 Production Rate': 410000, 'CO2 Removal Rate': 12.6, 'External CO2': 428.23,\r\n    'External Temp': 24, 'Growth Coeff': 5.1,\r\n    'Initial Complex:Simple Ratio': 0.8054,\r\n    'Initial Dry Substrate Weight': 410.2,\r\n    'IsMush': 1,\r\n    'Mushroom Multiplier': 5.17,\r\n    'N Coeff': 68.4, 'N Rate': 13.03,\r\n    'pH': 6.91,\r\n    'pH Coeff': 1.4, 'Temp Coeff': 1.3, 'Temp Production Rate': 405,\r\n    'Temp Transfer Rate': 1.5,\r\n    'Effect of CO2 on Mush Growth Data': [[500, 0.9], [800, 1], [1000, 0.8], [1200, 0.25], [1400, 0]],\r\n    'Effect of CO2 on Myc Growth Data': [[15000, 1], [20000, 0.9], [25000, 0.25], [30000, 0]],\r\n    'Effect of pH on Mush Growth Data': [[5.5, 0], [6, 0.25], [6.7, 1], [7, 0.6], [7.5, 0]],\r\n    'Effect of pH on Myc Growth Data': [[5.8, 0], [6, 0.25], [6.7, 1], [7, 0.6], [7.5, 0]],\r\n    'Effect of Temp on Mush Growth Data': [[10, 0], [15, 5.37], [20, 6.36], [25, 8.63], [30, 6.37], [40, 0]],\r\n    'Effect of Temp on Myc Growth Data': [[10, 0], [15, 5.37], [20, 6.36], [25, 8.63], [30, 6.37], [35, 5.36], [45, 0]],\r\n    'Initial Mycelium': 0.9,\r\n};\r\n\r\n// *** Default Parameters for MYCELIUM Growth ***\r\nconst defaultParamsMycelium = {\r\n    timeStart: 0, timeLength: 100, timeStep: 0.2,\r\n    'C BD Rate': 1.11, 'C Coeff': 0.7, 'C Cons. Rate': 76.39, 'CO2 Coeff': 0.8,\r\n    'CO2 Production Rate': 410000, 'CO2 Removal Rate': 1,\r\n    'External CO2': 428.23, 'External Temp': 28,\r\n    'Growth Coeff': 5.4,\r\n    'Initial Complex:Simple Ratio': 0.867,\r\n    'Initial Dry Substrate Weight': 200,\r\n    'IsMush': 0,\r\n    'Mushroom Multiplier': 26,\r\n    'N Coeff': 68.4, 'N Rate': 1.53,\r\n    'pH': 6.91,\r\n    'pH Coeff': 1.4, 'Temp Coeff': 1.7,\r\n    'Temp Production Rate': 255,\r\n    'Temp Transfer Rate': 1.5,\r\n    'Effect of CO2 on Mush Growth Data': [[500, 0.9], [800, 1], [1000, 0.8], [1200, 0.25], [1400, 0]],\r\n    'Effect of CO2 on Myc Growth Data': [[15000, 1], [20000, 0.9], [25000, 0.25], [30000, 0]],\r\n    'Effect of pH on Mush Growth Data': [[5.5, 0], [6, 0.25], [6.7, 1], [7, 0.6], [7.5, 0]],\r\n    'Effect of pH on Myc Growth Data': [[5.8, 0], [6, 0.25], [6.7, 1], [7, 0.6], [7.5, 0]],\r\n    'Effect of Temp on Mush Growth Data': [[10, 0], [15, 5.37], [20, 6.36], [25, 8.63], [30, 6.37], [40, 0]],\r\n    'Effect of Temp on Myc Growth Data': [[10, 0], [15, 5.37], [20, 6.36], [25, 8.63], [30, 6.37], [35, 5.36], [45, 0]],\r\n    'Initial Mycelium': 0.004,\r\n};\r\n\r\n// FIXED C:N Ratio\r\nconst FIXED_CN_RATIO = 0.96;\r\n\r\n// --- Simulation Functions ---\r\n\r\nfunction linearInterpolate(data, x) {\r\n    if (!data || data.length === 0) return 0;\r\n    if (x <= data[0][0]) return data[0][1];\r\n    if (x >= data[data.length - 1][0]) return data[data.length - 1][1];\r\n    let i = 0;\r\n    while (i < data.length - 1 && x > data[i + 1][0]) i++;\r\n    const x0 = data[i][0], y0 = data[i][1], x1 = data[i + 1][0], y1 = data[i + 1][1];\r\n    const divisor = (x1 - x0);\r\n    if (divisor === 0) return y0;\r\n    const t = (x - x0) / divisor;\r\n    return y0 + t * (y1 - y0);\r\n}\r\n\r\nfunction derivatives(dydt, y, t, currentParams) {\r\n    const [ currentCO2, currentComplexC, currentMushroomYield, currentMycelium, currentN, currentSimpleC, currentSpace, currentTemp ] = y;\r\n    const initialDrySubstrateWeight = currentParams['Initial Dry Substrate Weight'] || 1;\r\n    const cnRatio = currentParams['Initial C:N Ratio']; // Use the C:N Ratio passed in currentParams\r\n    const cnRatioPlusOne = cnRatio + 1;\r\n    // InitC depends on weight and *actual* C:N ratio used\r\n    const InitC = initialDrySubstrateWeight - (initialDrySubstrateWeight / cnRatioPlusOne);\r\n    // Available N/C depend on the current state of N and SimpleC stocks\r\n    const AvailableN = initialDrySubstrateWeight > 0 ? currentN / initialDrySubstrateWeight : 0;\r\n    const AvailableC = initialDrySubstrateWeight > 0 ? currentSimpleC / initialDrySubstrateWeight : 0;\r\n    const NEffect = currentParams['N Coeff'] * AvailableN;\r\n    const CEffect = Math.sqrt(Math.max(0, currentParams['C Coeff'] * AvailableC));\r\n    const VolumeNormalisation = initialDrySubstrateWeight > 0 ? Math.sqrt(100 / initialDrySubstrateWeight) : Math.sqrt(100); // Avoid division by zero\r\n\r\n    // Effects based on interpolation\r\n    const Effect_of_CO2_on_Mush_Growth = linearInterpolate(currentParams['Effect of CO2 on Mush Growth Data'], currentCO2);\r\n    const Effect_of_CO2_on_Myc_Growth = linearInterpolate(currentParams['Effect of CO2 on Myc Growth Data'], currentCO2);\r\n    const Effect_of_pH_on_Mush_Growth = linearInterpolate(currentParams['Effect of pH on Mush Growth Data'], currentParams['pH']);\r\n    const Effect_of_pH_on_Myc_Growth = linearInterpolate(currentParams['Effect of pH on Myc Growth Data'], currentParams['pH']);\r\n    const Effect_of_Temp_on_Mush_Growth = linearInterpolate(currentParams['Effect of Temp on Mush Growth Data'], currentTemp);\r\n    const Effect_of_Temp_on_Myc_Growth = linearInterpolate(currentParams['Effect of Temp on Myc Growth Data'], currentTemp);\r\n\r\n    // Calculate combined effects based on IsMush flag\r\n    const TempEff_ = currentParams['IsMush'] === 0 ? Effect_of_Temp_on_Myc_Growth : Effect_of_Temp_on_Mush_Growth;\r\n    const TempEffect = (currentParams['Temp Coeff'] * TempEff_) / 10;\r\n    const pHEff_ = currentParams['IsMush'] === 0 ? Effect_of_pH_on_Myc_Growth : Effect_of_pH_on_Mush_Growth;\r\n    const pHEffect = pHEff_ * currentParams['pH Coeff'];\r\n    const CO2Eff_ = currentParams['IsMush'] === 0 ? Effect_of_CO2_on_Myc_Growth : Effect_of_CO2_on_Mush_Growth;\r\n    const CO2Effect = currentParams['CO2 Coeff'] * CO2Eff_;\r\n\r\n    // Ensure effects are non-negative before combining\r\n    const safeTempEffect = Math.max(0, TempEffect);\r\n    const safePhEffect = Math.max(0, pHEffect);\r\n    const safeNEffect = Math.max(0, NEffect);\r\n    const safeCEffect = Math.max(0, CEffect); // CEffect already handles sqrt(neg) via Math.max\r\n    const safeCO2Effect = Math.max(0, CO2Effect);\r\n\r\n    const RawGrowthRate = safeTempEffect * safePhEffect * safeNEffect * safeCEffect * safeCO2Effect;\r\n    const GrowthOpp = currentSpace * currentMycelium; // Space and Mycelium are state variables\r\n\r\n    let GrowthRate = currentParams['IsMush'] === 1\r\n        ? (RawGrowthRate * currentParams['Growth Coeff'])\r\n        : (RawGrowthRate * GrowthOpp * currentParams['Growth Coeff']);\r\n    GrowthRate = Math.max(0, GrowthRate); // Ensure non-negative growth rate\r\n\r\n    let NormGrowthRate = currentParams['IsMush'] === 1 ? (GrowthRate / 100) : GrowthRate;\r\n\r\n    // Calculate Flows\r\n    const flow_Breakdown = Math.max(0, currentMycelium * currentParams['C BD Rate'] * currentComplexC * RawGrowthRate * VolumeNormalisation);\r\n    const flow_CCons = Math.max(0, NormGrowthRate * currentParams['C Cons. Rate']);\r\n    const flow_CO2Prod = Math.max(0, NormGrowthRate * currentParams['CO2 Production Rate']);\r\n    const flow_CO2Vent = Math.max(0, currentParams['CO2 Removal Rate'] * (currentCO2 - currentParams['External CO2']) * VolumeNormalisation);\r\n    const flow_Colonisation = currentParams['IsMush'] === 0 ? GrowthRate : 0; // Already non-negative\r\n    const flow_MushroomGrowth = currentParams['IsMush'] === 1 ? Math.max(0, GrowthRate * currentParams['Mushroom Multiplier']) : 0;\r\n    const flow_NCons = Math.max(0, NormGrowthRate * currentParams['N Rate']);\r\n    const flow_TempProd = Math.max(0, NormGrowthRate * currentParams['Temp Production Rate']);\r\n    const flow_TempVent = Math.max(0, (currentTemp - currentParams['External Temp']) * currentParams['Temp Transfer Rate'] * VolumeNormalisation);\r\n\r\n    // Assign derivatives (rate of change for stocks)\r\n    dydt[0] = flow_CO2Prod - flow_CO2Vent; // dCO2/dt\r\n    dydt[1] = -flow_Breakdown; // dComplexC/dt\r\n    dydt[2] = flow_MushroomGrowth; // dMushroomYield/dt\r\n    dydt[3] = flow_Colonisation; // dMycelium/dt\r\n    dydt[4] = -flow_NCons; // dN/dt\r\n    dydt[5] = flow_Breakdown - flow_CCons; // dSimpleC/dt\r\n    dydt[6] = -flow_Colonisation; // dSpace/dt\r\n    dydt[7] = flow_TempProd - flow_TempVent; // dTemp/dt\r\n\r\n    // Apply non-negative constraints AFTER calculating net change\r\n    const epsilon = 1e-9; // Small threshold\r\n    if (currentCO2 <= epsilon && dydt[0] < 0) dydt[0] = 0;\r\n    if (currentComplexC <= epsilon && dydt[1] < 0) dydt[1] = 0;\r\n    if (currentMushroomYield <= epsilon && dydt[2] < 0) dydt[2] = 0;\r\n    if (currentMycelium <= epsilon && dydt[3] < 0) dydt[3] = 0;\r\n    if (currentN <= epsilon && dydt[4] < 0) dydt[4] = 0;\r\n    if (currentSimpleC <= epsilon && dydt[5] < 0) dydt[5] = 0;\r\n    if (currentSpace <= epsilon && dydt[6] < 0) dydt[6] = 0;\r\n    // Allow temp to drop but not below a reasonable floor (e.g., -273.15 C, though unlikely needed)\r\n    // if (currentTemp <= some_floor && dydt[7] < 0) dydt[7] = 0;\r\n}\r\n\r\n\r\nfunction getInitialState(p, initialMyceliumValue) {\r\n    const initialDrySubstrateWeight = Number(p['Initial Dry Substrate Weight']);\r\n    const cnRatio = Number(p['Initial C:N Ratio']); // Use the C:N Ratio passed in 'p'\r\n    const complexSimpleRatio = Number(p['Initial Complex:Simple Ratio']);\r\n\r\n    // Basic validation\r\n    if (isNaN(initialDrySubstrateWeight) || initialDrySubstrateWeight <= 0 || isNaN(cnRatio) || cnRatio <= 0 || isNaN(complexSimpleRatio)) {\r\n        console.error(\"Invalid parameters for getInitialState:\", p);\r\n        return [400, 200, 0, 0.01, 10, 50, 0.99, 25]; // Default state on error\r\n    }\r\n\r\n    const cnRatioPlusOne = cnRatio + 1;\r\n    const Init_N = initialDrySubstrateWeight / cnRatioPlusOne;\r\n    const Init_C = initialDrySubstrateWeight - Init_N; // Or initialDrySubstrateWeight * (cnRatio / cnRatioPlusOne)\r\n    const initialSpace = Math.max(0, 1 - initialMyceliumValue); // Ensure space isn't negative\r\n\r\n    return [\r\n        Number(p['External CO2']),        // 0: CO2\r\n        Init_C * complexSimpleRatio,      // 1: ComplexC\r\n        0,                                // 2: MushroomYield\r\n        initialMyceliumValue,             // 3: Mycelium\r\n        Init_N,                           // 4: N\r\n        Init_C * (1 - complexSimpleRatio),// 5: SimpleC\r\n        initialSpace,                     // 6: Space\r\n        Number(p['External Temp'])        // 7: Temp\r\n    ];\r\n}\r\n\r\nfunction runSimulation(inputParams, defaultParamSet) {\r\n    if (!defaultParamSet) {\r\n        console.error(\"runSimulation called without defaultParamSet!\");\r\n        return [];\r\n    }\r\n\r\n    // Merge parameters: defaults < inputs < forced values\r\n    const currentParams = {\r\n        ...defaultParamSet,\r\n        ...inputParams,\r\n        'Initial C:N Ratio': FIXED_CN_RATIO, // Force the C:N Ratio\r\n    };\r\n\r\n    // Extract final values needed for initial state calculation\r\n    const finalInitialWeight = Number(currentParams['Initial Dry Substrate Weight']);\r\n    const finalCNRatio = Number(currentParams['Initial C:N Ratio']); // Use the fixed ratio\r\n    const finalComplexSimpleRatio = Number(currentParams['Initial Complex:Simple Ratio']);\r\n    const finalExternalCO2 = Number(currentParams['External CO2']);\r\n    const finalExternalTemp = Number(currentParams['External Temp']);\r\n\r\n    // Determine initial mycelium based on the phase defined in currentParams\r\n    const initialMyceliumValue = currentParams['IsMush'] === 0\r\n        ? (currentParams['Initial Mycelium'] ?? 0.004) // Default for Mycelium phase\r\n        : (currentParams['Initial Mycelium'] ?? 0.9);  // Default for Mushroom phase\r\n\r\n    // Prepare parameters specifically for getInitialState\r\n    const initialStateParams = {\r\n        'Initial Dry Substrate Weight': finalInitialWeight,\r\n        'Initial C:N Ratio': finalCNRatio, // Pass the FIXED ratio here\r\n        'Initial Complex:Simple Ratio': finalComplexSimpleRatio,\r\n        'External CO2': finalExternalCO2,\r\n        'External Temp': finalExternalTemp,\r\n    };\r\n\r\n    const y0 = getInitialState(initialStateParams, initialMyceliumValue);\r\n\r\n    const t0 = currentParams.timeStart;\r\n    const dt = currentParams.timeStep;\r\n    const timeLength = Math.max(0, Number(currentParams.timeLength));\r\n    const positiveDt = Math.max(dt, 1e-6); // Ensure dt is positive and non-zero\r\n    const numSteps = timeLength > 0 && positiveDt > 0 ? Math.floor(timeLength / positiveDt) : 0;\r\n\r\n    const derivativeFuncForSolver = (dydt, y, t) => {\r\n        try { derivatives(dydt, y, t, currentParams); } // Pass the fully merged currentParams\r\n        catch (e) { console.error(\"Error in derivatives:\", e); dydt.fill(0); }\r\n    };\r\n\r\n    const integrator = odeRK4(y0, derivativeFuncForSolver, t0, positiveDt);\r\n    const results = [{ time: integrator.t, state: [...integrator.y] }];\r\n\r\n    const simType = currentParams['IsMush'] === 0 ? 'Mycelium' : 'Mushroom';\r\n    console.log(`Starting ${simType} simulation for ${timeLength} days.`);\r\n\r\n    if (numSteps <= 0) { console.warn(`${simType} Sim: timeLength or timeStep results in 0 steps.`); return []; }\r\n\r\n    for (let i = 0; i < numSteps; i++) {\r\n        try {\r\n            integrator.step();\r\n            if (integrator.y.some(val => !Number.isFinite(val))) {\r\n                console.error(`${simType} Sim: Non-finite value detected at t=${integrator.t.toFixed(2)}. State:`, integrator.y);\r\n                // Optional: break early if simulation becomes unstable\r\n                // break;\r\n            }\r\n            // Check non-negative constraint violation (example for Mycelium)\r\n            if (integrator.y[3] < 0) {\r\n                // console.warn(`${simType} Sim: Mycelium became negative at t=${integrator.t.toFixed(2)}, correcting to 0.`);\r\n                integrator.y[3] = 0; // Correct negative value\r\n            }\r\n            // Add similar checks and corrections for other state variables if needed\r\n\r\n            results.push({ time: integrator.t, state: [...integrator.y] });\r\n        } catch (solverError) {\r\n            console.error(`${simType} Sim: RK4 step error at t=${integrator.t.toFixed(2)}:`, solverError);\r\n            break; // Stop simulation on solver error\r\n        }\r\n    }\r\n    console.log(`${simType} simulation finished.`);\r\n    // Map results to named properties\r\n    return results.map(p => ({\r\n        time: p.time,\r\n        CO2: p.state[0],\r\n        ComplexC: p.state[1],\r\n        MushroomYield: p.state[2],\r\n        Mycelium: p.state[3],\r\n        N: p.state[4],\r\n        SimpleC: p.state[5],\r\n        Space: p.state[6],\r\n        Temp: p.state[7]\r\n    }));\r\n}\r\n// --- (End of Simulation Functions) ---\r\n\r\n// Register ChartJS components\r\nChartJS.register(LineElement, PointElement, Tooltip, Legend, CategoryScale, LinearScale, Title);\r\n\r\n// Helper function to format date (DD-MM-YYYY)\r\nfunction formatDate_DDMMYYYY(dateString) {\r\n    // Handles YYYY-MM-DD input\r\n    if (!dateString || dateString === 'N/A' || !/^\\d{4}-\\d{2}-\\d{2}$/.test(dateString)) {\r\n        return 'N/A';\r\n    }\r\n    try {\r\n        const [year, month, day] = dateString.split('-');\r\n        return `${day}-${month}-${year}`;\r\n    } catch (e) {\r\n        console.error(\"Error formatting date:\", e);\r\n        return 'N/A';\r\n    }\r\n}\r\n\r\n// Helper function to calculate end date and format it\r\nfunction calculateAndFormatEndDate(startDateStr, durationDays) {\r\n    if (!startDateStr || startDateStr === 'N/A' || !/^\\d{4}-\\d{2}-\\d{2}$/.test(startDateStr) || isNaN(durationDays) || durationDays < 0) {\r\n        return 'N/A'; // Invalid input\r\n    }\r\n    try {\r\n        const startDateObj = new Date(startDateStr);\r\n        // Important: Create a *new* date object to avoid modifying the original\r\n        const endDateObj = new Date(startDateObj.getTime());\r\n        endDateObj.setDate(endDateObj.getDate() + durationDays);\r\n\r\n        // Format the calculated end date back to YYYY-MM-DD for the formatter function\r\n        const endYear = endDateObj.getFullYear();\r\n        const endMonth = String(endDateObj.getMonth() + 1).padStart(2, '0'); // Month is 0-indexed\r\n        const endDay = String(endDateObj.getDate()).padStart(2, '0');\r\n        const endDateStrYYYYMMDD = `${endYear}-${endMonth}-${endDay}`;\r\n\r\n        return formatDate_DDMMYYYY(endDateStrYYYYMMDD); // Use existing formatter\r\n    } catch (dateError) {\r\n        console.error(\"Error calculating end date:\", dateError);\r\n        return 'N/A';\r\n    }\r\n}\r\n\r\n\r\n// --- React Component ---\r\nconst GrowthSimulation = () => {\r\n    const navigate = useNavigate();\r\n    const [simulationResultsMushroom, setSimulationResultsMushroom] = useState(null);\r\n    const [simulationResultsMycelium, setSimulationResultsMycelium] = useState(null);\r\n    const [isLoading, setIsLoading] = useState(true);\r\n    const [error, setError] = useState(null);\r\n    const [batchName, setBatchName] = useState('');\r\n    const [startDate, setStartDate] = useState(''); // Will store YYYY-MM-DD\r\n    const [endDate, setEndDate] = useState('N/A'); // <<< State for formatted DD-MM-YYYY end date\r\n    const [finalSimulatedYield, setFinalSimulatedYield] = useState(null);\r\n    const [activeChartTab, setActiveChartTab] = useState('yield'); // Default to yield\r\n\r\n    const LOCAL_STORAGE_KEYS = {\r\n        TEMPERATURE: 'sim_temperature',\r\n        PH: 'sim_ph',\r\n        SUBSTRATE: 'sim_substrate',\r\n        SIMULATION_DAYS: 'sim_duration',\r\n        BATCH_NAME: 'sim_batch_name',\r\n        START_DATE: 'sim_start_date', // Expects YYYY-MM-DD\r\n    };\r\n\r\n    useEffect(() => {\r\n        let isMounted = true;\r\n        setIsLoading(true);\r\n        setError(null);\r\n        setFinalSimulatedYield(null);\r\n        setSimulationResultsMushroom(null);\r\n        setSimulationResultsMycelium(null);\r\n        setEndDate('N/A'); // Reset end date on each run\r\n\r\n        const runSimulationsAsync = async () => {\r\n            await new Promise(resolve => setTimeout(resolve, 50));\r\n            if (!isMounted) return;\r\n\r\n            let savedTempStr, savedPhStr, savedSubstrateJson, savedDaysStr, savedBatchName, savedStartDateStr;\r\n            try {\r\n                savedTempStr = localStorage.getItem(LOCAL_STORAGE_KEYS.TEMPERATURE);\r\n                savedPhStr = localStorage.getItem(LOCAL_STORAGE_KEYS.PH);\r\n                savedSubstrateJson = localStorage.getItem(LOCAL_STORAGE_KEYS.SUBSTRATE);\r\n                savedDaysStr = localStorage.getItem(LOCAL_STORAGE_KEYS.SIMULATION_DAYS);\r\n                savedBatchName = localStorage.getItem(LOCAL_STORAGE_KEYS.BATCH_NAME) || 'N/A';\r\n                savedStartDateStr = localStorage.getItem(LOCAL_STORAGE_KEYS.START_DATE) || 'N/A'; // Expect YYYY-MM-DD\r\n\r\n                if (isMounted) {\r\n                    setBatchName(savedBatchName);\r\n                    setStartDate(savedStartDateStr); // Store the raw YYYY-MM-DD start date\r\n                }\r\n\r\n                const missingParams = [];\r\n                if (savedTempStr === null) missingParams.push('Temperature');\r\n                if (savedPhStr === null) missingParams.push('pH');\r\n                if (savedSubstrateJson === null) missingParams.push('Substrate');\r\n                if (savedDaysStr === null) missingParams.push('Duration');\r\n                // Start date is optional for simulation but needed for end date display\r\n                // if (savedStartDateStr === 'N/A') missingParams.push('Start Date');\r\n\r\n                if (missingParams.length > 0) {\r\n                    throw new Error(`Missing required parameters: ${missingParams.join(', ')}. Please set in Condition Settings.`);\r\n                }\r\n\r\n                const temp = parseFloat(savedTempStr);\r\n                const phValue = parseFloat(savedPhStr);\r\n                const days = parseInt(savedDaysStr, 10);\r\n                let substrateData = null; let initialWeight = 0;\r\n                try {\r\n                    substrateData = JSON.parse(savedSubstrateJson);\r\n                    if (typeof substrateData !== 'object' || substrateData === null) throw new Error(\"Invalid substrate format.\");\r\n                    initialWeight = Object.values(substrateData).reduce((sum, val) => sum + (Number(val) || 0), 0);\r\n                    if (initialWeight <= 0) console.warn(\"Initial substrate weight is zero or negative.\");\r\n                } catch (parseError) { throw new Error(`Invalid substrate data: ${parseError.message}`); }\r\n\r\n                if (isNaN(temp) || isNaN(phValue) || isNaN(initialWeight) || isNaN(days) || days < 0) {\r\n                    throw new Error(\"Invalid or missing numerical parameters loaded.\");\r\n                }\r\n\r\n                const simulationDuration = days; // Use the parsed days directly\r\n\r\n                // --- Calculate End Date ---\r\n                const calculatedEndDate = calculateAndFormatEndDate(savedStartDateStr, simulationDuration);\r\n                if (isMounted) {\r\n                    setEndDate(calculatedEndDate); // Set the formatted end date state\r\n                }\r\n                // --- End Calculate End Date ---\r\n\r\n\r\n                const simulationInputs = {\r\n                    'External Temp': temp,\r\n                    'pH': phValue,\r\n                    'Initial Dry Substrate Weight': initialWeight,\r\n                    'timeLength': simulationDuration,\r\n                };\r\n\r\n                console.log(\"Running Mushroom Simulation...\");\r\n                const resultsMushroom = runSimulation(simulationInputs, defaultParamsMushroom);\r\n\r\n                console.log(\"Running Mycelium Simulation...\");\r\n                const resultsMycelium = runSimulation(simulationInputs, defaultParamsMycelium);\r\n\r\n                if (isMounted) {\r\n                    setSimulationResultsMushroom(resultsMushroom);\r\n                    setSimulationResultsMycelium(resultsMycelium);\r\n\r\n                    if (resultsMushroom && resultsMushroom.length > 0) {\r\n                        const lastMushroomResult = resultsMushroom[resultsMushroom.length - 1];\r\n                         if (lastMushroomResult && Number.isFinite(lastMushroomResult.MushroomYield)) {\r\n                            setFinalSimulatedYield(lastMushroomResult.MushroomYield);\r\n                        } else {\r\n                            setFinalSimulatedYield(null); // Set to null if not finite\r\n                        }\r\n                    } else {\r\n                        setFinalSimulatedYield(null); // Set to null if no results\r\n                    }\r\n                    console.log(\"Both simulations complete.\");\r\n                }\r\n\r\n            } catch (err) {\r\n                console.error(\"Error during simulation setup or run:\", err);\r\n                if (isMounted) setError(err.message || \"Failed to run simulation.\");\r\n            } finally {\r\n                if (isMounted) setIsLoading(false);\r\n            }\r\n        };\r\n\r\n        runSimulationsAsync();\r\n\r\n        return () => { isMounted = false; };\r\n    }, []); // Keep dependency array empty\r\n\r\n    const handleBackClick = () => { navigate('/condition-setting'); };\r\n\r\n    // --- getChartConfig function (no changes needed here) ---\r\n    const getChartConfig = () => {\r\n      const currentResultsSource = activeChartTab === 'mycelium'\r\n          ? simulationResultsMycelium\r\n          : simulationResultsMushroom; // Default to mushroom sim for yield/temp\r\n\r\n      // Default options setup\r\n      const yieldColor = '#2E7D32'; const tempColor = '#C62828'; const myceliumColor = '#1976D2';\r\n      const textColor = '#333'; const gridColor = 'rgba(0, 0, 0, 0.08)';\r\n      const font = { family: 'Lexend' };\r\n      const options = {\r\n          responsive: true, maintainAspectRatio: false,\r\n          plugins: {\r\n              legend: { display: true, labels: { color: textColor, font: font } },\r\n              tooltip: { enabled: true, bodyFont: font, titleFont: font },\r\n              title: { display: true, text: '', color: textColor, font: { ...font, size: 16 } }\r\n            },\r\n          scales: {\r\n              x: { type: 'linear', title: { display: true, text: 'Time (Days)', color: textColor, font: font }, ticks: { color: textColor, font: font }, grid: { color: gridColor }, min: 0, max: undefined },\r\n              yYield: { type: 'linear', position: 'left', title: { display: true, text: 'Mushroom Yield (g)', color: yieldColor, font: font }, ticks: { color: yieldColor, font: font }, grid: { drawOnChartArea: true, color: gridColor }, beginAtZero: true, display: false },\r\n              yTemp: { type: 'linear', position: 'left', title: { display: true, text: 'Temperature (°C)', color: tempColor, font: font }, ticks: { color: tempColor, font: font }, grid: { drawOnChartArea: true, color: gridColor }, display: false }, // Display temp on left too for simplicity unless specified otherwise\r\n              yMycelium: { type: 'linear', position: 'left', title: { display: true, text: 'Mycelium Density', color: myceliumColor, font: font }, ticks: { color: myceliumColor, font: font }, grid: { drawOnChartArea: true, color: gridColor }, beginAtZero: true, suggestedMax: 1, display: false } // Shared left axis if only one is shown\r\n          }\r\n      };\r\n\r\n      // Reset display flags\r\n      options.scales.yYield.display = false;\r\n      options.scales.yTemp.display = false;\r\n      options.scales.yMycelium.display = false;\r\n\r\n      if (!currentResultsSource || currentResultsSource.length === 0) {\r\n          console.log(`No data available for tab: ${activeChartTab}`);\r\n          return { data: { datasets: [] }, options: options };\r\n      }\r\n\r\n      let datasets = [];\r\n      let chartData = [...currentResultsSource]; // Use a copy\r\n      let dataSourceName = '';\r\n\r\n      switch (activeChartTab) {\r\n          case 'yield':\r\n              dataSourceName = 'Mushroom Sim';\r\n              options.plugins.title.text = `Yield Over Time (${dataSourceName})`;\r\n              options.scales.yYield.display = true; // Show yield axis\r\n              datasets = [{ label: 'Mushroom Yield (g)', data: chartData.map(p => ({ x: p.time, y: Number.isFinite(p.MushroomYield) ? p.MushroomYield : null })), borderColor: yieldColor, backgroundColor: 'rgba(46, 125, 50, 0.1)', yAxisID: 'yYield', }];\r\n              // Set X axis max based on the full duration of this dataset\r\n              options.scales.x.max = chartData.length > 0 ? chartData[chartData.length - 1].time : undefined;\r\n              break;\r\n          case 'temp':\r\n              dataSourceName = 'Mushroom Sim';\r\n              options.plugins.title.text = `Temperature Over Time (${dataSourceName})`;\r\n              options.scales.yTemp.display = true; // Show temp axis\r\n              datasets = [{ label: 'Temperature (°C)', data: chartData.map(p => ({ x: p.time, y: Number.isFinite(p.Temp) ? p.Temp : null })), borderColor: tempColor, backgroundColor: 'rgba(198, 40, 40, 0.1)', yAxisID: 'yTemp', }];\r\n              // Set X axis max based on the full duration of this dataset\r\n               options.scales.x.max = chartData.length > 0 ? chartData[chartData.length - 1].time : undefined;\r\n              break;\r\n          case 'mycelium':\r\n              dataSourceName = 'Mycelium Sim';\r\n              options.plugins.title.text = `Mycelium Growth (${dataSourceName})`;\r\n              options.scales.yMycelium.display = true; // Show mycelium axis\r\n\r\n              // Apply cutoff logic for Mycelium chart\r\n              let cutoffIndex = chartData.findIndex(p => p.Mycelium >= 0.9);\r\n              let finalTime = chartData.length > 0 ? chartData[chartData.length - 1].time : 0;\r\n              let cutoffReason = \"Simulation End\";\r\n\r\n              if (cutoffIndex !== -1) { // Found >= 0.9\r\n                  chartData = chartData.slice(0, cutoffIndex + 1);\r\n                  finalTime = chartData[chartData.length - 1].time;\r\n                  cutoffReason = \"Mycelium >= 0.9\";\r\n                  console.log(`Mycelium chart cutoff at index ${cutoffIndex}, time ${finalTime.toFixed(2)} (${cutoffReason})`);\r\n              } else { // Threshold not met, check day 30\r\n                  const day30Index = chartData.findIndex(p => p.time >= 30);\r\n                  if (day30Index !== -1) { // Found day >= 30\r\n                      chartData = chartData.slice(0, day30Index + 1);\r\n                      finalTime = chartData[chartData.length - 1].time;\r\n                      cutoffReason = \"Day 30 Limit\";\r\n                      console.log(`Mycelium chart cutoff at index ${day30Index}, time ${finalTime.toFixed(2)} (${cutoffReason})`);\r\n                  } else { // Less than 30 days simulated AND threshold not met\r\n                       console.log(`Mycelium threshold 0.9 not reached and simulation ended before day 30 (t=${finalTime.toFixed(2)}). Showing all data.`);\r\n                      // finalTime is already the end of simulation\r\n                  }\r\n              }\r\n\r\n              // Set max time for X-axis based on cutoff or full duration\r\n              options.scales.x.max = finalTime;\r\n\r\n              // Add cutoff reason to title if applicable\r\n              if (cutoffReason !== \"Simulation End\") {\r\n                  options.plugins.title.text += ` (Stopped at ${cutoffReason})`;\r\n              }\r\n\r\n              datasets = [{\r\n                  label: 'Mycelium Density',\r\n                  data: chartData.map(p => ({ x: p.time, y: Number.isFinite(p.Mycelium) ? p.Mycelium : null })),\r\n                  borderColor: myceliumColor, backgroundColor: 'rgba(25, 118, 210, 0.1)', yAxisID: 'yMycelium',\r\n              }];\r\n              break;\r\n          default:\r\n              datasets = [];\r\n      }\r\n\r\n      // Final check for empty datasets or data within dataset\r\n      const finalDatasets = datasets && datasets.length > 0\r\n          ? datasets.map(ds => ({\r\n                ...ds,\r\n                tension: 0.1,\r\n                pointRadius: ds.data?.length > 100 ? 0 : 2, // Reduce points for many data points\r\n                spanGaps: true // Connect lines over null data points\r\n            })).filter(ds => ds.data && ds.data.length > 0) // Filter out datasets with no actual data points\r\n          : [];\r\n\r\n      if (finalDatasets.length === 0) {\r\n           console.log(`No valid data points found for tab: ${activeChartTab}`);\r\n      }\r\n\r\n      return {\r\n            data: { datasets: finalDatasets },\r\n            options: options\r\n      };\r\n    };\r\n    // --- End getChartConfig function ---\r\n\r\n\r\n    const chartConfig = getChartConfig();\r\n    const simulationDataReady = simulationResultsMushroom || simulationResultsMycelium; // Check if *either* result set is available\r\n\r\n    return (\r\n        <div className=\"growth-simulation\">\r\n            <header className=\"simulation-header\">\r\n                <div className=\"logobox\">\r\n                    <button onClick={handleBackClick} className=\"back-button\" title=\"Back to Settings\">&larr;</button>\r\n                    <div className=\"logo\"><img src={logoSrc} alt=\"City Sprouts Logo\" /></div>\r\n                </div>\r\n                <div className=\"batch-info\">\r\n                    <span className=\"batch-name\">Batch: {batchName}</span>\r\n                    {/* Display formatted start date */}\r\n                    <span className=\"start-date\">Start Date: {formatDate_DDMMYYYY(startDate)}</span>\r\n                </div>\r\n            </header>\r\n            <main className=\"main-content-grid\">\r\n                <div className=\"animation-area content-card\"><span>Animation Area (Placeholder)</span></div>\r\n                <div className=\"chart-results-column\">\r\n                    <div className=\"tabs-container\">\r\n                          {/* Select 'yield' by default */}\r\n                         <button onClick={() => setActiveChartTab('yield')} className={`tab-button ${activeChartTab === 'yield' ? 'tab-button-active' : ''}`}> Yield </button>\r\n                         <button onClick={() => setActiveChartTab('temp')} className={`tab-button ${activeChartTab === 'temp' ? 'tab-button-active' : ''}`}> Temperature </button>\r\n                         <button onClick={() => setActiveChartTab('mycelium')} className={`tab-button ${activeChartTab === 'mycelium' ? 'tab-button-active' : ''}`}> Mycelium </button>\r\n                    </div>\r\n                    <div className=\"chart-area content-card\">\r\n                        {isLoading && <p className=\"loading-message\">Running simulations...</p>}\r\n                        {error && <p className=\"error-message\">Error: {error}</p>}\r\n                        {!isLoading && !error && simulationDataReady && (\r\n                            // Check if the *specific* chart config has data\r\n                            chartConfig.data.datasets.length > 0 ? (\r\n                                <div className=\"chart-container\"> <Line options={chartConfig.options} data={chartConfig.data} /> </div>\r\n                            ) : (\r\n                                <p className=\"no-data-message\">No simulation data available for the '{activeChartTab}' chart.</p>\r\n                            )\r\n                        )}\r\n                        {/* Fallback if simulations haven't run or failed early */}\r\n                        {!isLoading && !error && !simulationDataReady && <p className=\"no-data-message\">Simulation results not available.</p>}\r\n                    </div>\r\n                    {/* --- MODIFIED RESULTS SECTION --- */}\r\n                    <div className=\"results-section content-card\">\r\n                        <h3 className=\"results-heading\"> Results <span className=\"info-icon\" title=\"Projected yield from Mushroom phase simulation.\">i</span> </h3>\r\n                        <div className=\"results-items\">\r\n                            <div className=\"result-item\">\r\n                                <span className=\"result-label\">Projected Yield:</span>\r\n                                <span className=\"result-value\">\r\n                                    {isLoading ? '...' : error ? 'Error' : (finalSimulatedYield !== null && Number.isFinite(finalSimulatedYield)) ? `${finalSimulatedYield.toFixed(1)}g` : 'N/A'}\r\n                                </span>\r\n                            </div>\r\n                            <div className=\"result-item\">\r\n                                <span className=\"result-label\">Projected End Date:</span>\r\n                                <span className=\"result-value\">\r\n                                    {/* Use the 'endDate' state variable */}\r\n                                    {isLoading ? '...' : error ? 'Error' : endDate}\r\n                                </span>\r\n                            </div>\r\n                            {/* C:N Ratio display REMOVED */}\r\n                        </div>\r\n                    </div>\r\n                    {/* --- END MODIFIED RESULTS SECTION --- */}\r\n                </div>\r\n            </main>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default GrowthSimulation;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}