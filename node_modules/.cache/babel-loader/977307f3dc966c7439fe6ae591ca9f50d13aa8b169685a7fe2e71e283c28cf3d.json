{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\celst\\\\sds\\\\src\\\\components\\\\GrowthSimulation.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { Line } from 'react-chartjs-2';\nimport { Chart as ChartJS, LineElement, PointElement, Tooltip, Legend, CategoryScale, LinearScale } from 'chart.js';\nimport odeRK4 from 'ode-rk4'; // Import the RK4 library\n\nimport '../styles/GrowthSimulation.css'; // Make sure you have some basic CSS\n\n// Register required components for Chart.js\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nChartJS.register(LineElement, PointElement, Tooltip, Legend, CategoryScale, LinearScale);\n\n// --- Simulation Logic (Adapted from the scaffold) ---\n\n// Helper function for Converters (Linear Interpolation)\nfunction linearInterpolate(data, x) {\n  if (!data || data.length === 0) return 0;\n  if (x <= data[0][0]) return data[0][1];\n  if (x >= data[data.length - 1][0]) return data[data.length - 1][1];\n  let i = 0;\n  while (i < data.length - 1 && x > data[i + 1][0]) i++;\n  const x0 = data[i][0],\n    y0 = data[i][1],\n    x1 = data[i + 1][0],\n    y1 = data[i + 1][1];\n  const divisor = x1 - x0;\n  if (divisor === 0) return y0;\n  const t = (x - x0) / divisor;\n  return y0 + t * (y1 - y0);\n}\n\n// Default Model Parameters (can be overridden by inputs)\nconst defaultParams = {\n  timeStart: 0,\n  timeLength: 100,\n  timeStep: 0.2,\n  // Default timeLength is 100\n  'C BD Rate': 1.11,\n  'C Coeff': 0.7,\n  'C Cons. Rate': 76.39,\n  'CO2 Coeff': 0.8,\n  'CO2 Production Rate': 410000,\n  'CO2 Removal Rate': 12.6,\n  'External CO2': 428.23,\n  'External Temp': 24,\n  'Growth Coeff': 5.1,\n  'Initial C:N Ratio': 43.58,\n  'Initial Complex:Simple Ratio': 0.8054,\n  'Initial Dry Substrate Weight': 410.2,\n  'IsMush': 1,\n  'Mushroom Multiplier': 5.17,\n  'N Coeff': 68.4,\n  'N Rate': 13.03,\n  'pH': 6.91,\n  'pH Coeff': 1.4,\n  'Temp Coeff': 1.3,\n  'Temp Production Rate': 405,\n  'Temp Transfer Rate': 1.5,\n  'Effect of CO2 on Mush Growth Data': [[500, 0.9], [800, 1], [1000, 0.8], [1200, 0.25], [1400, 0]],\n  'Effect of CO2 on Myc Growth Data': [[15000, 1], [20000, 0.9], [25000, 0.25], [30000, 0]],\n  'Effect of pH on Mush Growth Data': [[5.5, 0], [6, 0.25], [6.7, 1], [7, 0.6], [7.5, 0]],\n  'Effect of pH on Myc Growth Data': [[5.8, 0], [6, 0.25], [6.7, 1], [7, 0.6], [7.5, 0]],\n  'Effect of Temp on Mush Growth Data': [[10, 0], [15, 5.37], [20, 6.36], [25, 8.63], [30, 6.37], [40, 0]],\n  'Effect of Temp on Myc Growth Data': [[10, 0], [15, 5.37], [20, 6.36], [25, 8.63], [30, 6.37], [35, 5.36], [45, 0]]\n};\n\n// Derivative Function for RK4 Solver\n// *** THIS FUNCTION IS INCOMPLETE - NEEDS ALL MODEL EQUATIONS FILLED IN ***\nfunction derivatives(dydt, y, t, currentParams) {\n  const [currentCO2, currentComplexC, currentMushroomYield, currentMycelium, currentN, currentSimpleC, currentSpace, currentTemp] = y;\n  const initialDrySubstrateWeight = currentParams['Initial Dry Substrate Weight'] || 1;\n  const cnRatioPlusOne = currentParams['Initial C:N Ratio'] + 1 || 1;\n  const InitC = initialDrySubstrateWeight - initialDrySubstrateWeight / cnRatioPlusOne;\n  const AvailableN = currentN / initialDrySubstrateWeight;\n  const AvailableC = currentSimpleC / initialDrySubstrateWeight;\n  const NEffect = currentParams['N Coeff'] * AvailableN;\n  const CEffect = Math.sqrt(Math.max(0, currentParams['C Coeff'] * AvailableC));\n  const VolumeNormalisation = Math.sqrt(100 / initialDrySubstrateWeight);\n  const Effect_of_CO2_on_Mush_Growth = linearInterpolate(currentParams['Effect of CO2 on Mush Growth Data'], currentCO2);\n  const Effect_of_CO2_on_Myc_Growth = linearInterpolate(currentParams['Effect of CO2 on Myc Growth Data'], currentCO2);\n  const Effect_of_pH_on_Mush_Growth = linearInterpolate(currentParams['Effect of pH on Mush Growth Data'], currentParams['pH']);\n  const Effect_of_pH_on_Myc_Growth = linearInterpolate(currentParams['Effect of pH on Myc Growth Data'], currentParams['pH']);\n  const Effect_of_Temp_on_Mush_Growth = linearInterpolate(currentParams['Effect of Temp on Mush Growth Data'], currentTemp);\n  const Effect_of_Temp_on_Myc_Growth = linearInterpolate(currentParams['Effect of Temp on Myc Growth Data'], currentTemp);\n  const TempEff_ = currentParams['IsMush'] === 0 ? Effect_of_Temp_on_Myc_Growth : Effect_of_Temp_on_Mush_Growth;\n  const TempEffect = currentParams['Temp Coeff'] * TempEff_ / 10;\n  const pHEff_ = currentParams['IsMush'] === 0 ? Effect_of_pH_on_Myc_Growth : Effect_of_pH_on_Mush_Growth;\n  const pHEffect = pHEff_ * currentParams['pH Coeff'];\n  const CO2Eff_ = currentParams['IsMush'] === 0 ? Effect_of_CO2_on_Myc_Growth : Effect_of_CO2_on_Mush_Growth;\n  const CO2Effect = currentParams['CO2 Coeff'] * CO2Eff_;\n  const RawGrowthRate = TempEffect * pHEffect * NEffect * CEffect * CO2Effect;\n  const GrowthOpp = currentSpace * currentMycelium;\n  let GrowthRate = currentParams['IsMush'] === 1 ? RawGrowthRate * currentParams['Growth Coeff'] : RawGrowthRate * GrowthOpp * currentParams['Growth Coeff'];\n  let NormGrowthRate = currentParams['IsMush'] === 1 ? GrowthRate / 100 : GrowthRate;\n\n  // *** ADD ALL OTHER VARIABLE EQUATIONS FROM YOUR MODEL HERE ***\n\n  const flow_Breakdown = currentMycelium * currentParams['C BD Rate'] * currentComplexC * RawGrowthRate * VolumeNormalisation;\n  const flow_CCons = NormGrowthRate * currentParams['C Cons. Rate'];\n  const flow_CO2Prod = NormGrowthRate * currentParams['CO2 Production Rate'];\n  const flow_CO2Vent = currentParams['CO2 Removal Rate'] * (currentCO2 - currentParams['External CO2']) * VolumeNormalisation;\n  const flow_Colonisation = currentParams['IsMush'] === 0 ? GrowthRate : 0;\n  const flow_MushroomGrowth = currentParams['IsMush'] === 1 ? GrowthRate * currentParams['Mushroom Multiplier'] : 0;\n  const flow_NCons = NormGrowthRate * currentParams['N Rate'];\n  const flow_TempProd = NormGrowthRate * currentParams['Temp Production Rate'];\n  const flow_TempVent = (currentTemp - currentParams['External Temp']) * currentParams['Temp Transfer Rate'] * VolumeNormalisation;\n  dydt[0] = flow_CO2Prod - flow_CO2Vent;\n  dydt[1] = -flow_Breakdown;\n  dydt[2] = flow_MushroomGrowth;\n  dydt[3] = flow_Colonisation;\n  dydt[4] = -flow_NCons;\n  dydt[5] = flow_Breakdown - flow_CCons;\n  dydt[6] = -flow_Colonisation;\n  dydt[7] = flow_TempProd - flow_TempVent;\n  if (currentCO2 <= 0 && dydt[0] < 0) dydt[0] = 0;\n  if (currentComplexC <= 0 && dydt[1] < 0) dydt[1] = 0;\n  if (currentN <= 0 && dydt[4] < 0) dydt[4] = 0;\n  if (currentSimpleC <= 0 && dydt[5] < 0) dydt[5] = 0;\n  if (currentTemp <= 0 && dydt[7] < 0) dydt[7] = 0;\n}\n\n// Initial State Calculation\nfunction getInitialState(p) {\n  const initialDrySubstrateWeight = Number(p['Initial Dry Substrate Weight']) || 1;\n  const cnRatioPlusOne = (Number(p['Initial C:N Ratio']) || 0) + 1;\n  const complexSimpleRatio = Number(p['Initial Complex:Simple Ratio']) || 0;\n  const Init_C = initialDrySubstrateWeight - initialDrySubstrateWeight / cnRatioPlusOne;\n  return [Number(p['External CO2']) || 0, Init_C * complexSimpleRatio, 0, 0.9, initialDrySubstrateWeight / cnRatioPlusOne, Init_C * (1 - complexSimpleRatio), 0.98, Number(p['External Temp']) || 0];\n}\n\n// Run Simulation Function\nfunction runSimulation(inputParams) {\n  const currentParams = {\n    ...defaultParams,\n    ...inputParams\n  };\n  const y0 = getInitialState(currentParams);\n  const t0 = currentParams.timeStart;\n  const dt = currentParams.timeStep;\n  const timeLength = Math.max(0, currentParams.timeLength); // Use timeLength from params\n  const positiveDt = Math.max(dt, 1e-6);\n  const numSteps = Math.floor(timeLength / positiveDt);\n  const derivativeFuncForSolver = (dydt, y, t) => {\n    try {\n      derivatives(dydt, y, t, currentParams);\n    } catch (e) {\n      console.error(\"Error in derivatives:\", e);\n      dydt.fill(0);\n    }\n  };\n  const integrator = odeRK4(y0, derivativeFuncForSolver, t0, positiveDt);\n  const results = [{\n    time: integrator.t,\n    state: [...integrator.y]\n  }];\n  console.log(`Starting JS simulation for ${timeLength} days...`); // Log correct duration\n  if (numSteps <= 0) {\n    console.warn(\"Simulation length or time step results in zero steps.\");\n    return [];\n  }\n  for (let i = 0; i < numSteps; i++) {\n    try {\n      integrator.step();\n      if (integrator.y.some(val => !Number.isFinite(val))) {\n        console.error(\"Simulation unstable: Non-finite number detected at t=\", integrator.t);\n      }\n      results.push({\n        time: integrator.t,\n        state: [...integrator.y]\n      });\n    } catch (solverError) {\n      console.error(\"Error during RK4 step:\", solverError);\n      break;\n    }\n  }\n  console.log(\"JS simulation finished.\");\n  const processedResults = results.map(point => ({\n    time: point.time,\n    CO2: point.state[0],\n    ComplexC: point.state[1],\n    MushroomYield: point.state[2],\n    Mycelium: point.state[3],\n    N: point.state[4],\n    SimpleC: point.state[5],\n    Space: point.state[6],\n    Temp: point.state[7]\n  }));\n  return processedResults;\n}\n\n// --- React Component ---\nconst GrowthSimulation = () => {\n  _s();\n  const navigate = useNavigate();\n  const [simulationResults, setSimulationResults] = useState(null);\n  const [isLoading, setIsLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [displayConditions, setDisplayConditions] = useState({\n    substrate: {},\n    temperature: 0,\n    ph: 0,\n    yieldValue: 0,\n    // yieldValue is initial substrate weight here\n    days: defaultParams.timeLength // Default days\n  });\n  const [calculatedInitialWeight, setCalculatedInitialWeight] = useState(0);\n  const [finalSimulatedYield, setFinalSimulatedYield] = useState(null); // State for final yield\n\n  useEffect(() => {\n    let isMounted = true;\n    setIsLoading(true);\n    setError(null);\n    setFinalSimulatedYield(null); // Reset final yield on new run\n\n    setTimeout(() => {\n      if (!isMounted) return;\n      try {\n        const savedTemperature = localStorage.getItem('temperature');\n        const savedPh = localStorage.getItem('ph');\n        const savedSubstrateJson = localStorage.getItem('substrate');\n        const savedYield = localStorage.getItem('yield'); // This is initial substrate weight\n        const savedDays = localStorage.getItem('simulationDays');\n        if (!savedTemperature || !savedPh || !savedSubstrateJson || !savedDays) {\n          throw new Error(\"Required parameters not found in localStorage.\");\n        }\n        const substrateData = JSON.parse(savedSubstrateJson);\n        if (typeof substrateData !== 'object' || substrateData === null) {\n          throw new Error(\"Invalid substrate data found in localStorage.\");\n        }\n        const temp = parseFloat(savedTemperature);\n        const phValue = parseFloat(savedPh);\n        const days = parseInt(savedDays, 10);\n        const initialWeight = Object.values(substrateData).reduce((sum, val) => sum + (Number(val) || 0), 0);\n        setCalculatedInitialWeight(initialWeight);\n        const simulationDuration = Number.isInteger(days) && days > 0 ? days : defaultParams.timeLength;\n        if (isNaN(temp) || isNaN(phValue) || isNaN(initialWeight)) {\n          throw new Error(\"Invalid numerical parameters loaded from localStorage.\");\n        }\n        setDisplayConditions({\n          substrate: substrateData,\n          temperature: temp,\n          ph: phValue,\n          yieldValue: parseFloat(savedYield) || 0,\n          // Store initial substrate weight for reference\n          days: simulationDuration\n        });\n        const simulationInputs = {\n          'External Temp': temp,\n          'pH': phValue,\n          'Initial Dry Substrate Weight': initialWeight > 0 ? initialWeight : defaultParams['Initial Dry Substrate Weight'],\n          'timeLength': simulationDuration // Use user-specified duration\n        };\n        const results = runSimulation(simulationInputs);\n        if (isMounted) {\n          setSimulationResults(results);\n          // Calculate and store final simulated yield\n          if (results && results.length > 0) {\n            var _results;\n            const lastYield = (_results = results[results.length - 1]) === null || _results === void 0 ? void 0 : _results.MushroomYield;\n            if (Number.isFinite(lastYield)) {\n              setFinalSimulatedYield(lastYield);\n            }\n          }\n        }\n      } catch (err) {\n        console.error(\"Error during simulation setup or run:\", err);\n        if (isMounted) setError(err.message || \"Failed to run simulation.\");\n      } finally {\n        if (isMounted) setIsLoading(false);\n      }\n    }, 50);\n    return () => {\n      isMounted = false;\n    };\n  }, [navigate]);\n  const handleBackClick = () => {\n    navigate('/condition-setting');\n  };\n  const handleViewReportClick = () => {\n    const formatDate = date => {\n      const day = String(date.getDate()).padStart(2, '0');\n      const month = String(date.getMonth() + 1).padStart(2, '0');\n      const year = date.getFullYear();\n      return `${day}/${month}/${year}`;\n    };\n\n    // --- Use the final simulated yield if available ---\n    const yieldToSave = Number.isFinite(finalSimulatedYield) ? `${finalSimulatedYield.toFixed(2)}g (Simulated)` : `${displayConditions.yieldValue}g (Initial Substrate)`; // Fallback to initial substrate weight if sim fails\n\n    const newEntry = {\n      days: displayConditions.days,\n      // The duration the simulation ran for\n      yield: yieldToSave,\n      // Use calculated final yield\n      substrate: Object.entries(displayConditions.substrate).map(([key, value]) => {\n        const displayNames = {\n          riceBran: 'Rice Bran',\n          corn: 'Corn Cob',\n          sugarcane: 'Sugarcane',\n          sawdust: 'Sawdust'\n        };\n        return `${displayNames[key] || key}: ${value}g`;\n      }).join(', '),\n      conditions: `Temperature: ${displayConditions.temperature}°C, pH: ${displayConditions.ph}`,\n      date: formatDate(new Date())\n    };\n    try {\n      const existingHistory = JSON.parse(localStorage.getItem('growthHistory')) || [];\n      localStorage.setItem('growthHistory', JSON.stringify([...existingHistory, newEntry]));\n      navigate('/');\n    } catch (err) {\n      console.error(\"Error saving growth history:\", err);\n      alert(\"Could not save growth history.\");\n    }\n  };\n  const lineChartData = {\n    labels: simulationResults ? simulationResults.map(p => p.time.toFixed(1)) : [],\n    datasets: [{\n      label: 'Simulated Mushroom Yield (g)',\n      data: simulationResults ? simulationResults.map(p => Number.isFinite(p.MushroomYield) ? p.MushroomYield : null) : [],\n      borderColor: 'lightgreen',\n      backgroundColor: 'rgba(144, 238, 144, 0.2)',\n      tension: 0.1,\n      pointRadius: 2,\n      pointHoverRadius: 5,\n      spanGaps: true\n    }]\n  };\n  const lineChartOptions = {\n    responsive: true,\n    maintainAspectRatio: false,\n    plugins: {\n      legend: {\n        labels: {\n          color: '#FFF'\n        }\n      },\n      tooltip: {\n        enabled: true\n      }\n    },\n    scales: {\n      x: {\n        title: {\n          display: true,\n          text: 'Time (Days)',\n          color: '#FFF'\n        },\n        ticks: {\n          color: '#FFF'\n        },\n        grid: {\n          color: 'rgba(255, 255, 255, 0.2)'\n        }\n      },\n      y: {\n        title: {\n          display: true,\n          text: 'Mushroom Yield (g)',\n          color: '#FFF'\n        },\n        ticks: {\n          color: '#FFF'\n        },\n        grid: {\n          color: 'rgba(255, 255, 255, 0.2)'\n        },\n        beginAtZero: true\n      }\n    }\n  };\n  const substrateDisplayNames = {\n    riceBran: 'Rice Bran',\n    corn: 'Corn Cob',\n    sugarcane: 'Sugarcane',\n    sawdust: 'Sawdust'\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"growth-simulation\",\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"simulation-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"back-button\",\n        onClick: handleBackClick,\n        children: \"\\u2190 Back\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 316,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Mushroom Growth Simulation\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 317,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 315,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n      className: \"simulation-content\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"simulation-area\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Yield vs Time\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 321,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          style: {\n            color: 'orange',\n            fontStyle: 'italic',\n            textAlign: 'center',\n            marginBottom: '15px'\n          },\n          children: \"Warning: Simulation logic is based on a scaffold. Ensure all equations in the 'derivatives' function are fully implemented for accurate results.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 322,\n          columnNumber: 22\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"chart-container\",\n          style: {\n            position: 'relative',\n            height: '40vh',\n            width: '100%'\n          },\n          children: [isLoading && /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"Loading and running simulation...\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 326,\n            columnNumber: 39\n          }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n            style: {\n              color: 'red'\n            },\n            children: [\"Error: \", error]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 327,\n            columnNumber: 35\n          }, this), !isLoading && !error && simulationResults && simulationResults.length > 0 && /*#__PURE__*/_jsxDEV(Line, {\n            options: lineChartOptions,\n            data: lineChartData\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 329,\n            columnNumber: 29\n          }, this), !isLoading && !error && (!simulationResults || simulationResults.length === 0) && /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"No simulation results to display.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 331,\n            columnNumber: 109\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 325,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 320,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chosen-conditions\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Simulation Conditions & Results:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 337,\n          columnNumber: 21\n        }, this), typeof displayConditions.substrate === 'object' && displayConditions.substrate !== null ? /*#__PURE__*/_jsxDEV(\"ul\", {\n          children: [Object.entries(displayConditions.substrate).map(([key, value]) => /*#__PURE__*/_jsxDEV(\"li\", {\n            children: [substrateDisplayNames[key] || key, \": \", value, \"g\"]\n          }, key, true, {\n            fileName: _jsxFileName,\n            lineNumber: 341,\n            columnNumber: 33\n          }, this)), /*#__PURE__*/_jsxDEV(\"li\", {\n            children: [\"Temperature: \", displayConditions.temperature, \"\\xB0C\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 343,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n            children: [\"pH: \", displayConditions.ph]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 344,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n            children: [\"Initial Dry Weight: \", calculatedInitialWeight.toFixed(2), \"g\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 345,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n            children: [\"Simulated Days: \", displayConditions.days]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 346,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n            children: [\"Final Simulated Yield: \", isLoading ? 'Calculating...' : error ? 'Error' : Number.isFinite(finalSimulatedYield) ? `${finalSimulatedYield.toFixed(2)}g` : 'N/A']\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 348,\n            columnNumber: 30\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 339,\n          columnNumber: 26\n        }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Substrate data not available.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 356,\n          columnNumber: 27\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 335,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"view-report-button\",\n        onClick: handleViewReportClick,\n        disabled: isLoading || !!error,\n        children: \"Done\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 359,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 319,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 314,\n    columnNumber: 9\n  }, this);\n};\n_s(GrowthSimulation, \"qBPeKMcce1eoCNy8wzIY87ReJbM=\", false, function () {\n  return [useNavigate];\n});\n_c = GrowthSimulation;\nexport default GrowthSimulation;\nvar _c;\n$RefreshReg$(_c, \"GrowthSimulation\");","map":{"version":3,"names":["React","useState","useEffect","useNavigate","Line","Chart","ChartJS","LineElement","PointElement","Tooltip","Legend","CategoryScale","LinearScale","odeRK4","jsxDEV","_jsxDEV","register","linearInterpolate","data","x","length","i","x0","y0","x1","y1","divisor","t","defaultParams","timeStart","timeLength","timeStep","derivatives","dydt","y","currentParams","currentCO2","currentComplexC","currentMushroomYield","currentMycelium","currentN","currentSimpleC","currentSpace","currentTemp","initialDrySubstrateWeight","cnRatioPlusOne","InitC","AvailableN","AvailableC","NEffect","CEffect","Math","sqrt","max","VolumeNormalisation","Effect_of_CO2_on_Mush_Growth","Effect_of_CO2_on_Myc_Growth","Effect_of_pH_on_Mush_Growth","Effect_of_pH_on_Myc_Growth","Effect_of_Temp_on_Mush_Growth","Effect_of_Temp_on_Myc_Growth","TempEff_","TempEffect","pHEff_","pHEffect","CO2Eff_","CO2Effect","RawGrowthRate","GrowthOpp","GrowthRate","NormGrowthRate","flow_Breakdown","flow_CCons","flow_CO2Prod","flow_CO2Vent","flow_Colonisation","flow_MushroomGrowth","flow_NCons","flow_TempProd","flow_TempVent","getInitialState","p","Number","complexSimpleRatio","Init_C","runSimulation","inputParams","t0","dt","positiveDt","numSteps","floor","derivativeFuncForSolver","e","console","error","fill","integrator","results","time","state","log","warn","step","some","val","isFinite","push","solverError","processedResults","map","point","CO2","ComplexC","MushroomYield","Mycelium","N","SimpleC","Space","Temp","GrowthSimulation","_s","navigate","simulationResults","setSimulationResults","isLoading","setIsLoading","setError","displayConditions","setDisplayConditions","substrate","temperature","ph","yieldValue","days","calculatedInitialWeight","setCalculatedInitialWeight","finalSimulatedYield","setFinalSimulatedYield","isMounted","setTimeout","savedTemperature","localStorage","getItem","savedPh","savedSubstrateJson","savedYield","savedDays","Error","substrateData","JSON","parse","temp","parseFloat","phValue","parseInt","initialWeight","Object","values","reduce","sum","simulationDuration","isInteger","isNaN","simulationInputs","_results","lastYield","err","message","handleBackClick","handleViewReportClick","formatDate","date","day","String","getDate","padStart","month","getMonth","year","getFullYear","yieldToSave","toFixed","newEntry","yield","entries","key","value","displayNames","riceBran","corn","sugarcane","sawdust","join","conditions","Date","existingHistory","setItem","stringify","alert","lineChartData","labels","datasets","label","borderColor","backgroundColor","tension","pointRadius","pointHoverRadius","spanGaps","lineChartOptions","responsive","maintainAspectRatio","plugins","legend","color","tooltip","enabled","scales","title","display","text","ticks","grid","beginAtZero","substrateDisplayNames","className","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","style","fontStyle","textAlign","marginBottom","position","height","width","options","disabled","_c","$RefreshReg$"],"sources":["C:/Users/celst/sds/src/components/GrowthSimulation.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { Line } from 'react-chartjs-2';\r\nimport { Chart as ChartJS, LineElement, PointElement, Tooltip, Legend, CategoryScale, LinearScale } from 'chart.js';\r\nimport odeRK4 from 'ode-rk4'; // Import the RK4 library\r\n\r\nimport '../styles/GrowthSimulation.css'; // Make sure you have some basic CSS\r\n\r\n// Register required components for Chart.js\r\nChartJS.register(LineElement, PointElement, Tooltip, Legend, CategoryScale, LinearScale);\r\n\r\n// --- Simulation Logic (Adapted from the scaffold) ---\r\n\r\n// Helper function for Converters (Linear Interpolation)\r\nfunction linearInterpolate(data, x) {\r\n    if (!data || data.length === 0) return 0;\r\n    if (x <= data[0][0]) return data[0][1];\r\n    if (x >= data[data.length - 1][0]) return data[data.length - 1][1];\r\n    let i = 0;\r\n    while (i < data.length - 1 && x > data[i + 1][0]) i++;\r\n    const x0 = data[i][0], y0 = data[i][1], x1 = data[i + 1][0], y1 = data[i + 1][1];\r\n    const divisor = (x1 - x0);\r\n    if (divisor === 0) return y0;\r\n    const t = (x - x0) / divisor;\r\n    return y0 + t * (y1 - y0);\r\n}\r\n\r\n// Default Model Parameters (can be overridden by inputs)\r\nconst defaultParams = {\r\n    timeStart: 0, timeLength: 100, timeStep: 0.2, // Default timeLength is 100\r\n    'C BD Rate': 1.11, 'C Coeff': 0.7, 'C Cons. Rate': 76.39, 'CO2 Coeff': 0.8,\r\n    'CO2 Production Rate': 410000, 'CO2 Removal Rate': 12.6, 'External CO2': 428.23,\r\n    'External Temp': 24, 'Growth Coeff': 5.1, 'Initial C:N Ratio': 43.58,\r\n    'Initial Complex:Simple Ratio': 0.8054, 'Initial Dry Substrate Weight': 410.2,\r\n    'IsMush': 1, 'Mushroom Multiplier': 5.17, 'N Coeff': 68.4, 'N Rate': 13.03,\r\n    'pH': 6.91, 'pH Coeff': 1.4, 'Temp Coeff': 1.3, 'Temp Production Rate': 405,\r\n    'Temp Transfer Rate': 1.5,\r\n    'Effect of CO2 on Mush Growth Data': [[500, 0.9], [800, 1], [1000, 0.8], [1200, 0.25], [1400, 0]],\r\n    'Effect of CO2 on Myc Growth Data': [[15000, 1], [20000, 0.9], [25000, 0.25], [30000, 0]],\r\n    'Effect of pH on Mush Growth Data': [[5.5, 0], [6, 0.25], [6.7, 1], [7, 0.6], [7.5, 0]],\r\n    'Effect of pH on Myc Growth Data': [[5.8, 0], [6, 0.25], [6.7, 1], [7, 0.6], [7.5, 0]],\r\n    'Effect of Temp on Mush Growth Data': [[10, 0], [15, 5.37], [20, 6.36], [25, 8.63], [30, 6.37], [40, 0]],\r\n    'Effect of Temp on Myc Growth Data': [[10, 0], [15, 5.37], [20, 6.36], [25, 8.63], [30, 6.37], [35, 5.36], [45, 0]],\r\n};\r\n\r\n// Derivative Function for RK4 Solver\r\n// *** THIS FUNCTION IS INCOMPLETE - NEEDS ALL MODEL EQUATIONS FILLED IN ***\r\nfunction derivatives(dydt, y, t, currentParams) {\r\n    const [\r\n        currentCO2, currentComplexC, currentMushroomYield, currentMycelium,\r\n        currentN, currentSimpleC, currentSpace, currentTemp\r\n    ] = y;\r\n\r\n    const initialDrySubstrateWeight = currentParams['Initial Dry Substrate Weight'] || 1;\r\n    const cnRatioPlusOne = (currentParams['Initial C:N Ratio'] + 1) || 1;\r\n\r\n    const InitC = initialDrySubstrateWeight - (initialDrySubstrateWeight / cnRatioPlusOne);\r\n    const AvailableN = currentN / initialDrySubstrateWeight;\r\n    const AvailableC = currentSimpleC / initialDrySubstrateWeight;\r\n    const NEffect = currentParams['N Coeff'] * AvailableN;\r\n    const CEffect = Math.sqrt(Math.max(0, currentParams['C Coeff'] * AvailableC));\r\n    const VolumeNormalisation = Math.sqrt(100 / initialDrySubstrateWeight);\r\n\r\n    const Effect_of_CO2_on_Mush_Growth = linearInterpolate(currentParams['Effect of CO2 on Mush Growth Data'], currentCO2);\r\n    const Effect_of_CO2_on_Myc_Growth = linearInterpolate(currentParams['Effect of CO2 on Myc Growth Data'], currentCO2);\r\n    const Effect_of_pH_on_Mush_Growth = linearInterpolate(currentParams['Effect of pH on Mush Growth Data'], currentParams['pH']);\r\n    const Effect_of_pH_on_Myc_Growth = linearInterpolate(currentParams['Effect of pH on Myc Growth Data'], currentParams['pH']);\r\n    const Effect_of_Temp_on_Mush_Growth = linearInterpolate(currentParams['Effect of Temp on Mush Growth Data'], currentTemp);\r\n    const Effect_of_Temp_on_Myc_Growth = linearInterpolate(currentParams['Effect of Temp on Myc Growth Data'], currentTemp);\r\n\r\n    const TempEff_ = currentParams['IsMush'] === 0 ? Effect_of_Temp_on_Myc_Growth : Effect_of_Temp_on_Mush_Growth;\r\n    const TempEffect = (currentParams['Temp Coeff'] * TempEff_) / 10;\r\n    const pHEff_ = currentParams['IsMush'] === 0 ? Effect_of_pH_on_Myc_Growth : Effect_of_pH_on_Mush_Growth;\r\n    const pHEffect = pHEff_ * currentParams['pH Coeff'];\r\n    const CO2Eff_ = currentParams['IsMush'] === 0 ? Effect_of_CO2_on_Myc_Growth : Effect_of_CO2_on_Mush_Growth;\r\n    const CO2Effect = currentParams['CO2 Coeff'] * CO2Eff_;\r\n\r\n    const RawGrowthRate = TempEffect * pHEffect * NEffect * CEffect * CO2Effect;\r\n    const GrowthOpp = currentSpace * currentMycelium;\r\n    let GrowthRate = currentParams['IsMush'] === 1 ? (RawGrowthRate * currentParams['Growth Coeff']) : (RawGrowthRate * GrowthOpp * currentParams['Growth Coeff']);\r\n    let NormGrowthRate = currentParams['IsMush'] === 1 ? (GrowthRate / 100) : GrowthRate;\r\n\r\n    // *** ADD ALL OTHER VARIABLE EQUATIONS FROM YOUR MODEL HERE ***\r\n\r\n    const flow_Breakdown = currentMycelium * currentParams['C BD Rate'] * currentComplexC * RawGrowthRate * VolumeNormalisation;\r\n    const flow_CCons = NormGrowthRate * currentParams['C Cons. Rate'];\r\n    const flow_CO2Prod = NormGrowthRate * currentParams['CO2 Production Rate'];\r\n    const flow_CO2Vent = currentParams['CO2 Removal Rate'] * (currentCO2 - currentParams['External CO2']) * VolumeNormalisation;\r\n    const flow_Colonisation = currentParams['IsMush'] === 0 ? GrowthRate : 0;\r\n    const flow_MushroomGrowth = currentParams['IsMush'] === 1 ? (GrowthRate * currentParams['Mushroom Multiplier']) : 0;\r\n    const flow_NCons = NormGrowthRate * currentParams['N Rate'];\r\n    const flow_TempProd = NormGrowthRate * currentParams['Temp Production Rate'];\r\n    const flow_TempVent = (currentTemp - currentParams['External Temp']) * currentParams['Temp Transfer Rate'] * VolumeNormalisation;\r\n\r\n    dydt[0] = flow_CO2Prod - flow_CO2Vent;\r\n    dydt[1] = -flow_Breakdown;\r\n    dydt[2] = flow_MushroomGrowth;\r\n    dydt[3] = flow_Colonisation;\r\n    dydt[4] = -flow_NCons;\r\n    dydt[5] = flow_Breakdown - flow_CCons;\r\n    dydt[6] = -flow_Colonisation;\r\n    dydt[7] = flow_TempProd - flow_TempVent;\r\n\r\n    if (currentCO2 <= 0 && dydt[0] < 0) dydt[0] = 0;\r\n    if (currentComplexC <= 0 && dydt[1] < 0) dydt[1] = 0;\r\n    if (currentN <= 0 && dydt[4] < 0) dydt[4] = 0;\r\n    if (currentSimpleC <= 0 && dydt[5] < 0) dydt[5] = 0;\r\n    if (currentTemp <= 0 && dydt[7] < 0) dydt[7] = 0;\r\n}\r\n\r\n// Initial State Calculation\r\nfunction getInitialState(p) {\r\n    const initialDrySubstrateWeight = Number(p['Initial Dry Substrate Weight']) || 1;\r\n    const cnRatioPlusOne = (Number(p['Initial C:N Ratio']) || 0) + 1;\r\n    const complexSimpleRatio = Number(p['Initial Complex:Simple Ratio']) || 0;\r\n    const Init_C = initialDrySubstrateWeight - (initialDrySubstrateWeight / cnRatioPlusOne);\r\n    return [\r\n        Number(p['External CO2']) || 0,\r\n        Init_C * complexSimpleRatio,\r\n        0, 0.9,\r\n        initialDrySubstrateWeight / cnRatioPlusOne,\r\n        Init_C * (1 - complexSimpleRatio),\r\n        0.98,\r\n        Number(p['External Temp']) || 0\r\n    ];\r\n}\r\n\r\n// Run Simulation Function\r\nfunction runSimulation(inputParams) {\r\n    const currentParams = { ...defaultParams, ...inputParams };\r\n    const y0 = getInitialState(currentParams);\r\n    const t0 = currentParams.timeStart;\r\n    const dt = currentParams.timeStep;\r\n    const timeLength = Math.max(0, currentParams.timeLength); // Use timeLength from params\r\n    const positiveDt = Math.max(dt, 1e-6);\r\n    const numSteps = Math.floor(timeLength / positiveDt);\r\n\r\n    const derivativeFuncForSolver = (dydt, y, t) => {\r\n        try { derivatives(dydt, y, t, currentParams); }\r\n        catch (e) { console.error(\"Error in derivatives:\", e); dydt.fill(0); }\r\n    };\r\n\r\n    const integrator = odeRK4(y0, derivativeFuncForSolver, t0, positiveDt);\r\n    const results = [{ time: integrator.t, state: [...integrator.y] }];\r\n\r\n    console.log(`Starting JS simulation for ${timeLength} days...`); // Log correct duration\r\n    if (numSteps <= 0) {\r\n         console.warn(\"Simulation length or time step results in zero steps.\");\r\n         return [];\r\n    }\r\n    for (let i = 0; i < numSteps; i++) {\r\n        try {\r\n            integrator.step();\r\n            if (integrator.y.some(val => !Number.isFinite(val))) {\r\n                console.error(\"Simulation unstable: Non-finite number detected at t=\", integrator.t);\r\n            }\r\n            results.push({ time: integrator.t, state: [...integrator.y] });\r\n        } catch (solverError) {\r\n             console.error(\"Error during RK4 step:\", solverError); break;\r\n        }\r\n    }\r\n    console.log(\"JS simulation finished.\");\r\n\r\n    const processedResults = results.map(point => ({\r\n        time: point.time,\r\n        CO2: point.state[0], ComplexC: point.state[1], MushroomYield: point.state[2],\r\n        Mycelium: point.state[3], N: point.state[4], SimpleC: point.state[5],\r\n        Space: point.state[6], Temp: point.state[7]\r\n    }));\r\n    return processedResults;\r\n}\r\n\r\n// --- React Component ---\r\nconst GrowthSimulation = () => {\r\n    const navigate = useNavigate();\r\n    const [simulationResults, setSimulationResults] = useState(null);\r\n    const [isLoading, setIsLoading] = useState(true);\r\n    const [error, setError] = useState(null);\r\n    const [displayConditions, setDisplayConditions] = useState({\r\n        substrate: {}, temperature: 0, ph: 0, yieldValue: 0, // yieldValue is initial substrate weight here\r\n        days: defaultParams.timeLength // Default days\r\n    });\r\n    const [calculatedInitialWeight, setCalculatedInitialWeight] = useState(0);\r\n    const [finalSimulatedYield, setFinalSimulatedYield] = useState(null); // State for final yield\r\n\r\n    useEffect(() => {\r\n        let isMounted = true;\r\n        setIsLoading(true);\r\n        setError(null);\r\n        setFinalSimulatedYield(null); // Reset final yield on new run\r\n\r\n        setTimeout(() => {\r\n            if (!isMounted) return;\r\n            try {\r\n                const savedTemperature = localStorage.getItem('temperature');\r\n                const savedPh = localStorage.getItem('ph');\r\n                const savedSubstrateJson = localStorage.getItem('substrate');\r\n                const savedYield = localStorage.getItem('yield'); // This is initial substrate weight\r\n                const savedDays = localStorage.getItem('simulationDays');\r\n\r\n                if (!savedTemperature || !savedPh || !savedSubstrateJson || !savedDays) {\r\n                    throw new Error(\"Required parameters not found in localStorage.\");\r\n                }\r\n\r\n                const substrateData = JSON.parse(savedSubstrateJson);\r\n                if (typeof substrateData !== 'object' || substrateData === null) {\r\n                     throw new Error(\"Invalid substrate data found in localStorage.\");\r\n                }\r\n\r\n                const temp = parseFloat(savedTemperature);\r\n                const phValue = parseFloat(savedPh);\r\n                const days = parseInt(savedDays, 10);\r\n                const initialWeight = Object.values(substrateData).reduce((sum, val) => sum + (Number(val) || 0), 0);\r\n                setCalculatedInitialWeight(initialWeight);\r\n\r\n                const simulationDuration = (Number.isInteger(days) && days > 0) ? days : defaultParams.timeLength;\r\n\r\n                if (isNaN(temp) || isNaN(phValue) || isNaN(initialWeight)) {\r\n                    throw new Error(\"Invalid numerical parameters loaded from localStorage.\");\r\n                }\r\n\r\n                setDisplayConditions({\r\n                    substrate: substrateData, temperature: temp, ph: phValue,\r\n                    yieldValue: parseFloat(savedYield) || 0, // Store initial substrate weight for reference\r\n                    days: simulationDuration\r\n                });\r\n\r\n                const simulationInputs = {\r\n                    'External Temp': temp,\r\n                    'pH': phValue,\r\n                    'Initial Dry Substrate Weight': initialWeight > 0 ? initialWeight : defaultParams['Initial Dry Substrate Weight'],\r\n                    'timeLength': simulationDuration // Use user-specified duration\r\n                };\r\n\r\n                const results = runSimulation(simulationInputs);\r\n                if (isMounted) {\r\n                    setSimulationResults(results);\r\n                    // Calculate and store final simulated yield\r\n                    if (results && results.length > 0) {\r\n                         const lastYield = results[results.length - 1]?.MushroomYield;\r\n                         if (Number.isFinite(lastYield)) {\r\n                             setFinalSimulatedYield(lastYield);\r\n                         }\r\n                    }\r\n                }\r\n\r\n            } catch (err) {\r\n                console.error(\"Error during simulation setup or run:\", err);\r\n                 if (isMounted) setError(err.message || \"Failed to run simulation.\");\r\n            } finally {\r\n                 if (isMounted) setIsLoading(false);\r\n            }\r\n        }, 50);\r\n\r\n        return () => { isMounted = false; };\r\n    }, [navigate]);\r\n\r\n    const handleBackClick = () => { navigate('/condition-setting'); };\r\n\r\n    const handleViewReportClick = () => {\r\n        const formatDate = (date) => {\r\n            const day = String(date.getDate()).padStart(2, '0');\r\n            const month = String(date.getMonth() + 1).padStart(2, '0');\r\n            const year = date.getFullYear();\r\n            return `${day}/${month}/${year}`;\r\n         };\r\n\r\n         // --- Use the final simulated yield if available ---\r\n         const yieldToSave = Number.isFinite(finalSimulatedYield)\r\n            ? `${finalSimulatedYield.toFixed(2)}g (Simulated)`\r\n            : `${displayConditions.yieldValue}g (Initial Substrate)`; // Fallback to initial substrate weight if sim fails\r\n\r\n        const newEntry = {\r\n            days: displayConditions.days, // The duration the simulation ran for\r\n            yield: yieldToSave,           // Use calculated final yield\r\n            substrate: Object.entries(displayConditions.substrate)\r\n                .map(([key, value]) => {\r\n                    const displayNames = { riceBran: 'Rice Bran', corn: 'Corn Cob', sugarcane: 'Sugarcane', sawdust: 'Sawdust' };\r\n                    return `${displayNames[key] || key}: ${value}g`;\r\n                 })\r\n                .join(', '),\r\n            conditions: `Temperature: ${displayConditions.temperature}°C, pH: ${displayConditions.ph}`,\r\n            date: formatDate(new Date()),\r\n        };\r\n        try {\r\n            const existingHistory = JSON.parse(localStorage.getItem('growthHistory')) || [];\r\n            localStorage.setItem('growthHistory', JSON.stringify([...existingHistory, newEntry]));\r\n            navigate('/');\r\n        } catch (err) { console.error(\"Error saving growth history:\", err); alert(\"Could not save growth history.\"); }\r\n    };\r\n\r\n    const lineChartData = {\r\n        labels: simulationResults ? simulationResults.map(p => p.time.toFixed(1)) : [],\r\n        datasets: [{\r\n            label: 'Simulated Mushroom Yield (g)',\r\n            data: simulationResults ? simulationResults.map(p => Number.isFinite(p.MushroomYield) ? p.MushroomYield : null) : [],\r\n            borderColor: 'lightgreen', backgroundColor: 'rgba(144, 238, 144, 0.2)',\r\n            tension: 0.1, pointRadius: 2, pointHoverRadius: 5, spanGaps: true,\r\n        }],\r\n    };\r\n\r\n    const lineChartOptions = {\r\n        responsive: true, maintainAspectRatio: false,\r\n        plugins: { legend: { labels: { color: '#FFF' } }, tooltip: { enabled: true } },\r\n        scales: {\r\n            x: { title: { display: true, text: 'Time (Days)', color: '#FFF' }, ticks: { color: '#FFF' }, grid: { color: 'rgba(255, 255, 255, 0.2)' } },\r\n            y: { title: { display: true, text: 'Mushroom Yield (g)', color: '#FFF' }, ticks: { color: '#FFF' }, grid: { color: 'rgba(255, 255, 255, 0.2)' }, beginAtZero: true }\r\n        }\r\n    };\r\n\r\n    const substrateDisplayNames = { riceBran: 'Rice Bran', corn: 'Corn Cob', sugarcane: 'Sugarcane', sawdust: 'Sawdust' };\r\n\r\n    return (\r\n        <div className=\"growth-simulation\">\r\n            <header className=\"simulation-header\">\r\n                <button className=\"back-button\" onClick={handleBackClick}>← Back</button>\r\n                <h1>Mushroom Growth Simulation</h1>\r\n            </header>\r\n            <main className=\"simulation-content\">\r\n                <div className=\"simulation-area\">\r\n                    <h3>Yield vs Time</h3>\r\n                     <p style={{ color: 'orange', fontStyle: 'italic', textAlign: 'center', marginBottom: '15px' }}>\r\n                        Warning: Simulation logic is based on a scaffold. Ensure all equations in the 'derivatives' function are fully implemented for accurate results.\r\n                    </p>\r\n                    <div className=\"chart-container\" style={{ position: 'relative', height: '40vh', width: '100%' }}>\r\n                        {isLoading && <p>Loading and running simulation...</p>}\r\n                        {error && <p style={{ color: 'red' }}>Error: {error}</p>}\r\n                        {!isLoading && !error && simulationResults && simulationResults.length > 0 && (\r\n                            <Line options={lineChartOptions} data={lineChartData} />\r\n                        )}\r\n                         {!isLoading && !error && (!simulationResults || simulationResults.length === 0) && <p>No simulation results to display.</p>}\r\n                    </div>\r\n                </div>\r\n\r\n                <div className=\"chosen-conditions\">\r\n                    {/* Changed title slightly */}\r\n                    <h3>Simulation Conditions & Results:</h3>\r\n                    {typeof displayConditions.substrate === 'object' && displayConditions.substrate !== null ? (\r\n                         <ul>\r\n                            {Object.entries(displayConditions.substrate).map(([key, value]) => (\r\n                                <li key={key}>{substrateDisplayNames[key] || key}: {value}g</li>\r\n                            ))}\r\n                            <li>Temperature: {displayConditions.temperature}°C</li>\r\n                            <li>pH: {displayConditions.ph}</li>\r\n                            <li>Initial Dry Weight: {calculatedInitialWeight.toFixed(2)}g</li>\r\n                            <li>Simulated Days: {displayConditions.days}</li>\r\n                             {/* Display final simulated yield */}\r\n                             <li>\r\n                                Final Simulated Yield: {\r\n                                    isLoading ? 'Calculating...' :\r\n                                    error ? 'Error' :\r\n                                    Number.isFinite(finalSimulatedYield) ? `${finalSimulatedYield.toFixed(2)}g` : 'N/A'\r\n                                }\r\n                             </li>\r\n                        </ul>\r\n                    ) : ( <p>Substrate data not available.</p> )}\r\n                </div>\r\n\r\n                <button className=\"view-report-button\" onClick={handleViewReportClick} disabled={isLoading || !!error}>\r\n                    Done\r\n                </button>\r\n            </main>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default GrowthSimulation;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}